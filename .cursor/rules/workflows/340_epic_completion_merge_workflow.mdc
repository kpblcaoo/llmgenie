---
description: 
globs: 
alwaysApply: false
---
## Meta
# Epic Completion & Merge Workflow (Best Practice)

## Purpose
–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–ø–∏–∫–æ–≤ –∏ —Å–ª–∏—è–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ Epic 5 completion experience –∏ user feedback

## Epic Completion Checklist

### üìã **Pre-Commit Validation**
1. **Component Verification via struct.json**
   ```bash
   # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å src/struct.json –∏ tests/struct.json
   # –ü–ï–†–ï–î —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
   ```
2. **Test Coverage Validation**
   ```bash
   python -m pytest tests/test_<epic_name>.py tests/<epic_component>/ -v
   # –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (100% success rate)
   ```
3. **Documentation Review**
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫–∏
   - –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é "–∫–æ–Ω—Ñ–µ—Ç–∫—É" –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
   - –°—Å—ã–ª–∫–∏ –Ω–∞ detailed documentation, –Ω–µ –∏–Ω–ª–∞–π–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

### üîß **Git Workflow**
1. **Status Check**
   ```bash
   git status
   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π epic –≤–µ—Ç–∫–µ
   ```

2. **Selective Add** (–ù–ï git add .)
   ```bash
   git add <specific-epic-files>
   # –ò—Å–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (venv, cache, etc.)
   ```

3. **Git Config Setup** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   ```bash
   git config user.email "email@domain.com"
   git config user.name "username"
   ```

4. **Commit Message Template**
   ```bash
   git commit -m "feat(<epic_name>): <Epic Title> - <Status>"
   # –ü—Ä–∏–º–µ—Ä—ã:
   # feat(epic5): Complete MCP-Ollama Integration - Production Ready
   # feat(epic3): Handoff Validation System - Complete
   ```

5. **Branch Switch & Merge**
   ```bash
   git checkout <target-branch>
   git merge <epic-branch> --no-ff -m "merge: <Epic Name> complete"
   ```

### üìä **Merge Validation**
1. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π**
   - –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å scope
   - –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—ã—Å—è—á —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏

2. **Post-merge Test Run**
   ```bash
   python -m pytest <affected-areas> -v
   # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ merge –Ω–µ —Å–ª–æ–º–∞–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
   ```

## Critical Lessons (Epic 5 Experience)

### ‚ùå **Avoid These Mistakes**
1. **–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ struct.json**
2. **–ù–ï –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å user feedback "–ø—Ä–æ–≤–µ—Ä—è–π struct.json"**  
3. **–ù–ï –¥–µ–ª–∞—Ç—å git add . (–∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)**
4. **–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å 300+ —Å—Ç—Ä–æ–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 550+ —Å—Ç—Ä–æ–∫**

### ‚úÖ **Follow These Practices**
1. **struct.json = SOURCE OF TRUTH** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. **Modular indices** —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
3. **"—Å—Ç–æ—è—Ç—å! –ø—Ä–æ–≤–µ—Ä—è–π"** = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª –∫ –∞–Ω–∞–ª–∏–∑—É
4. **–ö—Ä–∞—Ç–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è > –ø–æ–¥—Ä–æ–±–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**

### üéØ **Success Indicators**
- **–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç** (100% success rate)
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ñ–µ—Ç–∫–æ–π** (–∫—Ä–∞—Ç–∫–∞—è –Ω–æ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∞—è)
- **–ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è** —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
- **Merge diff —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç** —Ä–µ–∞–ª—å–Ω–æ–º—É scope –∏–∑–º–µ–Ω–µ–Ω–∏–π

## Epic Status Templates

### **Production Ready**
```
Status: ‚úÖ COMPLETE (95%+) - Ready for Production
Components: <list key components>
Testing: <X>/<X> tests passing (100%)
Documentation: Production-ready guide created
```

### **Phase Complete**
```
Status: ‚úÖ Phase <X> COMPLETE
Next: Phase <X+1> - <description>
Blockers: <none|list blockers>
```

## Integration with Rules

### @-References
- @core/006_best_practices_recording: All workflows recorded
- @templates/900_template_commit: Commit message format
- @workflows/100_code_review: Code review process
- @core/001_logging_checkpoints: Session logging

### Fallback
- If git config missing, set locally for repo
- If tests fail, investigate before merge
- If documentation exists, reference don't duplicate

## Automation Opportunities

### **Future Enhancements**
1. **Pre-commit hooks** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ struct.json analysis
2. **Automated test coverage** reporting
3. **Documentation diff detection** (avoid duplication)
4. **Epic completion templates** based on —ç—Ç–æ–≥–æ workflow

---

*Best practice –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ Epic 5 completion experience. –û–±–Ω–æ–≤–ª—è—Ç—å –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö insights.*
