name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, meta/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/llmgenie --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/

  api-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI startup
      run: |
        cd src && python -c "from llmgenie.api.main import app; print('FastAPI app loads successfully')"
    
    - name: Run API tests
      run: |
        pytest tests/test_api.py -v
    
    - name: Test MCP handoff validation
      run: |
        cd src && python -c "
        from llmgenie.api.handoff_validator import HandoffValidator, HandoffPackage, HandoffFile
        
        # Test basic validation
        validator = HandoffValidator()
        
        # Create test handoff package
        test_package = HandoffPackage(
            from_role='coder',
            to_role='reviewer', 
            epic_id='test_epic',
            files=[
                HandoffFile(path='summary.md', type='summary', priority=1),
                HandoffFile(path='lessons.md', type='lessons', priority=2),
                HandoffFile(path='checklist.md', type='checklist', priority=3),
                HandoffFile(path='audit.md', type='audit', priority=4),
                HandoffFile(path='state.json', type='metadata', priority=5)
            ],
            startup_prompt='Resume work on test_epic. Status: testing. Infrastructure: CI/CD. Lessons: validation works. Next: complete epic',
            control_questions=['What is the current status?', 'Are tests passing?', 'What scope should be maintained?'],
            success_criteria=['Package validates', 'All files present', 'Questions cover key areas']
        )
        
        # Validate package
        result = validator.validate_package(test_package)
        
        print(f'Validation result: {result.is_valid}')
        print(f'Completeness score: {result.completeness_score:.2f}')
        print(f'Missing files: {result.missing_files}')
        
        # Ensure basic validation works
        assert result.completeness_score > 0.0, 'Validator should produce non-zero score'
        assert len(result.missing_files) == 5, 'Should detect all 5 missing files in CI environment'
        print('✅ Handoff validation working correctly')
        "

  handoff-validation:
    runs-on: ubuntu-latest
    needs: [test, lint, api-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate Epic 4 handoff package
      run: |
        cd src && python -c "
        import sys
        sys.path.append('..')
        from llmgenie.api.handoff_validator import HandoffValidator, HandoffPackage, HandoffFile
        
        # Validate current Epic 4 handoff package
        epic4_package = HandoffPackage(
            from_role='coder',
            to_role='reviewer',
            epic_id='epic4',
            files=[
                HandoffFile(path='docs/memos/epic4/epic4_requirements_and_lessons.md', type='summary', priority=1),
                HandoffFile(path='docs/memos/epic4/epic4_checklist.md', type='checklist', priority=2),
                HandoffFile(path='src/llmgenie/api/handoff_validator.py', type='audit', priority=3),
                HandoffFile(path='src/llmgenie/api/main.py', type='audit', priority=4),
                HandoffFile(path='project_state.json', type='metadata', priority=5)
            ],
            startup_prompt='Resume Epic 4: MCP/CLI enforcement & handoff validation. Status: MCP integration completed, CI/CD integration in progress. Infrastructure: FastAPI + MCP working, tests passing. Lessons: Cursor supports MCP natively, fastapi-mcp simplifies integration. Next: complete CI/CD integration, documentation, validation on real packages.',
            control_questions=[
                'What is the current Epic 4 completion status?',
                'Are MCP endpoints working and tested?', 
                'What remaining tasks need completion?'
            ],
            success_criteria=[
                'MCP integration working in Cursor',
                'CI/CD validates handoff packages automatically',
                'All Epic 4 checklist items completed'
            ]
        )
        
        validator = HandoffValidator('.')
        result = validator.validate_package(epic4_package)
        
        print('=== Epic 4 Handoff Validation Report ===')
        print(f'Overall validation: {\"✅ PASS\" if result.is_valid else \"❌ FAIL\"}')
        print(f'Completeness score: {result.completeness_score:.2f}/1.0')
        print(f'Files validation: {result.file_validation}')
        print(f'Missing file types: {result.missing_files}')
        print(f'Warnings: {result.warnings}')
        print(f'Recommendations: {result.recommendations}')
        
        # Report but don't fail CI for validation issues (informational)
        if result.completeness_score < 0.8:
            print('⚠️  Handoff package completeness below 80% - consider improving before handoff')
        else:
            print('✅ Handoff package meets quality standards')
        " 