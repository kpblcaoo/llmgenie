{
  "module_id": "core.llmgenie.orchestration.orchestrator",
  "path": "core/llmgenie/orchestration/orchestrator.py",
  "category": "core",
  "module_doc": "Multi-Agent Orchestrator\n\nEpic 5 Phase 3.1: Main orchestration class\nSingle responsibility: Coordinate multiple agents using different execution strategies",
  "functions": [
    {
      "name": "__init__",
      "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
      "line_range": [
        28,
        44
      ],
      "parameters": [
        "self",
        "agent_routers",
        "task_classifier"
      ],
      "decorators": []
    },
    {
      "name": "orchestrate",
      "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
      "line_range": [
        46,
        135
      ],
      "parameters": [
        "self",
        "query",
        "execution_mode",
        "coordination_type",
        "context",
        "subtasks",
        "task_id"
      ],
      "decorators": []
    },
    {
      "name": "_suggest_execution_mode",
      "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
      "line_range": [
        137,
        160
      ],
      "parameters": [
        "self",
        "query"
      ],
      "decorators": []
    },
    {
      "name": "_suggest_coordination_type",
      "docstring": "Suggest coordination type based on execution mode",
      "line_range": [
        162,
        172
      ],
      "parameters": [
        "self",
        "execution_mode"
      ],
      "decorators": []
    },
    {
      "name": "_validate_coordination_compatibility",
      "docstring": "Validate that coordination type is compatible with execution mode",
      "line_range": [
        174,
        186
      ],
      "parameters": [
        "self",
        "execution_mode",
        "coordination_type"
      ],
      "decorators": []
    },
    {
      "name": "get_orchestration_stats",
      "docstring": "Get orchestration statistics and available agents",
      "line_range": [
        188,
        201
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "AgentOrchestrator",
      "docstring": "Main orchestration class for multi-agent task execution\n\nEpic 5 integration: Uses existing TaskRouter + ModelRouter components\nSupports: PARALLEL, SEQUENTIAL, COLLABORATIVE execution modes",
      "line_range": [
        20,
        201
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
          "line_range": [
            28,
            44
          ],
          "parameters": [
            "self",
            "agent_routers",
            "task_classifier"
          ]
        },
        {
          "name": "orchestrate",
          "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
          "line_range": [
            46,
            135
          ],
          "parameters": [
            "self",
            "query",
            "execution_mode",
            "coordination_type",
            "context",
            "subtasks",
            "task_id"
          ]
        },
        {
          "name": "_suggest_execution_mode",
          "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "query"
          ]
        },
        {
          "name": "_suggest_coordination_type",
          "docstring": "Suggest coordination type based on execution mode",
          "line_range": [
            162,
            172
          ],
          "parameters": [
            "self",
            "execution_mode"
          ]
        },
        {
          "name": "_validate_coordination_compatibility",
          "docstring": "Validate that coordination type is compatible with execution mode",
          "line_range": [
            174,
            186
          ],
          "parameters": [
            "self",
            "execution_mode",
            "coordination_type"
          ]
        },
        {
          "name": "get_orchestration_stats",
          "docstring": "Get orchestration statistics and available agents",
          "line_range": [
            188,
            201
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "logger.info",
      "ParallelExecutor",
      "len",
      "CollaborativeExecutor",
      "SequentialExecutor"
    ],
    "orchestrate": [
      "OrchestrationResult",
      "start_time.timestamp",
      "int",
      "OrchestrationTask",
      "self._suggest_coordination_type",
      "logger.info",
      "logger.warning",
      "self._validate_coordination_compatibility",
      "ValueError",
      "logger.error",
      "str",
      "datetime.now",
      "len",
      "self._suggest_execution_mode"
    ],
    "_suggest_execution_mode": [
      "logger.warning",
      "ExecutionMode.suggest_mode_for_task"
    ],
    "_suggest_coordination_type": [],
    "_validate_coordination_compatibility": [
      "compatible_combinations.get",
      "coordination_type.is_compatible_with_mode"
    ],
    "get_orchestration_stats": [
      "list",
      "len"
    ]
  },
  "dependencies": [
    "AgentCoordination",
    "Any",
    "CollaborativeExecutor",
    "Dict",
    "ExecutionMode",
    "List",
    "ModelRouter",
    "Optional",
    "OrchestrationResult",
    "OrchestrationTask",
    "ParallelExecutor",
    "SequentialExecutor",
    "TaskClassifier",
    "core",
    "datetime",
    "executors",
    "logging",
    "task_router",
    "typing"
  ],
  "hash": "15ef1421365f772d0d10ebb002a9b5ef46c79e30408acc2a5e7630155371aaff",
  "artifact_id": "928523d4-cbbf-447f-a540-534fd184532d"
}