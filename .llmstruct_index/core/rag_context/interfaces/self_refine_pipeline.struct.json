{
  "module_id": "core.rag_context.interfaces.self_refine_pipeline",
  "path": "core/rag_context/interfaces/self_refine_pipeline.py",
  "category": "core",
  "module_doc": "Self-Refine Pipeline with MCP Tools Integration\nEnhanced iterative improvement system for code, text, and workflow artifacts\nPart of Phase 4A.3: Self-Refine Pipeline Supercharged",
  "functions": [
    {
      "name": "quick_refine_code",
      "docstring": "Quick function to refine code content",
      "line_range": [
        316,
        320
      ],
      "parameters": [
        "code",
        "max_iterations"
      ],
      "decorators": []
    },
    {
      "name": "quick_refine_text",
      "docstring": "Quick function to refine text content",
      "line_range": [
        323,
        327
      ],
      "parameters": [
        "text",
        "max_iterations"
      ],
      "decorators": []
    },
    {
      "name": "__init__",
      "docstring": "",
      "line_range": [
        56,
        59
      ],
      "parameters": [
        "self",
        "max_iterations",
        "confidence_threshold"
      ],
      "decorators": []
    },
    {
      "name": "_check_mcp_tools",
      "docstring": "Check which MCP tools are available",
      "line_range": [
        61,
        69
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "refine",
      "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
      "line_range": [
        71,
        133
      ],
      "parameters": [
        "self",
        "content",
        "refinement_type",
        "context",
        "custom_criteria"
      ],
      "decorators": []
    },
    {
      "name": "_enhance_context",
      "docstring": "Enhance context using MCP tools if available",
      "line_range": [
        135,
        161
      ],
      "parameters": [
        "self",
        "content",
        "refinement_type",
        "context"
      ],
      "decorators": []
    },
    {
      "name": "_critique_with_mcp",
      "docstring": "Generate critique using MCP tools for enhanced analysis",
      "line_range": [
        163,
        210
      ],
      "parameters": [
        "self",
        "content",
        "refinement_type",
        "context"
      ],
      "decorators": []
    },
    {
      "name": "_apply_refinements",
      "docstring": "Apply refinements based on critique results",
      "line_range": [
        212,
        230
      ],
      "parameters": [
        "self",
        "content",
        "critique_result",
        "refinement_type"
      ],
      "decorators": []
    },
    {
      "name": "_validate_improvements",
      "docstring": "Validate that refinements actually improved the content",
      "line_range": [
        232,
        246
      ],
      "parameters": [
        "self",
        "original",
        "refined",
        "critique"
      ],
      "decorators": []
    },
    {
      "name": "refine_code_file",
      "docstring": "Convenience method to refine an entire code file",
      "line_range": [
        248,
        272
      ],
      "parameters": [
        "self",
        "file_path",
        "backup"
      ],
      "decorators": []
    },
    {
      "name": "generate_refinement_report",
      "docstring": "Generate a comprehensive report of the refinement process",
      "line_range": [
        274,
        303
      ],
      "parameters": [
        "self",
        "results"
      ],
      "decorators": []
    },
    {
      "name": "_get_most_used_tools",
      "docstring": "Get list of most frequently used MCP tools",
      "line_range": [
        305,
        312
      ],
      "parameters": [
        "self",
        "results"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "RefinementType",
      "docstring": "Types of content that can be refined",
      "line_range": [
        22,
        28
      ],
      "methods": [],
      "bases": [
        "Enum"
      ]
    },
    {
      "name": "RefinementResult",
      "docstring": "Result of a refinement iteration",
      "line_range": [
        32,
        41
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "SelfRefinePipeline",
      "docstring": "Enhanced Self-Refine Pipeline with MCP Tools Integration\n\nFeatures:\n- Multi-type content refinement (code, text, config, etc.)\n- MCP tools integration for context-aware critique\n- Automatic logging of refinement process\n- Configurable improvement criteria\n- Iterative improvement until satisfaction threshold",
      "line_range": [
        44,
        312
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "parameters": [
            "self",
            "max_iterations",
            "confidence_threshold"
          ]
        },
        {
          "name": "_check_mcp_tools",
          "docstring": "Check which MCP tools are available",
          "line_range": [
            61,
            69
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "refine",
          "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
          "line_range": [
            71,
            133
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context",
            "custom_criteria"
          ]
        },
        {
          "name": "_enhance_context",
          "docstring": "Enhance context using MCP tools if available",
          "line_range": [
            135,
            161
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ]
        },
        {
          "name": "_critique_with_mcp",
          "docstring": "Generate critique using MCP tools for enhanced analysis",
          "line_range": [
            163,
            210
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ]
        },
        {
          "name": "_apply_refinements",
          "docstring": "Apply refinements based on critique results",
          "line_range": [
            212,
            230
          ],
          "parameters": [
            "self",
            "content",
            "critique_result",
            "refinement_type"
          ]
        },
        {
          "name": "_validate_improvements",
          "docstring": "Validate that refinements actually improved the content",
          "line_range": [
            232,
            246
          ],
          "parameters": [
            "self",
            "original",
            "refined",
            "critique"
          ]
        },
        {
          "name": "refine_code_file",
          "docstring": "Convenience method to refine an entire code file",
          "line_range": [
            248,
            272
          ],
          "parameters": [
            "self",
            "file_path",
            "backup"
          ]
        },
        {
          "name": "generate_refinement_report",
          "docstring": "Generate a comprehensive report of the refinement process",
          "line_range": [
            274,
            303
          ],
          "parameters": [
            "self",
            "results"
          ]
        },
        {
          "name": "_get_most_used_tools",
          "docstring": "Get list of most frequently used MCP tools",
          "line_range": [
            305,
            312
          ],
          "parameters": [
            "self",
            "results"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "self._check_mcp_tools"
    ],
    "_check_mcp_tools": [],
    "refine": [
      "critique_result.get",
      "self._enhance_context",
      "self._critique_with_mcp",
      "self._validate_improvements",
      "range",
      "RefinementResult",
      "auto_logger.log_workflow_phase",
      "iterations.append",
      "time.time",
      "self._apply_refinements"
    ],
    "_enhance_context": [
      "mcp_tools_used.append",
      "context.copy"
    ],
    "_critique_with_mcp": [
      "context.get",
      "critique_points.append",
      "critique_points.extend",
      "mcp_tools_used.append"
    ],
    "_apply_refinements": [
      "str"
    ],
    "_validate_improvements": [
      "min",
      "len"
    ],
    "refine_code_file": [
      "file_path.write_text",
      "str",
      "FileNotFoundError",
      "file_path.read_text",
      "file_path.exists",
      "file_path.with_suffix",
      "backup_path.write_text",
      "self.refine",
      "Path"
    ],
    "generate_refinement_report": [
      "set",
      "self._get_most_used_tools",
      "sum",
      "len"
    ],
    "_get_most_used_tools": [
      "tool_counts.get",
      "sorted",
      "tool_counts.keys"
    ],
    "quick_refine_code": [
      "SelfRefinePipeline",
      "pipeline.refine"
    ],
    "quick_refine_text": [
      "SelfRefinePipeline",
      "pipeline.refine"
    ]
  },
  "dependencies": [
    "Any",
    "Callable",
    "Dict",
    "Enum",
    "List",
    "Optional",
    "Path",
    "Union",
    "auto_logger",
    "dataclass",
    "dataclasses",
    "enum",
    "json",
    "pathlib",
    "time",
    "typing"
  ],
  "hash": "9f3711a6c9240c508770c3725dedc2933aeb045fb1c878313d24dee7b578317d",
  "artifact_id": "28b77e7e-cee7-4fe7-894d-0b39f6800c33"
}