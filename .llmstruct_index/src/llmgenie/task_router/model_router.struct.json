{
  "module_id": "src.llmgenie.task_router.model_router",
  "path": "src/llmgenie/task_router/model_router.py",
  "category": "core",
  "module_doc": "Model Router for Smart LLM Selection\n\nIntegrates with existing FastAPI infrastructure (main.py:98-112)\nExtends AgentRequest/AgentResponse pattern with Ollama backend",
  "functions": [
    {
      "name": "__init__",
      "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
      "line_range": [
        58,
        87
      ],
      "parameters": [
        "self",
        "classifier",
        "quality_validator",
        "quality_intelligence",
        "rag_enhancer"
      ],
      "decorators": []
    },
    {
      "name": "route_task",
      "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
      "line_range": [
        89,
        148
      ],
      "parameters": [
        "self",
        "query",
        "context",
        "model_preference"
      ],
      "decorators": []
    },
    {
      "name": "_select_quality_aware_model",
      "docstring": "Select optimal model based on task classification AND quality requirements",
      "line_range": [
        150,
        177
      ],
      "parameters": [
        "self",
        "classification",
        "quality_requirements"
      ],
      "decorators": []
    },
    {
      "name": "_get_candidate_models",
      "docstring": "Get candidate models based on task classification preferences",
      "line_range": [
        179,
        204
      ],
      "parameters": [
        "self",
        "classification"
      ],
      "decorators": []
    },
    {
      "name": "_select_optimal_model_legacy",
      "docstring": "Legacy model selection logic (fallback)",
      "line_range": [
        206,
        227
      ],
      "parameters": [
        "self",
        "classification"
      ],
      "decorators": []
    },
    {
      "name": "execute_with_model",
      "docstring": "Execute task with specified model",
      "line_range": [
        229,
        262
      ],
      "parameters": [
        "self",
        "query",
        "model_choice",
        "context"
      ],
      "decorators": []
    },
    {
      "name": "_execute_ollama_task",
      "docstring": "Execute task using Ollama API",
      "line_range": [
        264,
        288
      ],
      "parameters": [
        "self",
        "query",
        "model_choice",
        "context"
      ],
      "decorators": []
    },
    {
      "name": "_execute_claude_task",
      "docstring": "Execute task using Claude API - placeholder for integration",
      "line_range": [
        290,
        292
      ],
      "parameters": [
        "self",
        "query",
        "context"
      ],
      "decorators": []
    },
    {
      "name": "_get_adaptive_fallback",
      "docstring": "Determine adaptive fallback model based on quality requirements",
      "line_range": [
        294,
        311
      ],
      "parameters": [
        "self",
        "primary_model",
        "quality_requirements"
      ],
      "decorators": []
    },
    {
      "name": "_get_fallback_model_legacy",
      "docstring": "Legacy fallback model mapping",
      "line_range": [
        313,
        323
      ],
      "parameters": [
        "self",
        "primary_model"
      ],
      "decorators": []
    },
    {
      "name": "_calculate_quality_threshold",
      "docstring": "Calculate minimum quality threshold based on task complexity",
      "line_range": [
        325,
        335
      ],
      "parameters": [
        "self",
        "classification"
      ],
      "decorators": []
    },
    {
      "name": "_create_preference_decision",
      "docstring": "Create routing decision for user-specified model preference",
      "line_range": [
        337,
        350
      ],
      "parameters": [
        "self",
        "model_preference",
        "query"
      ],
      "decorators": []
    },
    {
      "name": "_generate_routing_reasoning",
      "docstring": "Generate human-readable reasoning for routing decision",
      "line_range": [
        352,
        363
      ],
      "parameters": [
        "self",
        "classification",
        "selected_model"
      ],
      "decorators": []
    },
    {
      "name": "execute_with_quality_tracking",
      "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
      "line_range": [
        365,
        452
      ],
      "parameters": [
        "self",
        "query",
        "task_id",
        "model_preference",
        "context"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "ModelChoice",
      "docstring": "Available LLM backends for task execution",
      "line_range": [
        30,
        36
      ],
      "methods": [],
      "bases": [
        "Enum"
      ]
    },
    {
      "name": "RoutingDecision",
      "docstring": "Result of routing decision process",
      "line_range": [
        40,
        47
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "ModelRouter",
      "docstring": "Smart Model Router for LLM task execution\n\nExtends existing FastAPI agent pattern from main.py:98-112\nIntegrates with AgentRequest/AgentResponse models",
      "line_range": [
        50,
        452
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
          "line_range": [
            58,
            87
          ],
          "parameters": [
            "self",
            "classifier",
            "quality_validator",
            "quality_intelligence",
            "rag_enhancer"
          ]
        },
        {
          "name": "route_task",
          "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
          "line_range": [
            89,
            148
          ],
          "parameters": [
            "self",
            "query",
            "context",
            "model_preference"
          ]
        },
        {
          "name": "_select_quality_aware_model",
          "docstring": "Select optimal model based on task classification AND quality requirements",
          "line_range": [
            150,
            177
          ],
          "parameters": [
            "self",
            "classification",
            "quality_requirements"
          ]
        },
        {
          "name": "_get_candidate_models",
          "docstring": "Get candidate models based on task classification preferences",
          "line_range": [
            179,
            204
          ],
          "parameters": [
            "self",
            "classification"
          ]
        },
        {
          "name": "_select_optimal_model_legacy",
          "docstring": "Legacy model selection logic (fallback)",
          "line_range": [
            206,
            227
          ],
          "parameters": [
            "self",
            "classification"
          ]
        },
        {
          "name": "execute_with_model",
          "docstring": "Execute task with specified model",
          "line_range": [
            229,
            262
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ]
        },
        {
          "name": "_execute_ollama_task",
          "docstring": "Execute task using Ollama API",
          "line_range": [
            264,
            288
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ]
        },
        {
          "name": "_execute_claude_task",
          "docstring": "Execute task using Claude API - placeholder for integration",
          "line_range": [
            290,
            292
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ]
        },
        {
          "name": "_get_adaptive_fallback",
          "docstring": "Determine adaptive fallback model based on quality requirements",
          "line_range": [
            294,
            311
          ],
          "parameters": [
            "self",
            "primary_model",
            "quality_requirements"
          ]
        },
        {
          "name": "_get_fallback_model_legacy",
          "docstring": "Legacy fallback model mapping",
          "line_range": [
            313,
            323
          ],
          "parameters": [
            "self",
            "primary_model"
          ]
        },
        {
          "name": "_calculate_quality_threshold",
          "docstring": "Calculate minimum quality threshold based on task complexity",
          "line_range": [
            325,
            335
          ],
          "parameters": [
            "self",
            "classification"
          ]
        },
        {
          "name": "_create_preference_decision",
          "docstring": "Create routing decision for user-specified model preference",
          "line_range": [
            337,
            350
          ],
          "parameters": [
            "self",
            "model_preference",
            "query"
          ]
        },
        {
          "name": "_generate_routing_reasoning",
          "docstring": "Generate human-readable reasoning for routing decision",
          "line_range": [
            352,
            363
          ],
          "parameters": [
            "self",
            "classification",
            "selected_model"
          ]
        },
        {
          "name": "execute_with_quality_tracking",
          "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
          "line_range": [
            365,
            452
          ],
          "parameters": [
            "self",
            "query",
            "task_id",
            "model_preference",
            "context"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "QualityIntelligence",
      "QualityValidator",
      "print",
      "PromptEnhancer",
      "TaskClassifier",
      "RAGConfig"
    ],
    "route_task": [
      "len",
      "self._select_quality_aware_model",
      "print",
      "self._calculate_quality_threshold",
      "self._generate_routing_reasoning",
      "RoutingDecision",
      "self._create_preference_decision",
      "self._get_adaptive_fallback"
    ],
    "_select_quality_aware_model": [
      "model_scores.values",
      "self._get_candidate_models",
      "self._select_optimal_model_legacy",
      "model_scores.items",
      "max"
    ],
    "_get_candidate_models": [
      "set",
      "candidates.extend",
      "candidates.append",
      "list"
    ],
    "_select_optimal_model_legacy": [],
    "execute_with_model": [
      "str",
      "self._execute_ollama_task",
      "self._execute_claude_task",
      "ValueError",
      "datetime.now"
    ],
    "_execute_ollama_task": [
      "client.post",
      "response.json",
      "response.raise_for_status",
      "httpx.AsyncClient"
    ],
    "_execute_claude_task": [],
    "_get_adaptive_fallback": [
      "quality_requirements.get",
      "high_quality_fallback.get",
      "self._get_fallback_model_legacy"
    ],
    "_get_fallback_model_legacy": [
      "fallback_map.get"
    ],
    "_calculate_quality_threshold": [
      "base_thresholds.get"
    ],
    "_create_preference_decision": [
      "RoutingDecision",
      "self._get_fallback_model_legacy"
    ],
    "_generate_routing_reasoning": [],
    "execute_with_quality_tracking": [
      "self.execute_with_model",
      "QualityResult",
      "execution_result.get",
      "self.route_task"
    ]
  },
  "dependencies": [
    "Any",
    "ClassificationResult",
    "Dict",
    "Enum",
    "List",
    "Optional",
    "PromptEnhancer",
    "QualityIntelligence",
    "QualityResult",
    "QualityScore",
    "QualityValidator",
    "RAGConfig",
    "TaskClassifier",
    "Union",
    "asyncio",
    "dataclass",
    "dataclasses",
    "datetime",
    "enum",
    "httpx",
    "quality_intelligence",
    "quality_validator",
    "rag_context",
    "task_classifier",
    "typing"
  ],
  "hash": "e55b69a4b4fd52267048ee3bd10a6675d836ea13d7446809934890ad3ec21b10",
  "artifact_id": "90e08b26-a139-4297-aa11-27f26d3ffd73"
}