{
  "module_id": "src.llmgenie.task_router.quality_intelligence",
  "path": "src/llmgenie/task_router/quality_intelligence.py",
  "category": "core",
  "module_doc": "Quality Intelligence System for Smart LLM Routing\n\nProvides feedback loop mechanism for continuous improvement of routing decisions\nBased on Phase 2D architecture design - lightweight implementation for production use",
  "functions": [
    {
      "name": "__init__",
      "docstring": "Initialize quality intelligence with data persistence",
      "line_range": [
        68,
        80
      ],
      "parameters": [
        "self",
        "data_dir"
      ],
      "decorators": []
    },
    {
      "name": "record_execution_result",
      "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
      "line_range": [
        82,
        128
      ],
      "parameters": [
        "self",
        "task_id",
        "routing_decision",
        "quality_result",
        "execution_time",
        "query",
        "task_type",
        "success",
        "user_feedback"
      ],
      "decorators": []
    },
    {
      "name": "analyze_model_performance_trends",
      "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
      "line_range": [
        130,
        197
      ],
      "parameters": [
        "self",
        "model_choice",
        "task_type",
        "days_back"
      ],
      "decorators": []
    },
    {
      "name": "suggest_routing_improvements",
      "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
      "line_range": [
        199,
        246
      ],
      "parameters": [
        "self",
        "min_confidence"
      ],
      "decorators": []
    },
    {
      "name": "update_quality_thresholds",
      "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
      "line_range": [
        248,
        298
      ],
      "parameters": [
        "self",
        "task_type",
        "performance_data"
      ],
      "decorators": []
    },
    {
      "name": "_load_historical_data",
      "docstring": "Load historical performance data from disk",
      "line_range": [
        300,
        314
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "_persist_result",
      "docstring": "Persist execution result to disk",
      "line_range": [
        316,
        332
      ],
      "parameters": [
        "self",
        "result"
      ],
      "decorators": []
    },
    {
      "name": "_calculate_trend",
      "docstring": "Calculate trend direction from list of values",
      "line_range": [
        334,
        353
      ],
      "parameters": [
        "self",
        "values"
      ],
      "decorators": []
    },
    {
      "name": "get_summary_stats",
      "docstring": "Get summary statistics for monitoring dashboard",
      "line_range": [
        355,
        380
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "ExecutionResult",
      "docstring": "Record of a single task execution for quality intelligence",
      "line_range": [
        20,
        30
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "PerformanceReport",
      "docstring": "Analysis report of model performance trends",
      "line_range": [
        34,
        43
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "RoutingRecommendation",
      "docstring": "Recommendation for improving routing decisions",
      "line_range": [
        47,
        54
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "QualityIntelligence",
      "docstring": "Quality Intelligence System for continuous routing improvement\n\nLightweight implementation focusing on:\n- Execution result tracking\n- Performance trend analysis  \n- Routing improvement recommendations\n- Adaptive threshold management",
      "line_range": [
        57,
        380
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize quality intelligence with data persistence",
          "line_range": [
            68,
            80
          ],
          "parameters": [
            "self",
            "data_dir"
          ]
        },
        {
          "name": "record_execution_result",
          "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
          "line_range": [
            82,
            128
          ],
          "parameters": [
            "self",
            "task_id",
            "routing_decision",
            "quality_result",
            "execution_time",
            "query",
            "task_type",
            "success",
            "user_feedback"
          ]
        },
        {
          "name": "analyze_model_performance_trends",
          "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
          "line_range": [
            130,
            197
          ],
          "parameters": [
            "self",
            "model_choice",
            "task_type",
            "days_back"
          ]
        },
        {
          "name": "suggest_routing_improvements",
          "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
          "line_range": [
            199,
            246
          ],
          "parameters": [
            "self",
            "min_confidence"
          ]
        },
        {
          "name": "update_quality_thresholds",
          "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
          "line_range": [
            248,
            298
          ],
          "parameters": [
            "self",
            "task_type",
            "performance_data"
          ]
        },
        {
          "name": "_load_historical_data",
          "docstring": "Load historical performance data from disk",
          "line_range": [
            300,
            314
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "_persist_result",
          "docstring": "Persist execution result to disk",
          "line_range": [
            316,
            332
          ],
          "parameters": [
            "self",
            "result"
          ]
        },
        {
          "name": "_calculate_trend",
          "docstring": "Calculate trend direction from list of values",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self",
            "values"
          ]
        },
        {
          "name": "get_summary_stats",
          "docstring": "Get summary statistics for monitoring dashboard",
          "line_range": [
            355,
            380
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "Path",
      "deque",
      "defaultdict",
      "self._load_historical_data"
    ],
    "record_execution_result": [
      "ExecutionResult",
      "self._persist_result",
      "datetime.now"
    ],
    "analyze_model_performance_trends": [
      "sum",
      "len",
      "sorted",
      "list",
      "min",
      "PerformanceReport",
      "reports.append",
      "datetime.fromisoformat",
      "self._calculate_trend",
      "timedelta",
      "datetime.now"
    ],
    "suggest_routing_improvements": [
      "sorted",
      "len",
      "recommendations.append",
      "self.analyze_model_performance_trends",
      "RoutingRecommendation",
      "min",
      "task_reports.items",
      "reports.sort",
      "defaultdict"
    ],
    "update_quality_thresholds": [
      "sum",
      "len",
      "min",
      "max"
    ],
    "_load_historical_data": [
      "data_file.exists",
      "open",
      "print",
      "task_data.items",
      "json.load",
      "TaskType",
      "data.get"
    ],
    "_persist_result": [
      "json.dumps",
      "open",
      "asdict",
      "f.write",
      "print",
      "datetime.now"
    ],
    "_calculate_trend": [
      "sum",
      "len",
      "range"
    ],
    "get_summary_stats": [
      "sum",
      "len",
      "datetime.now",
      "defaultdict",
      "dict"
    ]
  },
  "dependencies": [
    "Any",
    "Dict",
    "List",
    "Optional",
    "Path",
    "QualityResult",
    "TaskType",
    "asdict",
    "collections",
    "dataclass",
    "dataclasses",
    "datetime",
    "defaultdict",
    "deque",
    "json",
    "pathlib",
    "quality_validator",
    "task_classifier",
    "timedelta",
    "typing"
  ],
  "hash": "c5c8788dcc50b90151676974f682e30850cb91b3a3941f1a4296497da0c98091",
  "artifact_id": "c8c7366e-ef59-4dca-9f48-efa7835fdc45"
}