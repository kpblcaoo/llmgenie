{
  "module_id": "src.struct_tools.structure_analyzer",
  "path": "src/struct_tools/structure_analyzer.py",
  "category": "core",
  "module_doc": "Структурный анализатор проекта - специализированная тулза для работы со struct.json\nи modular index (.llmstruct_index/)\n\nЦель: Предоставить мощные инструменты для анализа архитектуры проекта,\nпонимания зависимостей, call graphs, и планирования изменений.",
  "functions": [
    {
      "name": "__post_init__",
      "docstring": "",
      "line_range": [
        32,
        36
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "__init__",
      "docstring": "",
      "line_range": [
        42,
        46
      ],
      "parameters": [
        "self",
        "config"
      ],
      "decorators": []
    },
    {
      "name": "generate_structure",
      "docstring": "Генерация struct.json и modular index с помощью llmstruct",
      "line_range": [
        48,
        92
      ],
      "parameters": [
        "self",
        "target_dir",
        "force"
      ],
      "decorators": []
    },
    {
      "name": "load_structure",
      "docstring": "Загрузка struct.json и modular index в память",
      "line_range": [
        94,
        114
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "_load_modular_index",
      "docstring": "Загрузка modular index",
      "line_range": [
        116,
        137
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "get_project_overview",
      "docstring": "Получить обзор проекта",
      "line_range": [
        139,
        156
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "analyze_module_dependencies",
      "docstring": "Анализ зависимостей конкретного модуля",
      "line_range": [
        158,
        193
      ],
      "parameters": [
        "self",
        "module_path"
      ],
      "decorators": []
    },
    {
      "name": "find_function_callers",
      "docstring": "Найти все места вызова функции",
      "line_range": [
        195,
        216
      ],
      "parameters": [
        "self",
        "function_name",
        "module_path"
      ],
      "decorators": []
    },
    {
      "name": "get_module_complexity_metrics",
      "docstring": "Получить метрики сложности модуля",
      "line_range": [
        218,
        254
      ],
      "parameters": [
        "self",
        "module_path"
      ],
      "decorators": []
    },
    {
      "name": "_calculate_complexity_score",
      "docstring": "Простая метрика сложности модуля",
      "line_range": [
        256,
        274
      ],
      "parameters": [
        "self",
        "functions",
        "classes"
      ],
      "decorators": []
    },
    {
      "name": "generate_architecture_report",
      "docstring": "Генерация отчёта об архитектуре проекта",
      "line_range": [
        276,
        337
      ],
      "parameters": [
        "self",
        "output_path"
      ],
      "decorators": []
    },
    {
      "name": "search_functions_by_pattern",
      "docstring": "Поиск функций по паттерну в названии",
      "line_range": [
        339,
        355
      ],
      "parameters": [
        "self",
        "pattern"
      ],
      "decorators": []
    },
    {
      "name": "get_refactoring_impact",
      "docstring": "Анализ влияния изменений в модуле на остальной проект",
      "line_range": [
        357,
        394
      ],
      "parameters": [
        "self",
        "module_path"
      ],
      "decorators": []
    },
    {
      "name": "_assess_refactoring_risk",
      "docstring": "Оценка риска рефакторинга",
      "line_range": [
        396,
        407
      ],
      "parameters": [
        "self",
        "importers_count",
        "called_functions_count"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "StructureConfig",
      "docstring": "Конфигурация для структурного анализа",
      "line_range": [
        19,
        36
      ],
      "methods": [
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            32,
            36
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    },
    {
      "name": "StructureAnalyzer",
      "docstring": "Анализатор структуры проекта на основе struct.json и modular index",
      "line_range": [
        39,
        407
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            46
          ],
          "parameters": [
            "self",
            "config"
          ]
        },
        {
          "name": "generate_structure",
          "docstring": "Генерация struct.json и modular index с помощью llmstruct",
          "line_range": [
            48,
            92
          ],
          "parameters": [
            "self",
            "target_dir",
            "force"
          ]
        },
        {
          "name": "load_structure",
          "docstring": "Загрузка struct.json и modular index в память",
          "line_range": [
            94,
            114
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "_load_modular_index",
          "docstring": "Загрузка modular index",
          "line_range": [
            116,
            137
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "get_project_overview",
          "docstring": "Получить обзор проекта",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "analyze_module_dependencies",
          "docstring": "Анализ зависимостей конкретного модуля",
          "line_range": [
            158,
            193
          ],
          "parameters": [
            "self",
            "module_path"
          ]
        },
        {
          "name": "find_function_callers",
          "docstring": "Найти все места вызова функции",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "function_name",
            "module_path"
          ]
        },
        {
          "name": "get_module_complexity_metrics",
          "docstring": "Получить метрики сложности модуля",
          "line_range": [
            218,
            254
          ],
          "parameters": [
            "self",
            "module_path"
          ]
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Простая метрика сложности модуля",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self",
            "functions",
            "classes"
          ]
        },
        {
          "name": "generate_architecture_report",
          "docstring": "Генерация отчёта об архитектуре проекта",
          "line_range": [
            276,
            337
          ],
          "parameters": [
            "self",
            "output_path"
          ]
        },
        {
          "name": "search_functions_by_pattern",
          "docstring": "Поиск функций по паттерну в названии",
          "line_range": [
            339,
            355
          ],
          "parameters": [
            "self",
            "pattern"
          ]
        },
        {
          "name": "get_refactoring_impact",
          "docstring": "Анализ влияния изменений в модуле на остальной проект",
          "line_range": [
            357,
            394
          ],
          "parameters": [
            "self",
            "module_path"
          ]
        },
        {
          "name": "_assess_refactoring_risk",
          "docstring": "Оценка риска рефакторинга",
          "line_range": [
            396,
            407
          ],
          "parameters": [
            "self",
            "importers_count",
            "called_functions_count"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__post_init__": [],
    "__init__": [
      "StructureConfig",
      "logging.getLogger"
    ],
    "generate_structure": [
      "str",
      "subprocess.run",
      "datetime.now",
      "cmd.extend"
    ],
    "load_structure": [
      "self._load_modular_index",
      "open",
      "len",
      "json.load"
    ],
    "_load_modular_index": [
      "str",
      "len",
      "list",
      "open",
      "module_data.get",
      "json.load"
    ],
    "get_project_overview": [
      "sum",
      "len",
      "mod.get"
    ],
    "analyze_module_dependencies": [
      "f.get",
      "len",
      "target_module.get",
      "c.get",
      "module.get"
    ],
    "find_function_callers": [
      "callers.append",
      "edge.get",
      "call_graph.get",
      "target.get"
    ],
    "get_module_complexity_metrics": [
      "sum",
      "len",
      "function_lines.append",
      "module_data.get",
      "max",
      "self._calculate_complexity_score",
      "class_lines.append"
    ],
    "_calculate_complexity_score": [
      "round",
      "len",
      "func.get",
      "cls.get"
    ],
    "generate_architecture_report": [
      "self.get_project_overview",
      "report_lines.extend",
      "open",
      "f.write",
      "enumerate",
      "complexity_analysis.sort",
      "self.get_module_complexity_metrics",
      "datetime.now",
      "complexity_analysis.append"
    ],
    "search_functions_by_pattern": [
      "module.get",
      "pattern.lower",
      "results.append",
      "function.get"
    ],
    "get_refactoring_impact": [
      "len",
      "edge.get",
      "self._assess_refactoring_risk",
      "call_graph.get",
      "source.get",
      "import_item.get",
      "module.get",
      "importers.append",
      "target.get",
      "called_functions.append"
    ],
    "_assess_refactoring_risk": []
  },
  "dependencies": [
    "Any",
    "Dict",
    "List",
    "Optional",
    "Path",
    "Tuple",
    "dataclass",
    "dataclasses",
    "datetime",
    "json",
    "logging",
    "pathlib",
    "subprocess",
    "typing"
  ],
  "hash": "3b33899511ecb08c4d0c0f2400c74c15e97b81ba1866741ad68bf7f2c680d9d9",
  "artifact_id": "82c434d7-72ff-4650-a1ed-5ed8eeb736f5"
}