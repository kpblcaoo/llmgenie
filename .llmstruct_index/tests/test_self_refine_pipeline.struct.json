{
  "module_id": "tests.test_self_refine_pipeline",
  "path": "tests/test_self_refine_pipeline.py",
  "category": "test",
  "module_doc": "Tests for Self-Refine Pipeline System\nComprehensive testing of MCP-enhanced iterative improvement",
  "functions": [
    {
      "name": "pipeline",
      "docstring": "Create a test pipeline instance",
      "line_range": [
        24,
        26
      ],
      "parameters": [
        "self"
      ],
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "name": "sample_code",
      "docstring": "Sample code for testing",
      "line_range": [
        29,
        40
      ],
      "parameters": [
        "self"
      ],
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "name": "sample_text",
      "docstring": "Sample text for testing",
      "line_range": [
        43,
        45
      ],
      "parameters": [
        "self"
      ],
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "name": "test_pipeline_initialization",
      "docstring": "Test pipeline initialization",
      "line_range": [
        47,
        51
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_refine_code",
      "docstring": "Test code refinement",
      "line_range": [
        53,
        61
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_refine_text",
      "docstring": "Test text refinement",
      "line_range": [
        63,
        69
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_text"
      ],
      "decorators": []
    },
    {
      "name": "test_confidence_threshold_reached",
      "docstring": "Test that refinement stops when confidence threshold is reached",
      "line_range": [
        72,
        82
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_max_iterations_limit",
      "docstring": "Test that refinement respects max iterations limit",
      "line_range": [
        84,
        93
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_mcp_tools_integration",
      "docstring": "Test MCP tools integration in refinement process",
      "line_range": [
        95,
        104
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_refine_code_file",
      "docstring": "Test refinement of entire code file",
      "line_range": [
        106,
        128
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_refinement_report_generation",
      "docstring": "Test refinement report generation",
      "line_range": [
        130,
        148
      ],
      "parameters": [
        "self",
        "pipeline",
        "sample_code"
      ],
      "decorators": []
    },
    {
      "name": "test_quick_refine_functions",
      "docstring": "Test convenience quick refine functions",
      "line_range": [
        150,
        159
      ],
      "parameters": [
        "self",
        "sample_code",
        "sample_text"
      ],
      "decorators": []
    },
    {
      "name": "test_enhancement_context_building",
      "docstring": "Test context enhancement with MCP tools",
      "line_range": [
        161,
        171
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_critique_generation",
      "docstring": "Test critique generation with MCP integration",
      "line_range": [
        173,
        186
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_validation_logic",
      "docstring": "Test improvement validation logic",
      "line_range": [
        188,
        203
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_error_handling_file_not_found",
      "docstring": "Test error handling for non-existent files",
      "line_range": [
        205,
        208
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_empty_results_report",
      "docstring": "Test report generation with empty results",
      "line_range": [
        210,
        214
      ],
      "parameters": [
        "self",
        "pipeline"
      ],
      "decorators": []
    },
    {
      "name": "test_auto_logging_integration",
      "docstring": "Test integration with auto-logging system",
      "line_range": [
        218,
        231
      ],
      "parameters": [
        "self",
        "mock_auto_logger",
        "pipeline",
        "sample_code"
      ],
      "decorators": [
        "patch('src.rag_context.interfaces.self_refine_pipeline.AUTO_LOGGING_AVAILABLE', True)",
        "patch('src.rag_context.interfaces.self_refine_pipeline.auto_logger')"
      ]
    },
    {
      "name": "test_all_refinement_types",
      "docstring": "Test that all refinement types are properly defined",
      "line_range": [
        237,
        243
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "test_refinement_result_creation",
      "docstring": "Test RefinementResult creation and attributes",
      "line_range": [
        249,
        269
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "TestSelfRefinePipeline",
      "docstring": "Test suite for Self-Refine Pipeline",
      "line_range": [
        20,
        231
      ],
      "methods": [
        {
          "name": "pipeline",
          "docstring": "Create a test pipeline instance",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "sample_code",
          "docstring": "Sample code for testing",
          "line_range": [
            29,
            40
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "sample_text",
          "docstring": "Sample text for testing",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "test_pipeline_initialization",
          "docstring": "Test pipeline initialization",
          "line_range": [
            47,
            51
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_refine_code",
          "docstring": "Test code refinement",
          "line_range": [
            53,
            61
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_refine_text",
          "docstring": "Test text refinement",
          "line_range": [
            63,
            69
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_text"
          ]
        },
        {
          "name": "test_confidence_threshold_reached",
          "docstring": "Test that refinement stops when confidence threshold is reached",
          "line_range": [
            72,
            82
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_max_iterations_limit",
          "docstring": "Test that refinement respects max iterations limit",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_mcp_tools_integration",
          "docstring": "Test MCP tools integration in refinement process",
          "line_range": [
            95,
            104
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_refine_code_file",
          "docstring": "Test refinement of entire code file",
          "line_range": [
            106,
            128
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_refinement_report_generation",
          "docstring": "Test refinement report generation",
          "line_range": [
            130,
            148
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ]
        },
        {
          "name": "test_quick_refine_functions",
          "docstring": "Test convenience quick refine functions",
          "line_range": [
            150,
            159
          ],
          "parameters": [
            "self",
            "sample_code",
            "sample_text"
          ]
        },
        {
          "name": "test_enhancement_context_building",
          "docstring": "Test context enhancement with MCP tools",
          "line_range": [
            161,
            171
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_critique_generation",
          "docstring": "Test critique generation with MCP integration",
          "line_range": [
            173,
            186
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_validation_logic",
          "docstring": "Test improvement validation logic",
          "line_range": [
            188,
            203
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_error_handling_file_not_found",
          "docstring": "Test error handling for non-existent files",
          "line_range": [
            205,
            208
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_empty_results_report",
          "docstring": "Test report generation with empty results",
          "line_range": [
            210,
            214
          ],
          "parameters": [
            "self",
            "pipeline"
          ]
        },
        {
          "name": "test_auto_logging_integration",
          "docstring": "Test integration with auto-logging system",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "mock_auto_logger",
            "pipeline",
            "sample_code"
          ]
        }
      ],
      "bases": []
    },
    {
      "name": "TestRefinementTypes",
      "docstring": "Test different refinement types",
      "line_range": [
        234,
        243
      ],
      "methods": [
        {
          "name": "test_all_refinement_types",
          "docstring": "Test that all refinement types are properly defined",
          "line_range": [
            237,
            243
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    },
    {
      "name": "TestRefinementResult",
      "docstring": "Test RefinementResult dataclass",
      "line_range": [
        246,
        269
      ],
      "methods": [
        {
          "name": "test_refinement_result_creation",
          "docstring": "Test RefinementResult creation and attributes",
          "line_range": [
            249,
            269
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "pipeline": [
      "SelfRefinePipeline"
    ],
    "sample_code": [],
    "sample_text": [],
    "test_pipeline_initialization": [
      "isinstance"
    ],
    "test_refine_code": [
      "pipeline.refine",
      "isinstance",
      "len",
      "all"
    ],
    "test_refine_text": [
      "pipeline.refine",
      "len"
    ],
    "test_confidence_threshold_reached": [
      "pipeline.refine",
      "patch.object",
      "len"
    ],
    "test_max_iterations_limit": [
      "pipeline.refine",
      "patch.object",
      "len"
    ],
    "test_mcp_tools_integration": [
      "pipeline.refine",
      "isinstance",
      "len"
    ],
    "test_refine_code_file": [
      "backup_file.unlink",
      "str",
      "temp_file.with_suffix",
      "temp_file.unlink",
      "tempfile.NamedTemporaryFile",
      "backup_file.exists",
      "len",
      "backup_file.read_text",
      "f.write",
      "temp_file.read_text",
      "Path",
      "pipeline.refine_code_file"
    ],
    "test_refinement_report_generation": [
      "pipeline.refine",
      "pipeline.generate_refinement_report",
      "len"
    ],
    "test_quick_refine_functions": [
      "isinstance",
      "quick_refine_code",
      "quick_refine_text",
      "len"
    ],
    "test_enhancement_context_building": [
      "pipeline._enhance_context",
      "len"
    ],
    "test_critique_generation": [
      "isinstance",
      "pipeline._critique_with_mcp",
      "len"
    ],
    "test_validation_logic": [
      "pipeline._validate_improvements"
    ],
    "test_error_handling_file_not_found": [
      "pytest.raises",
      "pipeline.refine_code_file"
    ],
    "test_empty_results_report": [
      "pipeline.generate_refinement_report"
    ],
    "test_auto_logging_integration": [
      "pipeline.refine",
      "patch",
      "len"
    ],
    "test_all_refinement_types": [],
    "test_refinement_result_creation": [
      "RefinementResult"
    ]
  },
  "dependencies": [
    "Mock",
    "Path",
    "RefinementResult",
    "RefinementType",
    "SelfRefinePipeline",
    "patch",
    "pathlib",
    "pytest",
    "quick_refine_code",
    "quick_refine_text",
    "src.rag_context.interfaces.self_refine_pipeline",
    "tempfile",
    "unittest.mock"
  ],
  "hash": "05a17d4148ab1b8353ab668170382fc22d156d6746c10cd6bb09241703f4f0c8",
  "artifact_id": "cc9d89b3-b99a-4625-a876-f3e1b89115b1"
}