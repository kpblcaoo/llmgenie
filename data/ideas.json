{
  "version": "1.0.0",
  "updated": "2025-05-26T00:50:00Z",
  "ideas": [
    {
      "id": "IDEA-001",
      "title": "Единый стандарт архивирования project data JSON",
      "description": "Ввести обязательное архивирование всех project data JSON-файлов перед изменениями, с хранением в отдельной папке и автоматизацией через CLI/бота.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["archive", "workflow", "data_safety", "llm_context"],
      "created": "2025-05-26T00:00:00Z"
    },
    {
      "id": "IDEA-002",
      "title": "Метки и служебные поля для LLM-оркестрации и фокуса",
      "description": "Добавить массив tags и, при необходимости, служебные поля (например, llm_context) во все project data JSON для поддержки фильтрации, автоматизации и удержания контекста LLM.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["tags", "llm_context", "workflow", "meta"],
      "created": "2025-05-26T00:00:00Z"
    },
    {
      "id": "IDEA-003",
      "title": "Lessons learned и автоматизация ретроспективы",
      "description": "Автоматически добавлять инсайты и lessons learned по workflow/ошибкам в insights.json и использовать их для улучшения процессов.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["lessons_learned", "automation", "workflow", "retrospective"],
      "created": "2025-05-26T00:00:00Z"
    },
    {
      "id": "IDEA-004",
      "title": "Документирование ключевых меток и workflow",
      "description": "Создать справочник по используемым tags/labels для project data JSON и описать best practices в README или отдельном файле.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["tags", "documentation", "workflow", "best_practices"],
      "created": "2025-05-26T00:00:00Z"
    },
    {
      "id": "IDEA-005",
      "title": "Справочник по меткам (tags_reference.json) и best practices использования",
      "description": "Создать отдельный файл tags_reference.json с описанием ключевых меток, их назначения и best practices для фильтрации, автоматизации и LLM-оркестрации.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["tags", "documentation", "workflow", "best_practices"],
      "created": "2025-05-26T00:25:00Z"
    },
    {
      "id": "IDEA-006",
      "title": "Централизованный статус project data для масштабирования и интеграции",
      "description": "Рассмотреть внедрение централизованного хранения статусов задач, идей, инсайтов и PR для интеграции с Kanban, API и CLI-дашбордами.",
      "epic": "meta_workflow_management",
      "status": "proposed",
      "tags": ["status", "refactor", "workflow", "automation"],
      "created": "2025-05-26T00:25:00Z"
    },
    {
      "id": "IDEA-007",
      "title": "Коллекция промтов для LLM-оркестрации и автоматизации project data",
      "description": "Собрать и структурировать эффективные промты для LLM, которые ускоряют работу с задачами, идеями, инсайтами и PR, а также автоматизируют типовые workflow.",
      "epic": "meta_workflow_management",
      "status": "implemented",
      "tags": ["prompts", "llm", "workflow", "automation", "best_practices"],
      "created": "2025-05-26T00:25:00Z"
    },
    {
      "id": "IDEA-008",
      "title": "Предобработка пользовательских запросов через grok (браузерный парсер)",
      "description": "Рассмотреть внедрение grok для структурирования и предобработки пользовательских запросов перед отправкой в LLM. Оценить влияние на качество интерпретации и workflow.",
      "epic": "logging_transparency_audit",
      "status": "future",
      "tags": ["grok", "preprocessing", "workflow", "ai"],
      "created": "2025-05-27T00:10:00Z"
    },
    {
      "id": "IDEA-009",
      "title": "Интеграция Ollama для гибридного AI-оркестратора",
      "description": "Рассмотреть возможность интеграции Ollama для локального inference и гибридной AI-оркестрации. Оценить плюсы/минусы, сценарии использования и влияние на workflow.",
      "epic": "logging_transparency_audit",
      "status": "future",
      "tags": ["ollama", "ai", "integration", "workflow"],
      "created": "2025-05-27T00:10:00Z"
    },
    {
      "id": "IDEA-011",
      "title": "Масштабируемая структура хранения логов с каталогами и файлами-ссылками",
      "description": "Реализовать для каждого эпика отдельную папку с event_log, tech_log и подкаталогом context для хранения больших reasoning, diff, input_context. В логах хранить только ссылки на файлы.",
      "epic": "logging_transparency_audit",
      "status": "planned",
      "tags": ["logging", "scaling", "workflow", "architecture"],
      "created": "2025-05-27T00:30:00Z"
    },
    {
      "id": "IDEA-013",
      "title": "Автоматизация выявления инсайтов и lessons learned по логам",
      "description": "Реализовать скрипт/функцию для поиска аномалий, ошибок, повторяющихся паттернов в логах и автоматического предложения инсайтов для insights.json.",
      "epic": "logging_transparency_audit",
      "status": "planned",
      "priority": "medium",
      "tags": ["logging", "insights", "automation", "workflow"],
      "created": "2025-05-27T13:30:00Z"
    },
    {
      "id": "IDEA-014",
      "title": "Автоматизация ретроспективы и summary по эпику на основе логов",
      "description": "Генерировать summary по эпику на основе event_log/tech_log: ключевые события, ошибки, выводы, рекомендации.",
      "epic": "logging_transparency_audit",
      "status": "planned",
      "priority": "medium",
      "tags": ["logging", "retrospective", "automation", "workflow"],
      "created": "2025-05-27T13:30:00Z"
    },
    {
      "id": "IDEA-015",
      "title": "Расширенная агрегация событий в логах (по author, дате, epic)",
      "description": "Добавить в CLI log_viewer.py возможность агрегации по другим полям: author, date, epic, а также группировку по дням/неделям.",
      "epic": "logging_transparency_audit",
      "status": "future",
      "priority": "low",
      "tags": ["logging", "aggregation", "cli", "workflow"],
      "created": "2025-05-27T13:30:00Z"
    },
    {
      "id": "IDEA-016",
      "title": "Интеграция логирования с внутренними инструментами (автообновление статусов)",
      "description": "Автоматически обновлять статусы задач/идей на основе событий в логах (например, завершение задачи при фиксации определённого события).",
      "epic": "logging_transparency_audit",
      "status": "future",
      "priority": "low",
      "tags": ["logging", "integration", "automation", "workflow"],
      "created": "2025-05-27T13:30:00Z"
    },
    {
      "id": "IDEA-017",
      "title": "Стандартизация процесса завершения эпика и обновление мета-процесса",
      "description": "Внедрить стандарт: финальный коммит, summary, анализ процесса, предложения по улучшениям, оформление PR, отдельная ветка на эпик, гарантия лог+действие, отдельный лог и архивация на эпик. Обновить prompts_collection.json, onboarding, документацию. Зафиксировать best practices для AI и команды.",
      "epic": "meta_epic_process_improvement",
      "status": "in_progress",
      "priority": "high",
      "tags": ["meta", "workflow", "standards", "prompts", "documentation", "logging"],
      "created": "2025-05-27T14:05:00Z"
    },
    {
      "id": "IDEA-2024-06-10-01",
      "title": "Раздел про режимы работы и best practices в roadmap",
      "description": "Добавить раздел про режимы работы ([discuss], [meta], [code], [debug]) в roadmap и best practices. Описать сценарии использования режимов для разных этапов работы и автоматизации.",
      "epic": "epic_modes_and_workflow",
      "status": "draft",
      "tags": ["workflow", "modes", "roadmap"],
      "created": "2024-06-10T00:00:00Z",
      "related_insights": ["INS-2024-06-10-01"]
    },
    {
      "id": "EPIC-2024-06-llmstruct-split",
      "title": "Разделение проекта на llmstruct (ядро) и llmgenie (оркестратор)",
      "description": "Стратегическое разделение проекта на два самостоятельных репозитория: llmstruct (open-source парсер/анализатор) и llmgenie (оркестратор/workflow/интеграции). Цели: повысить модульность, упростить поддержку, стандартизировать интеграцию.",
      "epic": "epic_project_split_2024",
      "status": "draft",
      "tags": ["split", "architecture", "modularity", "llmstruct", "llmgenie"],
      "created": "2024-06-11T00:00:00Z"
    },
    {
      "id": "IDEA-2024-06-11-01",
      "title": "Стандартизировать CLI/API-интерфейс для интеграции llmstruct и llmgenie",
      "description": "Определить и реализовать стандартные команды и API для seamless integration between llmstruct and llmgenie, чтобы обеспечить простоту использования и обновления.",
      "epic": "epic_project_split_2024",
      "status": "draft",
      "tags": ["cli", "api", "integration", "llmstruct", "llmgenie"],
      "created": "2024-06-11T00:00:00Z"
    },
    {
      "id": "IDEA-2024-06-11-02",
      "title": "Структурировать документацию в виде дерева с референсами и best practices",
      "description": "Создать для llmstruct и llmgenie отдельные деревья документации (md/html), с референсами на ключевые понятия, best practices и примеры интеграции.",
      "epic": "epic_project_split_2024",
      "status": "draft",
      "tags": ["docs", "best_practices", "structure", "llmstruct", "llmgenie"],
      "created": "2024-06-11T00:00:00Z"
    },
    {
      "id": "IDEA-2024-06-11-03",
      "title": "Вынести ассистентский workflow в отдельный ai_workflow.json с ролями и версионированием",
      "description": "Создать отдельный файл ai_workflow.json, где будут описаны все этапы ассистентского workflow, поддержка версионирования, роли (developer, librarian, llm_engineer и др.), чек-листы для каждого этапа. Для developer-ролей добавить напоминания о возможностях llmstruct и его парсинга/JSON-выводе. В будущем — интеграция с CLI и docs.json, поддержка динамического переключения ролей.",
      "epic": "epic_project_split_2024",
      "status": "draft",
      "tags": ["workflow", "ai", "roles", "llmstruct", "developer", "cli", "docs", "idea"],
      "created": "2024-06-11T01:30:00Z"
    },
    {
      "id": "EPIC-2024-06-ai-workflow-rules",
      "title": "Внедрение архитектуры AI workflow и системы правил в llmstruct",
      "description": "Реализация архитектуры управления правилами и workflow для AI и человека: настройка .cursorrules, .cursor/rules/, ai_workflow.json, интеграция с документацией и логами, минимизация деградации контекста.",
      "epic": "epic_ai_workflow_rules_2024",
      "status": "draft",
      "tags": ["workflow", "rules", "architecture", "ai", "llmstruct", "cursor"],
      "created": "2024-06-11T02:00:00Z"
    },
    {
      "id": "IDEA-2024-06-12-001",
      "epic": "epic_ai_planning_mode_2024",
      "title": "AI Planning Mode & Context Aggregation",
      "description": "Внедрить и протестировать механизм сбора и выдачи агрегированного summary/контекста (статусы, связи, lessons learned, roadmap) для режима планирования и передачи LLM только релевантной информации. Цель — повысить эффективность планирования, снизить перегрузку контекста и ускорить старт новых эпиков.",
      "tags": ["planning", "context", "llm", "workflow", "summary"],
      "related_tasks": [],
      "related_ideas": [],
      "related_insights": [],
      "related_prs": [],
      "date": "2024-06-12"
    },
    {
      "id": "EPIC-2024-06-session-control",
      "title": "Универсальный сессионный контроль и тотальное логирование",
      "description": "Внедрение сессионного контроля и тотального логирования для всех рабочих ситуаций (эпики, планирование, обсуждение, debug, тесты и др.): отдельные event_log, tech_log, meta-log для каждой сессии, автоматизация создания и переключения, AI-рекомендации по смене типа сессии, фиксация workflow improvements.",
      "epic": "epic_session_control_2024",
      "status": "planned",
      "tags": ["session_control", "logging", "workflow", "automation", "ai"],
      "created": "2024-06-12T00:00:00Z",
      "related_tasks": [],
      "related_ideas": [],
      "related_insights": ["INS-2024-06-12-02"],
      "memo": "docs/internal/memos/session_control_epic_memo.md"
    },
    {
      "id": "IDEA-2024-06-12-MANIFEST",
      "epic": "epic_manifest_and_data_structure_2024",
      "title": "Внедрение manifest-файла и стандартизация структуры project data",
      "description": "Разработать и внедрить manifest-файл (data/project_manifest.json) с перечнем всех актуальных project data JSON-файлов, их типами, статусом и путями. Обновить ai_workflow.json, .cursor/rules/ и документацию. Ввести стандарты именования и хранения, интегрировать manifest в автоматизации AI.",
      "tags": ["manifest", "workflow", "ai", "data_structure", "standardization"],
      "date": "2024-06-12"
    },
    {
      "id": "IDEA-2024-06-12-PROMPT-VALIDATOR",
      "epic": "epic_manifest_and_data_structure_2024",
      "title": "CLI validator for prompts_collection.json and attention_marker/llm_context",
      "description": "Develop a CLI tool to validate the structure and completeness of prompts_collection.json and attention_marker/llm_context fields in project data. Automate manifest/prompts updates and provide user feedback.",
      "tags": ["cli", "validator", "prompts", "manifest", "automation", "ai"],
      "date": "2024-06-12"
    },
    {
      "id": "IDEA-2024-06-12-RELATED-FILES",
      "epic": "epic_manifest_and_data_structure_2024",
      "title": "Standardize cross-references (related_files/references) between project data JSON files",
      "description": "Add and enforce related_files/references fields in all project data JSON files (ideas, tasks, prompts, manifest, etc.) to explicitly document and automate their relationships. Update documentation and manifest accordingly.",
      "tags": ["manifest", "references", "related_files", "automation", "ai", "data_structure"],
      "date": "2024-06-12"
    },
    {
      "id": "IDEA-2024-06-12-ENFORCEMENT-SELFHEALING",
      "epic": "epic_workflow_enforcement_2024",
      "title": "Workflow Enforcement & Self-Healing: автоматизация соблюдения правил, логирования и восстановления контекста",
      "description": "Гарантировать enforce всех ключевых правил (.cursorrules, .cursor/rules, branch policy, best practices) на уровнях AI, CLI, IDE, CI/CD. Автоматизировать логирование всех действий и mode switches. Встроить механизмы самовосстановления контекста (attention_marker, llm_context, meta-log). Минимизировать человеческий фактор и потери истории.",
      "tags": ["enforcement", "self_healing", "workflow", "automation", "ai", "best_practices"],
      "date": "2024-06-12"
    },
    {
      "id": "IDEA-2024-06-13-01",
      "title": "Автоматизация активации правил из .cursor/rules/ по сценарию/режиму",
      "description": "Реализовать функцию/CLI-команду для активации нужного набора правил из .cursor/rules/ в зависимости от режима (discuss, meta, code, debug и др.). Разделить правила на 'жёсткие' (branch policy, session management, logging, workflow-modes) и ситуативные (enforcement, ai-capabilities, project_scope). Описать сценарии активации и обновить onboarding.",
      "epic": "meta_workflow_management",
      "status": "proposed",
      "tags": ["rules", "automation", "cli", "workflow", "meta", "onboarding"],
      "created": "2024-06-13"
    },
    {
      "id": "IDEA-2024-06-13-02",
      "title": "Интеграция workspace_state.json для восстановления и переключения контекста",
      "description": "Проанализировать содержимое workspace_state.json, выделить полезные шаблоны/мета-данные, интегрировать в мета-оркестрацию для восстановления и переключения контекста между задачами/режимами.",
      "epic": "meta_workflow_management",
      "status": "proposed",
      "tags": ["workspace_state", "context", "meta", "workflow", "automation"],
      "created": "2024-06-13"
    },
    {
      "id": "IDEA-2024-06-13-03",
      "title": "User-onboarding и документация для CLI llmgenie",
      "description": "Создать отдельный onboarding и краткое руководство для CLI llmgenie: что реально работает, что требует llmstruct, как запускать, как переключать режимы. Обновить документацию и добавить примеры CLI-команд.",
      "epic": "meta_workflow_management",
      "status": "proposed",
      "tags": ["cli", "onboarding", "documentation", "llmgenie", "workflow"],
      "created": "2024-06-13"
    },
    {
      "id": "IDEA-2025-06-04-ENFORCE-ENGLISH-RULES",
      "title": "Проверка языка и структуры .cursor/rules после эпика",
      "description": "После завершения текущего эпика проверить, что все правила в .cursor/rules/ написаны на английском (если предназначены для AI/LLM), структура и ссылки соответствуют best practices, всё работает корректно.",
      "status": "backlog",
      "tags": ["enforcement", "best practices", "language", "cursor rules"]
    },
    {
      "id": "IDEA-2025-06-04-AUTO-RULES-CLI",
      "title": "AI/CLI-утилита для автоматизации и ревизии системы правил",
      "description": "Реализовать AI/CLI-утилиту для автоматизации генерации, валидации и ревизии правил (.cursor/rules), автоматических отчётов о покрытии, конфликтах, рекомендаций по доработке. Все действия фиксируются в логах.",
      "status": "backlog",
      "tags": ["automation", "cli", "ai", "rules", "validation", "logging"]
    },
    {
      "id": "EPIC-2025-06-knowledge-base-integrations",
      "title": "Knowledge base & integrations: базы знаний, best practices, интеграции, автоматизация ревизии",
      "description": "Вести базы знаний по работе с основными моделями (OpenAI, Ollama, Claude и др.), средами (Cursor, VSCode+Continue, Copilot), интеграциями, best practices, внедрённые решения, нюансы agent requested, workflow, ревизии, автоматизации. Для каждой записи — временная метка, источник, примеры, TODO по обновлению, связь с ролями. Интеграция с планированием, ревизией, AI-ассистентом. Использовать для ускорения работы, передачи знаний, автоматизации ревизии и планирования. Всё найденное и обсуждённое ранее — часть этой базы.",
      "status": "backlog",
      "tags": ["knowledge", "integrations", "best practices", "workflow", "roles", "automation", "planning", "ai_assistant"],
      "created": "2025-06-04"
    },
    {
      "id": "IDEA-2024-06-knowledge-base",
      "title": "База знаний по средам и моделям + роль knowledge-engineer",
      "description": "Создать структуру docs/knowledge (md для пользователя) и data/knowledge (json для AI) с базой знаний по основным средам (Cursor, VSCode, Copilot, Ollama, API моделей) и моделям (gpt-4, llama3, mixtral и др.). Ввести роль knowledge-engineer для пополнения и ревизии базы знаний, автоматизации поиска и принятия знаний от пользователя. Описать workflow для пополнения базы знаний и интеграции с правилами.",
      "epic": "meta_knowledge_management",
      "status": "draft",
      "tags": ["knowledge_base", "workflow", "roles", "automation", "llmstruct", "llmgenie", "cursor", "vscode", "copilot", "ollama", "api_models"],
      "created": "2024-06-12T00:00:00Z"
    }
  ]
}