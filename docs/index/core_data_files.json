{
  "title": "Core Project Data Files (data/)",
  "description": "Analysis of central JSON files containing project data such as tasks, ideas, and workflow configurations.",
  "docs": [
    {
      "path": "data/tasks.json",
      "title": "Project Tasks List",
      "description": "Comprehensive list of all project tasks, including their ID, title, description, epic, status, priority, tags, creation/update dates, and related metadata.",
      "status": "Analyzed",
      "summary_ai": "A central registry of all project tasks, reflecting its evolution, priorities, and focus areas. Tasks are highly structured with fields for ID, title, description, epic, status, priority, tags, dates, and various related metadata. It includes tasks across multiple epics covering data management, project splitting (llmstruct/llmgenie), AI integration, automation, analysis of architectural patterns from archives (Boss CLI, Smart Wrapper, Master Planning), intelligent cleanup systems, AI model evaluation, and critical error fixes. This file is crucial for project planning and documentation."
    },
    {
      "path": "data/project_manifest.json",
      "title": "Project Manifest",
      "description": "Central manifest defining project structure, epic and session formats, workflow, and key management aspects.",
      "status": "Analyzed",
      "summary_ai": "This file is the central manifest of the project, defining standardized structures for epics (fields, planned sessions, naming conventions for sessions/branches). It outlines the project workflow (session start/end), identifies critical and parallelizable epic paths, specifies GitHub integration (epic issues source, sync script), and provides high-level project statistics (total epics, planned sessions, estimated duration). It also links to the model evaluation framework, current tasks, insights, supported models, and evaluation criteria. Essential for project meta-management and workflow standardization."
    },
    {
      "file": "data/projects.json",
      "summary_status": "completed",
      "content": "The `data/projects.json` file provides a concise registry of core projects within the `llmgenie` ecosystem. It lists `llmstruct` (described as an infrastructure library for LLM-based projects) and `llmgenie` (described as an AI assistant and workflow orchestrator). Each entry includes an ID, name, owner, type (e.g., `core`, `assistant`), license, and a brief description, offering a high-level overview of the project's ecosystem components."
    },
    {
      "file": "data/ai_workflow.json",
      "summary_status": "completed",
      "content": "The `ai_workflow.json` file is central to defining the AI's operational workflow. It outlines various AI roles (developer, librarian, LLM engineer), best practices for project data storage, and detailed stages for epic management (start, work, finish, pause/restore, handoff validation). The file also specifies logging best practices for `event_log`, `tech_log`, and `meta_log`, context restoration steps, retrospective processes, and a collection of predefined prompts for AI automation. It includes references to key documentation and defines session control rules. Furthermore, it describes the roles of `project_manifest.json` as the central data manifest and `prompts_collection.json` for AI/LLM prompts, ensuring structured and reproducible AI behavior within the project."
    },
    {
      "file": "data/ideas.json",
      "summary_status": "completed",
      "content": "The `data/ideas.json` file serves as a central registry for all project ideas, suggestions, and hypotheses. Each idea includes a unique ID, title, detailed description, associated epic, current status (e.g., `implemented`, `proposed`, `future`, `planned`, `in_progress`, `draft`), a set of tags for categorization, and a creation timestamp. Many ideas focus on enhancing AI workflow, standardizing logging, optimizing documentation, and strategically splitting the project into `llmstruct` and `llmgenie`. This file is crucial for innovation management and future development planning."
    },
    {
      "file": "data/user_memory.json",
      "summary_status": "completed",
      "content": "The `data/user_memory.json` file is designed to store user interaction history, indexed by session or user ID. Each entry includes the username, message text, timestamp, and message type (`user_message`). Based on its current content, it appears to be used for storing conversation context or for testing interaction scenarios."
    }
  ]
} 