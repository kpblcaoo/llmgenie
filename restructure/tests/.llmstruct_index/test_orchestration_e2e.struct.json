{
  "module_id": "test_orchestration_e2e",
  "path": "test_orchestration_e2e.py",
  "category": "test",
  "module_doc": "End-to-End tests for Multi-Agent Orchestration\n\nEpic 5 Phase 3.2: Complete workflow testing from query to result",
  "functions": [
    {
      "name": "realistic_agent_setup",
      "docstring": "Setup realistic agent configuration simulating production environment",
      "line_range": [
        19,
        80
      ],
      "parameters": [
        "self"
      ],
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "name": "production_orchestrator",
      "docstring": "Create orchestrator with realistic production setup",
      "line_range": [
        83,
        92
      ],
      "parameters": [
        "self",
        "realistic_agent_setup"
      ],
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "name": "test_code_development_workflow_sequential",
      "docstring": "Test complete code development workflow using sequential execution",
      "line_range": [
        95,
        143
      ],
      "parameters": [
        "self",
        "production_orchestrator",
        "realistic_agent_setup"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "test_research_analysis_workflow_parallel",
      "docstring": "Test research and analysis workflow using parallel execution",
      "line_range": [
        146,
        191
      ],
      "parameters": [
        "self",
        "production_orchestrator"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "test_creative_collaboration_workflow",
      "docstring": "Test creative writing workflow using collaborative execution",
      "line_range": [
        194,
        258
      ],
      "parameters": [
        "self",
        "production_orchestrator"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "test_auto_mode_selection_intelligence",
      "docstring": "Test intelligent automatic mode selection based on query analysis",
      "line_range": [
        261,
        305
      ],
      "parameters": [
        "self",
        "production_orchestrator"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "test_complex_real_world_scenario",
      "docstring": "Test complex real-world scenario combining multiple orchestration features",
      "line_range": [
        308,
        369
      ],
      "parameters": [
        "self",
        "production_orchestrator"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "test_error_recovery_and_resilience_e2e",
      "docstring": "Test end-to-end error recovery and system resilience",
      "line_range": [
        372,
        400
      ],
      "parameters": [
        "self",
        "production_orchestrator",
        "realistic_agent_setup"
      ],
      "decorators": [
        "pytest.mark.asyncio"
      ]
    },
    {
      "name": "create_specialized_router",
      "docstring": "",
      "line_range": [
        21,
        74
      ],
      "parameters": [
        "model_name",
        "specialization"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "TestOrchestrationE2E",
      "docstring": "End-to-end orchestration workflow tests",
      "line_range": [
        15,
        400
      ],
      "methods": [
        {
          "name": "realistic_agent_setup",
          "docstring": "Setup realistic agent configuration simulating production environment",
          "line_range": [
            19,
            80
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "production_orchestrator",
          "docstring": "Create orchestrator with realistic production setup",
          "line_range": [
            83,
            92
          ],
          "parameters": [
            "self",
            "realistic_agent_setup"
          ]
        },
        {
          "name": "test_code_development_workflow_sequential",
          "docstring": "Test complete code development workflow using sequential execution",
          "line_range": [
            95,
            143
          ],
          "parameters": [
            "self",
            "production_orchestrator",
            "realistic_agent_setup"
          ]
        },
        {
          "name": "test_research_analysis_workflow_parallel",
          "docstring": "Test research and analysis workflow using parallel execution",
          "line_range": [
            146,
            191
          ],
          "parameters": [
            "self",
            "production_orchestrator"
          ]
        },
        {
          "name": "test_creative_collaboration_workflow",
          "docstring": "Test creative writing workflow using collaborative execution",
          "line_range": [
            194,
            258
          ],
          "parameters": [
            "self",
            "production_orchestrator"
          ]
        },
        {
          "name": "test_auto_mode_selection_intelligence",
          "docstring": "Test intelligent automatic mode selection based on query analysis",
          "line_range": [
            261,
            305
          ],
          "parameters": [
            "self",
            "production_orchestrator"
          ]
        },
        {
          "name": "test_complex_real_world_scenario",
          "docstring": "Test complex real-world scenario combining multiple orchestration features",
          "line_range": [
            308,
            369
          ],
          "parameters": [
            "self",
            "production_orchestrator"
          ]
        },
        {
          "name": "test_error_recovery_and_resilience_e2e",
          "docstring": "Test end-to-end error recovery and system resilience",
          "line_range": [
            372,
            400
          ],
          "parameters": [
            "self",
            "production_orchestrator",
            "realistic_agent_setup"
          ]
        }
      ],
      "bases": []
    },
    {
      "name": "MockClassification",
      "docstring": "",
      "line_range": [
        104,
        107
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "MockClassification",
      "docstring": "",
      "line_range": [
        154,
        157
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "MockClassification",
      "docstring": "",
      "line_range": [
        202,
        205
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "MockClassification",
      "docstring": "",
      "line_range": [
        335,
        338
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "MockQualityResult",
      "docstring": "",
      "line_range": [
        225,
        226
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "MockClassification",
      "docstring": "",
      "line_range": [
        289,
        292
      ],
      "methods": [],
      "bases": []
    }
  ],
  "callgraph": {
    "realistic_agent_setup": [],
    "create_specialized_router": [
      "AsyncMock",
      "RoutingDecision",
      "Mock",
      "specialization_scores.get"
    ],
    "production_orchestrator": [
      "AsyncMock",
      "AgentOrchestrator",
      "Mock"
    ],
    "test_code_development_workflow_sequential": [
      "MockClassification",
      "production_orchestrator.orchestrate",
      "len",
      "isinstance",
      "str"
    ],
    "test_research_analysis_workflow_parallel": [
      "MockClassification",
      "len",
      "production_orchestrator.orchestrate"
    ],
    "test_creative_collaboration_workflow": [
      "MockClassification",
      "MockQualityResult",
      "patch",
      "production_orchestrator.orchestrate",
      "iter",
      "next",
      "Mock"
    ],
    "test_auto_mode_selection_intelligence": [
      "MockClassification",
      "production_orchestrator.orchestrate"
    ],
    "test_complex_real_world_scenario": [
      "MockClassification",
      "len",
      "production_orchestrator.orchestrate",
      "key.startswith"
    ],
    "test_error_recovery_and_resilience_e2e": [
      "Exception",
      "production_orchestrator.orchestrate",
      "isinstance",
      "len",
      "agent_result.get"
    ]
  },
  "dependencies": [
    "AgentCoordination",
    "AgentOrchestrator",
    "AsyncMock",
    "ExecutionMode",
    "Mock",
    "ModelChoice",
    "ModelRouter",
    "RoutingDecision",
    "TaskClassifier",
    "asyncio",
    "dataclass",
    "dataclasses",
    "patch",
    "pytest",
    "src.llmgenie.orchestration",
    "src.llmgenie.task_router",
    "unittest.mock"
  ],
  "hash": "56ec1ec847a2bf985d5295104c7a5e33c06c11bf3a809f9a36a5175a70a1cadb",
  "artifact_id": "dfae06ae-bee9-4c25-b170-69a491deb200"
}