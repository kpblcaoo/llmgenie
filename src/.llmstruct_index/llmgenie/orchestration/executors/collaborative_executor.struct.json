{
  "module_id": "llmgenie.orchestration.executors.collaborative_executor",
  "path": "llmgenie/orchestration/executors/collaborative_executor.py",
  "category": "core",
  "module_doc": "Collaborative execution strategy\n\nEpic 5 Phase 3.1: Collaborative problem solving\nSingle responsibility: Multiple agents solve same problem, best result selected",
  "functions": [
    {
      "name": "__init__",
      "docstring": "Initialize with available ModelRouter instances",
      "line_range": [
        23,
        26
      ],
      "parameters": [
        "self",
        "agent_routers"
      ],
      "decorators": []
    },
    {
      "name": "execute",
      "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
      "line_range": [
        28,
        119
      ],
      "parameters": [
        "self",
        "task"
      ],
      "decorators": []
    },
    {
      "name": "_execute_with_agent",
      "docstring": "Execute task with single agent",
      "line_range": [
        121,
        154
      ],
      "parameters": [
        "self",
        "router_name",
        "router",
        "task"
      ],
      "decorators": []
    },
    {
      "name": "_assess_result_quality",
      "docstring": "Assess quality of agent result using QualityValidator",
      "line_range": [
        156,
        175
      ],
      "parameters": [
        "self",
        "agent_result",
        "task"
      ],
      "decorators": []
    },
    {
      "name": "_basic_quality_assessment",
      "docstring": "Basic quality assessment fallback",
      "line_range": [
        177,
        206
      ],
      "parameters": [
        "self",
        "content",
        "task"
      ],
      "decorators": []
    },
    {
      "name": "_analyze_consensus",
      "docstring": "Analyze consensus between agent results",
      "line_range": [
        208,
        245
      ],
      "parameters": [
        "self",
        "collaborative_results"
      ],
      "decorators": []
    },
    {
      "name": "_calculate_quality_variance",
      "docstring": "Calculate variance in quality scores across agents",
      "line_range": [
        247,
        258
      ],
      "parameters": [
        "self",
        "quality_scores"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "CollaborativeExecutor",
      "docstring": "Collaborative problem solving execution strategy\n\nEpic 5 example: Multiple models generate solution, highest quality chosen\nBenefit: Quality optimization, redundancy, multiple perspectives",
      "line_range": [
        15,
        258
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ]
        },
        {
          "name": "execute",
          "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
          "line_range": [
            28,
            119
          ],
          "parameters": [
            "self",
            "task"
          ]
        },
        {
          "name": "_execute_with_agent",
          "docstring": "Execute task with single agent",
          "line_range": [
            121,
            154
          ],
          "parameters": [
            "self",
            "router_name",
            "router",
            "task"
          ]
        },
        {
          "name": "_assess_result_quality",
          "docstring": "Assess quality of agent result using QualityValidator",
          "line_range": [
            156,
            175
          ],
          "parameters": [
            "self",
            "agent_result",
            "task"
          ]
        },
        {
          "name": "_basic_quality_assessment",
          "docstring": "Basic quality assessment fallback",
          "line_range": [
            177,
            206
          ],
          "parameters": [
            "self",
            "content",
            "task"
          ]
        },
        {
          "name": "_analyze_consensus",
          "docstring": "Analyze consensus between agent results",
          "line_range": [
            208,
            245
          ],
          "parameters": [
            "self",
            "collaborative_results"
          ]
        },
        {
          "name": "_calculate_quality_variance",
          "docstring": "Calculate variance in quality scores across agents",
          "line_range": [
            247,
            258
          ],
          "parameters": [
            "self",
            "quality_scores"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "QualityValidator"
    ],
    "execute": [
      "self._analyze_consensus",
      "max",
      "collaborative_results.items",
      "self._assess_result_quality",
      "agents_used.append",
      "self._execute_with_agent",
      "self._calculate_quality_variance",
      "collaborative_results.keys",
      "str",
      "collaborative_results.get",
      "OrchestrationResult",
      "r.get",
      "quality_scores.items",
      "best_result.get",
      "any",
      "list",
      "collaborative_results.values",
      "datetime.now",
      "result.get",
      "len"
    ],
    "_execute_with_agent": [
      "router.route_task",
      "router.execute_with_model",
      "str"
    ],
    "_assess_result_quality": [
      "isinstance",
      "str",
      "agent_result.get",
      "result_data.get",
      "float",
      "hasattr",
      "self._basic_quality_assessment"
    ],
    "_basic_quality_assessment": [
      "any",
      "isinstance",
      "content_lower.split",
      "min",
      "set",
      "content.lower",
      "task_lower.split",
      "content.strip",
      "len"
    ],
    "_analyze_consensus": [
      "locals",
      "isinstance",
      "str",
      "content.split",
      "collaborative_results.values",
      "contents.append",
      "set",
      "set.union",
      "content.lower",
      "result_data.get",
      "set.intersection",
      "result.get",
      "len"
    ],
    "_calculate_quality_variance": [
      "list",
      "len",
      "quality_scores.values",
      "sum"
    ]
  },
  "dependencies": [
    "Any",
    "Dict",
    "List",
    "ModelChoice",
    "ModelRouter",
    "Optional",
    "OrchestrationResult",
    "OrchestrationTask",
    "QualityResult",
    "QualityValidator",
    "core",
    "datetime",
    "task_router",
    "typing"
  ],
  "hash": "a0c80095b946b77b07b6dbb347d34a9b0e63f3572770dc82de92477fc6282f46",
  "artifact_id": "3a09f4ac-1e40-42f9-9d3c-62fe6f8594d0"
}