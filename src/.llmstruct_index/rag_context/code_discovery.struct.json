{
  "module_id": "rag_context.code_discovery",
  "path": "rag_context/code_discovery.py",
  "category": "core",
  "module_doc": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation\nBuilds on Phase 4A.2.1 knowledge extraction safely.",
  "functions": [
    {
      "name": "create_discovery_system",
      "docstring": "Create discovery system safely",
      "line_range": [
        266,
        275
      ],
      "parameters": [
        "extractor"
      ],
      "decorators": []
    },
    {
      "name": "__init__",
      "docstring": "Initialize with optional existing extractor",
      "line_range": [
        35,
        40
      ],
      "parameters": [
        "self",
        "extractor"
      ],
      "decorators": []
    },
    {
      "name": "search_solutions",
      "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
      "line_range": [
        42,
        91
      ],
      "parameters": [
        "self",
        "query",
        "max_results"
      ],
      "decorators": []
    },
    {
      "name": "_load_patterns_safely",
      "docstring": "Load patterns from JSON safely",
      "line_range": [
        93,
        120
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "_search_patterns_simple",
      "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
      "line_range": [
        122,
        172
      ],
      "parameters": [
        "self",
        "query",
        "patterns",
        "max_results"
      ],
      "decorators": []
    },
    {
      "name": "_generate_suggestions",
      "docstring": "Generate practical suggestions based on found patterns",
      "line_range": [
        174,
        204
      ],
      "parameters": [
        "self",
        "query",
        "patterns"
      ],
      "decorators": []
    },
    {
      "name": "quick_search",
      "docstring": "Quick keyword-based search for rapid discovery",
      "line_range": [
        206,
        233
      ],
      "parameters": [
        "self",
        "keywords"
      ],
      "decorators": []
    },
    {
      "name": "get_discovery_stats",
      "docstring": "Get discovery system statistics",
      "line_range": [
        235,
        254
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "disable",
      "docstring": "Disable discovery system safely",
      "line_range": [
        256,
        258
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    },
    {
      "name": "enable",
      "docstring": "Enable discovery system",
      "line_range": [
        260,
        262
      ],
      "parameters": [
        "self"
      ],
      "decorators": []
    }
  ],
  "classes": [
    {
      "name": "DiscoveryResult",
      "docstring": "Result of code discovery search",
      "line_range": [
        15,
        21
      ],
      "methods": [],
      "bases": []
    },
    {
      "name": "SmartCodeDiscovery",
      "docstring": "Smart code discovery system for \"Have I solved this before?\" queries.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1 infrastructure\n- No breaking changes to existing components\n- Graceful degradation if knowledge base missing\n- Simple text search (no complex NLP that could break)",
      "line_range": [
        24,
        262
      ],
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing extractor",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self",
            "extractor"
          ]
        },
        {
          "name": "search_solutions",
          "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
          "line_range": [
            42,
            91
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ]
        },
        {
          "name": "_load_patterns_safely",
          "docstring": "Load patterns from JSON safely",
          "line_range": [
            93,
            120
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "_search_patterns_simple",
          "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
          "line_range": [
            122,
            172
          ],
          "parameters": [
            "self",
            "query",
            "patterns",
            "max_results"
          ]
        },
        {
          "name": "_generate_suggestions",
          "docstring": "Generate practical suggestions based on found patterns",
          "line_range": [
            174,
            204
          ],
          "parameters": [
            "self",
            "query",
            "patterns"
          ]
        },
        {
          "name": "quick_search",
          "docstring": "Quick keyword-based search for rapid discovery",
          "line_range": [
            206,
            233
          ],
          "parameters": [
            "self",
            "keywords"
          ]
        },
        {
          "name": "get_discovery_stats",
          "docstring": "Get discovery system statistics",
          "line_range": [
            235,
            254
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "disable",
          "docstring": "Disable discovery system safely",
          "line_range": [
            256,
            258
          ],
          "parameters": [
            "self"
          ]
        },
        {
          "name": "enable",
          "docstring": "Enable discovery system",
          "line_range": [
            260,
            262
          ],
          "parameters": [
            "self"
          ]
        }
      ],
      "bases": []
    }
  ],
  "callgraph": {
    "__init__": [
      "SafeKnowledgeExtractor",
      "Path"
    ],
    "search_solutions": [
      "time.time",
      "DiscoveryResult",
      "self._load_patterns_safely",
      "self._generate_suggestions",
      "self._search_patterns_simple"
    ],
    "_load_patterns_safely": [
      "open",
      "json.load",
      "item.get",
      "CodePattern",
      "patterns.append",
      "patterns_file.exists"
    ],
    "_search_patterns_simple": [
      "any",
      "query_lower.split",
      "query.lower",
      "set",
      "pattern_scores.sort",
      "pattern_scores.append",
      "Path"
    ],
    "_generate_suggestions": [
      "suggestions.append",
      "any",
      "name.lower",
      "list",
      "set",
      "Path",
      "len"
    ],
    "quick_search": [
      "time.time",
      "matches.append",
      "keyword.lower",
      "str",
      "self._load_patterns_safely",
      "Path"
    ],
    "get_discovery_stats": [
      "open",
      "json.load",
      "len",
      "patterns_file.exists"
    ],
    "disable": [],
    "enable": [],
    "create_discovery_system": [
      "SmartCodeDiscovery",
      "discovery.disable",
      "print"
    ]
  },
  "dependencies": [
    "Any",
    "CodePattern",
    "Dict",
    "List",
    "Optional",
    "Path",
    "SafeKnowledgeExtractor",
    "Tuple",
    "dataclass",
    "dataclasses",
    "json",
    "knowledge_extractor",
    "pathlib",
    "time",
    "typing"
  ],
  "hash": "6cbc46e2dd7df1aad1c053912305e81c765be1c724588114984d7c2c39c1460b",
  "artifact_id": "8604c039-056e-463a-b9d5-93dbba53c138"
}