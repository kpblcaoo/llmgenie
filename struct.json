{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-08T04:58:10.057453Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 27,
      "functions_count": 76,
      "classes_count": 11,
      "call_edges_count": 334
    },
    "artifact_id": "f46938c6-fbc8-43f8-b693-eb3d32602978",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "9bfa8cba-42e3-4a64-ab79-1e5a135fc275",
        "metadata": {}
      },
      {
        "path": ".cursor",
        "type": "directory",
        "artifact_id": "cfc4e301-6237-4e67-8599-bd03d81527ce",
        "metadata": {}
      },
      {
        "path": ".cursor/rules",
        "type": "directory",
        "artifact_id": "b9025bb3-17b2-4a58-8c99-a490ae0894b3",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/core",
        "type": "directory",
        "artifact_id": "7f2691d0-67d1-4736-be61-ce8aaefcc41b",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles",
        "type": "directory",
        "artifact_id": "a54fc977-06c3-4737-9280-0071eaa7c373",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles/220_rules_engineer",
        "type": "directory",
        "artifact_id": "a1451234-41d3-456e-95a9-789f58164893",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/security",
        "type": "directory",
        "artifact_id": "348e455e-3a14-41a9-830c-989b2ecc5ae3",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/templates",
        "type": "directory",
        "artifact_id": "4f372723-1a6b-4859-a963-6090f9a37b4b",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "4a50f3f6-b4ec-48b5-9506-623acab134a9",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "93520574-50db-4665-9c35-c0141e35afc8",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "cd4f5253-9126-4ad1-901a-d3697fe44dc0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index",
        "type": "directory",
        "artifact_id": "470d3178-5bcf-4b28-baeb-53ba5ef9eba3",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src",
        "type": "directory",
        "artifact_id": "6c4873fd-9509-487e-818c-bbf7689ea434",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie",
        "type": "directory",
        "artifact_id": "1279b7b8-3a65-4ba5-8c50-c120df5c7a0e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules",
        "type": "directory",
        "artifact_id": "8fef73ef-29a3-43a2-866b-747f3273c71e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "e0e3e7a5-0345-4b0a-8a6f-ccbb10d9abb1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "87e51178-6c3b-4bfa-945d-f224c6780a19",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tools",
        "type": "directory",
        "artifact_id": "72e10e75-12ab-4e7f-94c0-6429717c8fff",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "e72498fb-ff80-4b50-ad62-bd6497882f00",
        "metadata": {}
      },
      {
        "path": "data/audit",
        "type": "directory",
        "artifact_id": "edead1f6-68d8-4015-9536-8bb71b6401a3",
        "metadata": {}
      },
      {
        "path": "data/epic_logs",
        "type": "directory",
        "artifact_id": "db93de2d-c65d-40ae-bcb5-1a77a8990bc0",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_ai_workflow_rules_2024",
        "type": "directory",
        "artifact_id": "315adf8a-edbd-4909-804c-487c5c37b111",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_session_control_2024",
        "type": "directory",
        "artifact_id": "530be832-c285-4184-9478-91092a511347",
        "metadata": {}
      },
      {
        "path": "data/knowledge",
        "type": "directory",
        "artifact_id": "819fd6af-4d9e-42a0-bd3d-6c33f56ca388",
        "metadata": {}
      },
      {
        "path": "data/knowledge/envs",
        "type": "directory",
        "artifact_id": "9ccbd95d-3af6-43cf-b14e-685b1b181fde",
        "metadata": {}
      },
      {
        "path": "data/knowledge/models",
        "type": "directory",
        "artifact_id": "3992be7e-d8e0-4eca-8bde-819036f2ad12",
        "metadata": {}
      },
      {
        "path": "data/knowledge/templates",
        "type": "directory",
        "artifact_id": "272467a4-c12d-419c-ad92-eaab8856161d",
        "metadata": {}
      },
      {
        "path": "data/logs",
        "type": "directory",
        "artifact_id": "db25147b-5893-48b4-bf24-a1e8cfa7d640",
        "metadata": {}
      },
      {
        "path": "data/logs/sessions",
        "type": "directory",
        "artifact_id": "6207d3ac-c9f2-412e-8504-b05255a9c53f",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "14834a80-ba14-41b1-9276-7be068c1cabb",
        "metadata": {}
      },
      {
        "path": "decision_memos",
        "type": "directory",
        "artifact_id": "68812903-2edc-4be5-a39a-c55e9af149a8",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "551ba82b-4604-4981-97fb-d2c73d1f1690",
        "metadata": {}
      },
      {
        "path": "docs/archive_analysis",
        "type": "directory",
        "artifact_id": "9a3fc44e-75f4-400e-89a8-04a2ab64c504",
        "metadata": {}
      },
      {
        "path": "docs/archive_analysis/01_architecture_patterns",
        "type": "directory",
        "artifact_id": "a7bb9ccd-55b0-45c8-a52f-9523a2f1bdeb",
        "metadata": {}
      },
      {
        "path": "docs/decision_memos",
        "type": "directory",
        "artifact_id": "e45a788a-7be4-4bec-a1b5-6e7f7ba6e9fb",
        "metadata": {}
      },
      {
        "path": "docs/epics",
        "type": "directory",
        "artifact_id": "236bb888-895e-4ba5-8a10-44661e98a130",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "71a0d59f-7d91-4c57-b6e7-aa6f7c526b01",
        "metadata": {}
      },
      {
        "path": "docs/knowledge",
        "type": "directory",
        "artifact_id": "f340bc18-1ee1-45fd-90fa-081124e742fa",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/models",
        "type": "directory",
        "artifact_id": "607eb43d-4a60-43fb-9b25-2f73708d0514",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/templates",
        "type": "directory",
        "artifact_id": "54bbdd81-a963-449d-9752-aacfcbba8f15",
        "metadata": {}
      },
      {
        "path": "docs/mamay_onboarding",
        "type": "directory",
        "artifact_id": "db6737d1-02b5-4715-b0d8-92214737e66c",
        "metadata": {}
      },
      {
        "path": "docs/memos",
        "type": "directory",
        "artifact_id": "e8e68777-23ac-4624-bdaf-2a06820d073b",
        "metadata": {}
      },
      {
        "path": "docs/notes",
        "type": "directory",
        "artifact_id": "6fb59d01-0d25-4127-9135-19438b77f55a",
        "metadata": {}
      },
      {
        "path": "docs/to_sort",
        "type": "directory",
        "artifact_id": "9f621469-0a55-482b-bfe9-3e9150c0677b",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/examples",
        "type": "directory",
        "artifact_id": "6a657d11-1c6a-4814-b5b6-89491e113e66",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/internal",
        "type": "directory",
        "artifact_id": "daa0b1b5-ec1a-4fa4-b025-b71568201756",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/internal/memos",
        "type": "directory",
        "artifact_id": "6b5a8112-a3c8-48b7-96b6-3df7cb593654",
        "metadata": {}
      },
      {
        "path": "event_log",
        "type": "directory",
        "artifact_id": "027aa299-759c-49bd-81f2-13313f4a7374",
        "metadata": {}
      },
      {
        "path": "results",
        "type": "directory",
        "artifact_id": "b2992eea-8298-4d82-a47f-4e2135d73d87",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "cebbc08a-2b34-4747-9fd4-b29d5c46bdd6",
        "metadata": {}
      },
      {
        "path": "scripts/tools",
        "type": "directory",
        "artifact_id": "d6558923-082f-4772-ba0a-f907c60b457d",
        "metadata": {}
      },
      {
        "path": "scripts/tools/ollama_queue.py",
        "type": "file",
        "artifact_id": "d205005e-1dd4-4f79-9b00-28a25c2284c2",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "f4a919e8-6ffd-4e8d-b201-4c98c64531b0",
        "metadata": {}
      },
      {
        "path": "src/llmgenie",
        "type": "directory",
        "artifact_id": "82fef0d4-4972-428e-be1a-fd4b010addbe",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api",
        "type": "directory",
        "artifact_id": "1c2c78bf-7df8-43bc-9a0e-1f2557579bc3",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/__init__.py",
        "type": "file",
        "artifact_id": "ffafb98b-256a-4eb0-8b52-8a03fe2d69b8",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/handoff_validator.py",
        "type": "file",
        "artifact_id": "f80fa749-6075-433d-a4df-c22781d74f16",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/main.py",
        "type": "file",
        "artifact_id": "570ba4dc-e9c6-41c5-a608-3c8d9d203dcc",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/cli.py",
        "type": "file",
        "artifact_id": "73b09bf5-0e99-42b7-9bd1-a7bb4adcba2e",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/llm_client.py",
        "type": "file",
        "artifact_id": "16826e39-7b08-4318-bbb4-5169bd87bc8f",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules",
        "type": "directory",
        "artifact_id": "5dd2c31e-7eec-420f-b9bd-294a46218c1a",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "0310e283-d45e-45fb-aaf8-cad98747dc52",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "d1e544ab-1fce-47f1-a0f9-860a2905e9bd",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "bbf88dbc-a64f-4177-b632-525820604a5d",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "55d1b412-7a22-408e-89be-9a99a81d8bda",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/context.py",
        "type": "file",
        "artifact_id": "aea098ad-ff56-4538-9d47-ebeffbd9508d",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "20a81a70-dfa3-4638-81f7-9f5e25e23ca0",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "aedfd138-bdb5-4c74-a2c8-7b6366d63c0e",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "7977f86a-d76a-4def-bd86-f7fc49dceeda",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "fbed50ee-588e-4d13-b4ef-94a65b798d77",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "bfbf8e59-bf85-4a11-b00a-75630a5abb65",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "d6f5cc0d-d34e-4d35-b822-f4184fe25bfc",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/query.py",
        "type": "file",
        "artifact_id": "e5fa1001-6201-466e-ae39-4a256b86fba5",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/review.py",
        "type": "file",
        "artifact_id": "43c8c9a2-065c-4a26-9a27-a0591f0e4855",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "59c01fb9-f79f-4e25-8a37-f585e3279174",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "afcb7dd9-a1e9-4d3c-86bd-965eb42e1f46",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "b18b1cee-ed20-423c-84ab-d7e36c87eca9",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "859a01e6-4dc2-44bf-8569-c15ccadcac39",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "fabd4040-5f63-4d30-b0a7-552db463c24a",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/services.py",
        "type": "file",
        "artifact_id": "23df7986-03d5-426a-8e59-3a3041ae8d2d",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "d1fbaf68-f948-4e08-b40b-ae62ec164fa5",
        "metadata": {}
      },
      {
        "path": "tests/test_api.py",
        "type": "file",
        "artifact_id": "4922de53-c2b9-4f42-8ee1-8e1a16d97d55",
        "metadata": {}
      },
      {
        "path": "tests/test_cli.py",
        "type": "file",
        "artifact_id": "f9db6326-73c0-4618-8b50-0cfc1b9bb522",
        "metadata": {}
      },
      {
        "path": "tests/test_smoke.py",
        "type": "file",
        "artifact_id": "6b8f3fdc-d3a7-42c9-9e0d-ada81e805a70",
        "metadata": {}
      },
      {
        "path": "tools",
        "type": "directory",
        "artifact_id": "8d746046-b530-4d05-8fac-5709bbb5ca52",
        "metadata": {}
      },
      {
        "path": "tools/atomic_rules_linter.py",
        "type": "file",
        "artifact_id": "881370cd-5699-4ce7-a5f9-aa4420121262",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "tools.atomic_rules_linter",
      "path": "tools/atomic_rules_linter.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "831e91c4-87eb-41e0-a6a0-5763da609a06"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d53a1e0-2d4a-41ee-9255-3f48edd736ec"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Tests for llmgenie CLI module",
      "artifact_id": "428a47cf-d677-4282-af8e-0e73abc9c265"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "Tests for llmgenie FastAPI application",
      "artifact_id": "af2d4ff9-a8ba-40cc-b04d-0ab8f5cbe191"
    },
    {
      "module_id": "src.llmgenie.llm_client",
      "path": "src/llmgenie/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "cd04a10d-0b53-4a44-9644-0638a7ab70a5"
    },
    {
      "module_id": "src.llmgenie.cli",
      "path": "src/llmgenie/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "7c838434-ca5f-4520-ba58-a7d602a53c72"
    },
    {
      "module_id": "src.llmgenie.api.main",
      "path": "src/llmgenie/api/main.py",
      "category": "core",
      "functions": 7,
      "classes": 4,
      "summary": "FastAPI main application for llmgenie",
      "artifact_id": "135785e8-a589-4cce-80a7-3ea6dc9905ce"
    },
    {
      "module_id": "src.llmgenie.api.__init__",
      "path": "src/llmgenie/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "llmgenie API module",
      "artifact_id": "36e96401-5ef6-4dd5-90bb-bb6c5d71c324"
    },
    {
      "module_id": "src.llmgenie.api.handoff_validator",
      "path": "src/llmgenie/api/handoff_validator.py",
      "category": "core",
      "functions": 9,
      "classes": 6,
      "summary": "Handoff validation module for llmgenie",
      "artifact_id": "ddc867cb-44f5-4c4d-99a4-3cb4764efc78"
    },
    {
      "module_id": "src.llmgenie.modules.commands.__init__",
      "path": "src/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ee7e6cc0-770e-4e12-b451-84fa983b60b0"
    },
    {
      "module_id": "src.llmgenie.modules.commands.metrics",
      "path": "src/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "310e70c1-9723-4760-b9c7-82e0f72b3d2e"
    },
    {
      "module_id": "src.llmgenie.modules.commands.queue",
      "path": "src/llmgenie/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "9938f7d8-abfd-43cf-8ebe-809db3ebd636"
    },
    {
      "module_id": "src.llmgenie.modules.commands.services",
      "path": "src/llmgenie/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "32f842e6-6f32-4079-b301-5f2ab2feaa77"
    },
    {
      "module_id": "src.llmgenie.modules.cli.dogfood",
      "path": "src/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "28459c20-0073-44b8-96d0-16711feef22e"
    },
    {
      "module_id": "src.llmgenie.modules.cli.parse",
      "path": "src/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "18e7cd48-1f73-4086-8ffb-e9df486b5014"
    },
    {
      "module_id": "src.llmgenie.modules.cli.audit",
      "path": "src/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b438496f-7b23-4892-b9e0-3d8f500da715"
    },
    {
      "module_id": "src.llmgenie.modules.cli.utils",
      "path": "src/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "5bc6901d-e896-47e6-9d25-6448dac45de8"
    },
    {
      "module_id": "src.llmgenie.modules.cli.context",
      "path": "src/llmgenie/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "f7abf76f-af01-4785-a0c5-573d5527d2d1"
    },
    {
      "module_id": "src.llmgenie.modules.cli.copilot",
      "path": "src/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b74bc04c-4f4f-4329-9734-16bb41934e59"
    },
    {
      "module_id": "src.llmgenie.modules.cli.review",
      "path": "src/llmgenie/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "902e759c-217f-4010-86cf-c5eef324208a"
    },
    {
      "module_id": "src.llmgenie.modules.cli.__init__",
      "path": "src/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "88e99b50-ec31-46ea-99a7-64ef77907ef1"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers",
      "path": "src/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "093aa9e1-7c72-4fb1-946c-966617561977"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers_legacy",
      "path": "src/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b0f75cb4-919a-49ba-8639-ff7262a1ea30"
    },
    {
      "module_id": "src.llmgenie.modules.cli.analyze_duplicates",
      "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fb180c0c-e170-450e-8ab2-ba28960083ca"
    },
    {
      "module_id": "src.llmgenie.modules.cli.query",
      "path": "src/llmgenie/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "05848bcb-500b-4ebb-beac-10ed479ad050"
    },
    {
      "module_id": "src.llmgenie.modules.cli.epic",
      "path": "src/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "b1abb599-d7d3-45b4-931e-0cff16506f04"
    },
    {
      "module_id": "scripts.tools.ollama_queue",
      "path": "scripts/tools/ollama_queue.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "e89086fc-abf8-40d8-8a66-e91fc6e3735e"
    }
  ],
  "modules": [
    {
      "module_id": "tools.atomic_rules_linter",
      "path": "tools/atomic_rules_linter.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "glob",
        "os",
        "re"
      ],
      "hash": "470eb6e10bf21aaa6984e864abd16bbd7c22ff4536290f65c548e44c3b5512b8",
      "artifact_id": "831e91c4-87eb-41e0-a6a0-5763da609a06"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_smoke",
          "docstring": "",
          "line_range": [
            1,
            2
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_smoke": []
      },
      "dependencies": [],
      "hash": "a6845264444e66537bcf4ff95e3560a9deb6764c4ad8fda31f59580707d69a97",
      "artifact_id": "0d53a1e0-2d4a-41ee-9255-3f48edd736ec"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "module_doc": "Tests for llmgenie CLI module",
      "functions": [
        {
          "name": "test_cli_import",
          "docstring": "Test that CLI module can be imported",
          "line_range": [
            12,
            18
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_llm_client_import",
          "docstring": "Test that LLM client can be imported",
          "line_range": [
            20,
            26
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_cli_import": [
          "pytest.fail"
        ],
        "test_llm_client_import": [
          "pytest.fail"
        ]
      },
      "dependencies": [
        "cli",
        "llm_client",
        "llmgenie",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "892f36ff6a9ab5c3fdb8215906c8d9ca50a2fd5fbe714e8475dfd92bafef5fef",
      "artifact_id": "428a47cf-d677-4282-af8e-0e73abc9c265"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "module_doc": "Tests for llmgenie FastAPI application",
      "functions": [
        {
          "name": "test_health_check",
          "docstring": "Test health check endpoint",
          "line_range": [
            17,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_workflow_modes",
          "docstring": "Test workflow modes endpoint",
          "line_range": [
            26,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_agent_execute",
          "docstring": "Test agent execution endpoint",
          "line_range": [
            36,
            48
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_placeholder",
          "docstring": "Test MCP tools placeholder endpoint",
          "line_range": [
            50,
            56
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_health_check": [
          "client.get",
          "response.json"
        ],
        "test_workflow_modes": [
          "client.get",
          "response.json"
        ],
        "test_agent_execute": [
          "client.post",
          "response.json"
        ],
        "test_mcp_tools_placeholder": [
          "client.post",
          "response.json"
        ]
      },
      "dependencies": [
        "TestClient",
        "app",
        "fastapi.testclient",
        "llmgenie.api.main",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "1a2b1fd51aa2161c4ce2e92b7ab2b226923863ee708de205c59d35e5fbd83131",
      "artifact_id": "af2d4ff9-a8ba-40cc-b04d-0ab8f5cbe191"
    },
    {
      "module_id": "src.llmgenie.llm_client",
      "path": "src/llmgenie/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "logging.error",
          "json.load",
          "self._query_anthropic",
          "logging.warning",
          "json.dumps",
          "self._query_ollama",
          "range",
          "Path",
          "self._query_hybrid",
          "asyncio.sleep",
          "self._query_grok",
          "logging.info"
        ],
        "_query_grok": [
          "logging.error",
          "response.json",
          "result.get",
          "aiohttp.ClientSession",
          "session.post",
          "logging.info"
        ],
        "_query_anthropic": [
          "logging.error",
          "response.json",
          "result.get",
          "aiohttp.ClientSession",
          "session.post",
          "logging.info"
        ],
        "_query_ollama": [
          "logging.debug",
          "logging.error",
          "response.json",
          "result.get",
          "aiohttp.ClientSession",
          "session.post",
          "logging.info"
        ],
        "_query_hybrid": [
          "len",
          "asyncio.gather",
          "self._query_anthropic",
          "isinstance",
          "self._query_ollama",
          "self._query_grok",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "cd04a10d-0b53-4a44-9644-0638a7ab70a5"
    },
    {
      "module_id": "src.llmgenie.cli",
      "path": "src/llmgenie/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "epic.add_epic_cli_subparser",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "parse_parser.add_argument",
          "query_parser.add_argument",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "parser.add_subparsers",
          "copilot_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument"
        ],
        "normalize_patterns": [
          "result.extend",
          "item.split",
          "p.strip",
          "result.append",
          "item.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "0f1504317e34987adbd393567aa9bdaf5c356d1d6b9caa26781ccdb83ca3d0a3",
      "artifact_id": "7c838434-ca5f-4520-ba58-a7d602a53c72"
    },
    {
      "module_id": "src.llmgenie.api.main",
      "path": "src/llmgenie/api/main.py",
      "category": "core",
      "module_doc": "FastAPI main application for llmgenie\nProvides REST API for multi-agent orchestration and workflow management",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            59,
            65
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            69,
            84
          ],
          "parameters": [],
          "decorators": [
            "app.get('/project/state', response_model=ProjectStateResponse)"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent",
          "line_range": [
            88,
            102
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/agents/execute', response_model=AgentResponse)"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            105,
            112
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "app.get('/agents/status/{agent_id}')"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            116,
            123
          ],
          "parameters": [],
          "decorators": [
            "app.get('/rules/manifest')"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            126,
            133
          ],
          "parameters": [],
          "decorators": [
            "app.get('/workflow/modes')"
          ]
        },
        {
          "name": "execute_mcp_tool",
          "docstring": "Execute MCP tool (placeholder)",
          "line_range": [
            137,
            144
          ],
          "parameters": [
            "tool_name",
            "parameters"
          ],
          "decorators": [
            "app.post('/mcp/tools/execute')"
          ]
        }
      ],
      "classes": [
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            36,
            39
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ProjectStateResponse",
          "docstring": "",
          "line_range": [
            41,
            44
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentRequest",
          "docstring": "",
          "line_range": [
            46,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentResponse",
          "docstring": "",
          "line_range": [
            51,
            55
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "health_check": [
          "HealthResponse",
          "datetime.now",
          "app.get"
        ],
        "get_project_state": [
          "app.get",
          "json.load",
          "ProjectStateResponse",
          "open",
          "state.get",
          "str",
          "HTTPException"
        ],
        "execute_agent_task": [
          "AgentResponse",
          "app.post",
          "datetime.now"
        ],
        "get_agent_status": [
          "app.get"
        ],
        "get_rules_manifest": [
          "open",
          "json.load",
          "app.get",
          "HTTPException"
        ],
        "get_workflow_modes": [
          "app.get"
        ],
        "execute_mcp_tool": [
          "app.post"
        ]
      },
      "dependencies": [
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "Optional",
        "ValidationResult",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "handoff_validator",
        "json",
        "os",
        "pydantic",
        "typing",
        "uvicorn"
      ],
      "hash": "3d81c20bffb1e4d568451ce3d5853a7d75ab4dd87b013b864130224a77e27f60",
      "artifact_id": "135785e8-a589-4cce-80a7-3ea6dc9905ce"
    },
    {
      "module_id": "src.llmgenie.api.__init__",
      "path": "src/llmgenie/api/__init__.py",
      "category": "cli",
      "module_doc": "llmgenie API module\nFastAPI-based REST API for llmgenie orchestration",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "113730aac8ee128f272f72d14db21b5639e86fbd7697a11dc62547f8f826d153",
      "artifact_id": "36e96401-5ef6-4dd5-90bb-bb6c5d71c324"
    },
    {
      "module_id": "src.llmgenie.api.handoff_validator",
      "path": "src/llmgenie/api/handoff_validator.py",
      "category": "core",
      "module_doc": "Handoff validation module for llmgenie\nImplements automated completeness validation for context transfer packages\nBased on 016_context_transfer_protocol atomic rule",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "validate_package",
          "docstring": "Validate complete handoff package",
          "line_range": [
            86,
            125
          ],
          "parameters": [
            "self",
            "package"
          ],
          "decorators": []
        },
        {
          "name": "_validate_files",
          "docstring": "Validate individual files in package",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_find_missing_files",
          "docstring": "Find missing required file types",
          "line_range": [
            145,
            149
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_validate_startup_prompt",
          "docstring": "Validate startup prompt content",
          "line_range": [
            151,
            161
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_validate_control_questions",
          "docstring": "Validate control questions",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "questions"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate overall completeness score",
          "line_range": [
            175,
            206
          ],
          "parameters": [
            "self",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_warnings",
          "docstring": "Generate validation warnings",
          "line_range": [
            208,
            231
          ],
          "parameters": [
            "self",
            "package",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate improvement recommendations",
          "line_range": [
            233,
            251
          ],
          "parameters": [
            "self",
            "package",
            "missing_files",
            "warnings"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffFile",
          "docstring": "Single file in handoff package",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "StartupPrompt",
          "docstring": "Startup prompt validation",
          "line_range": [
            23,
            29
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ControlQuestions",
          "docstring": "Control questions validation",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffPackage",
          "docstring": "Complete handoff package for validation",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResult",
          "docstring": "Handoff validation result",
          "line_range": [
            50,
            67
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffValidator",
          "docstring": "Core handoff validation logic",
          "line_range": [
            69,
            251
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                83,
                84
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "validate_package",
              "docstring": "Validate complete handoff package",
              "line_range": [
                86,
                125
              ],
              "parameters": [
                "self",
                "package"
              ]
            },
            {
              "name": "_validate_files",
              "docstring": "Validate individual files in package",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_find_missing_files",
              "docstring": "Find missing required file types",
              "line_range": [
                145,
                149
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_validate_startup_prompt",
              "docstring": "Validate startup prompt content",
              "line_range": [
                151,
                161
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_validate_control_questions",
              "docstring": "Validate control questions",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "questions"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate overall completeness score",
              "line_range": [
                175,
                206
              ],
              "parameters": [
                "self",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_warnings",
              "docstring": "Generate validation warnings",
              "line_range": [
                208,
                231
              ],
              "parameters": [
                "self",
                "package",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate improvement recommendations",
              "line_range": [
                233,
                251
              ],
              "parameters": [
                "self",
                "package",
                "missing_files",
                "warnings"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "validate_package": [
          "len",
          "all",
          "self._find_missing_files",
          "self._calculate_completeness_score",
          "file_validation.values",
          "self._validate_startup_prompt",
          "ValidationResult",
          "self._validate_control_questions",
          "self._validate_files",
          "self._generate_warnings",
          "self._generate_recommendations"
        ],
        "_validate_files": [
          "file_path.exists",
          "file_path.stat"
        ],
        "_find_missing_files": [
          "set",
          "list"
        ],
        "_validate_startup_prompt": [
          "prompt.lower",
          "StartupPrompt"
        ],
        "_validate_control_questions": [
          "ControlQuestions",
          "len"
        ],
        "_calculate_completeness_score": [
          "len",
          "max",
          "sum",
          "file_validation.values"
        ],
        "_generate_warnings": [
          "len",
          "file_validation.items",
          "all",
          "file_validation.values",
          "warnings.append"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ]
      },
      "dependencies": [
        "BaseModel",
        "Dict",
        "Field",
        "List",
        "Optional",
        "Path",
        "Union",
        "datetime",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "typing"
      ],
      "hash": "95e1fca4753701656be3b38544e6201c6077ce68a7837cc24ecc6ae98625cbc3",
      "artifact_id": "ddc867cb-44f5-4c4d-99a4-3cb4764efc78"
    },
    {
      "module_id": "src.llmgenie.modules.commands.__init__",
      "path": "src/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "ee7e6cc0-770e-4e12-b451-84fa983b60b0"
    },
    {
      "module_id": "src.llmgenie.modules.commands.metrics",
      "path": "src/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "tracker.get_session_summary",
          "print",
          "max",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "print",
          "get_metrics_tracker",
          "json.dump",
          "json.dumps",
          "tracker.get_session_summary",
          "open",
          "csv.writer",
          "enumerate",
          "time.strftime",
          "writer.writerow",
          "tracker.get_analytics_data"
        ],
        "metrics_report": [
          "len",
          "print",
          "get_metrics_tracker",
          "open",
          "sum",
          "f.write",
          "time.strftime",
          "min",
          "analytics.get",
          "tracker.get_analytics_data"
        ],
        "metrics_track": [
          "print",
          "track_workflow_event"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "summary.get",
          "get_token_summary",
          "enumerate",
          "interaction.get"
        ],
        "cmd_metrics": [
          "print",
          "metrics_track",
          "metrics_analytics",
          "metrics_tokens",
          "metrics_status",
          "metrics_summary",
          "metrics_report"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
      "artifact_id": "310e70c1-9723-4760-b9c7-82e0f72b3d2e"
    },
    {
      "module_id": "src.llmgenie.modules.commands.queue",
      "path": "src/llmgenie/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "logging.error",
          "get_folder_structure",
          "len",
          "json.load",
          "print",
          "client.query",
          "read_file_content",
          "isinstance",
          "item.get",
          "time.time",
          "open",
          "enumerate",
          "workflow.get",
          "attach_to_llm_request",
          "options.get",
          "logging.info",
          "write_to_file",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
      "artifact_id": "9938f7d8-abfd-43cf-8ebe-809db3ebd636"
    },
    {
      "module_id": "src.llmgenie.modules.commands.services",
      "path": "src/llmgenie/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "bot_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "metrics_track.add_argument",
          "subparsers.add_parser",
          "api_start.add_argument",
          "services_subparsers.add_parser",
          "api_parser.add_subparsers",
          "metrics_subparsers.add_parser",
          "metrics_report.add_argument",
          "bot_parser.add_subparsers",
          "services_parser.add_subparsers",
          "metrics_parser.add_subparsers",
          "bot_start.add_argument",
          "api_subparsers.add_parser"
        ],
        "cmd_api_management": [
          "print",
          "requests.post",
          "pid_file.exists",
          "venv_path.exists",
          "process.terminate",
          "f.read",
          "response.json",
          "psutil.Process",
          "pid_file.unlink",
          "open",
          "requests.get",
          "Path",
          "process.wait",
          "str",
          "data.get",
          "int",
          "f.write",
          "subprocess.Popen"
        ],
        "cmd_bot_management": [
          "print",
          "pid_file.exists",
          "process.terminate",
          "f.read",
          "os.getenv",
          "psutil.Process",
          "process.is_running",
          "pid_file.unlink",
          "open",
          "active_bots.append",
          "Path",
          "process.wait",
          "str",
          "int",
          "f.write",
          "subprocess.Popen",
          "bot_scripts.get"
        ],
        "cmd_services": [
          "print",
          "type",
          "time.sleep",
          "cmd_api_management",
          "cmd_bot_management"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "artifact_id": "32f842e6-6f32-4079-b301-5f2ab2feaa77"
    },
    {
      "module_id": "src.llmgenie.modules.cli.dogfood",
      "path": "src/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "artifact_id": "28459c20-0073-44b8-96d0-16711feef22e"
    },
    {
      "module_id": "src.llmgenie.modules.cli.parse",
      "path": "src/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.error",
          "generate_json",
          "ast_path.open",
          "struct_path.open",
          "JSONCache",
          "logging.warning",
          "load_config",
          "json.dump",
          "func.get",
          "Path",
          "cache.cache_json",
          "getattr",
          "parsing_config.get",
          "cli_config.get",
          "mod_dir.mkdir",
          "cache.close",
          "logging.info",
          "struct_data.get",
          "module.get",
          "config.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "966276e0c717ac3bf78502224305e23e2ac9b49547bbbf13bb37c83cb85d8b9c",
      "artifact_id": "18e7cd48-1f73-4086-8ffb-e9df486b5014"
    },
    {
      "module_id": "src.llmgenie.modules.cli.audit",
      "path": "src/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "print",
          "analyze_duplicates",
          "Path",
          "hasattr",
          "file_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
      "artifact_id": "b438496f-7b23-4892-b9e0-3d8f500da715"
    },
    {
      "module_id": "src.llmgenie.modules.cli.utils",
      "path": "src/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.error",
          "gitignore_path.open",
          "line.strip",
          "line.startswith",
          "Path",
          "gitignore_path.exists"
        ],
        "load_config": [
          "logging.error",
          "config_path.exists",
          "Path",
          "toml.load",
          "config_path.open"
        ],
        "read_file_content": [
          "logging.error",
          "path.is_file",
          "Path",
          "path.open",
          "f.read"
        ],
        "write_to_file": [
          "logging.error",
          "base_path.mkdir",
          "logging.warning",
          "logging.info",
          "Path",
          "str",
          "re.sub",
          "file_path.exists",
          "f.write",
          "file_path.open"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "config.get",
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "logging.error",
          "toml.dump",
          "Path",
          "config_path.open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
      "artifact_id": "5bc6901d-e896-47e6-9d25-6448dac45de8"
    },
    {
      "module_id": "src.llmgenie.modules.cli.context",
      "path": "src/llmgenie/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "artifact_id": "f7abf76f-af01-4785-a0c5-573d5527d2d1"
    },
    {
      "module_id": "src.llmgenie.modules.cli.copilot",
      "path": "src/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "logging.error",
          "manager.unload_context_layer",
          "print",
          "open",
          "Path",
          "manager.get_context_status",
          "enumerate",
          "getattr",
          "manager.export_context",
          "hasattr",
          "manager.validate_change",
          "template_path.exists",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "shutil.copy",
          "logging.info",
          "layers.split",
          "initialize_copilot",
          "config_path.exists",
          "smart_suggest",
          "manager.close",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
      "artifact_id": "b74bc04c-4f4f-4329-9734-16bb41934e59"
    },
    {
      "module_id": "src.llmgenie.modules.cli.review",
      "path": "src/llmgenie/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "artifact_id": "902e759c-217f-4010-86cf-c5eef324208a"
    },
    {
      "module_id": "src.llmgenie.modules.cli.__init__",
      "path": "src/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "88e99b50-ec31-46ea-99a7-64ef77907ef1"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers",
      "path": "src/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "hasattr",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
      "artifact_id": "093aa9e1-7c72-4fb1-946c-966617561977"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers_legacy",
      "path": "src/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "logging.error",
          "get_folder_structure",
          "input",
          "os.listdir",
          "json.dumps",
          "args_str.strip",
          "re.match",
          "parse",
          "print",
          "JSONCache",
          "logging.warning",
          "user_input.startswith",
          "m.group",
          "Path",
          "attach_to_llm_request",
          "client.query",
          "cache.close",
          "read_file_content",
          "LLMClient",
          "user_input.lower",
          "sorted",
          "write_to_file",
          "load_gitignore"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
      "artifact_id": "b0f75cb4-919a-49ba-8639-ff7262a1ea30"
    },
    {
      "module_id": "src.llmgenie.modules.cli.analyze_duplicates",
      "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "len",
          "print",
          "filtered_duplicates.items",
          "WorkflowOrchestrator",
          "traceback.print_exc",
          "rec.get",
          "duplication_data.get",
          "duplicates.items",
          "json.dumps",
          "json.dump",
          "analysis.get",
          "open",
          "r.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "enumerate",
          "sorted",
          "getattr",
          "hasattr"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
      "artifact_id": "fb180c0c-e170-450e-8ab2-ba28960083ca"
    },
    {
      "module_id": "src.llmgenie.modules.cli.query",
      "path": "src/llmgenie/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "logging.error",
          "client.query",
          "JSONCache",
          "cache.close",
          "logging.warning",
          "orchestrator.get_context_for_scenario",
          "LLMClient",
          "json.dump",
          "Path",
          "client.query_with_context",
          "create_context_orchestrator",
          "hasattr",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
      "artifact_id": "05848bcb-500b-4ebb-beac-10ed479ad050"
    },
    {
      "module_id": "src.llmgenie.modules.cli.epic",
      "path": "src/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "show_links": [
          "print",
          "load_json",
          "item.get",
          "json.dumps",
          "link_map.items",
          "Path",
          "data.get",
          "str",
          "results.items",
          "epic_path.exists",
          "t.upper",
          "status_filter.lower",
          "epic.get"
        ],
        "add_epic_cli_subparser": [
          "subparsers.add_parser",
          "epic_sub.add_parser",
          "show_links_parser.set_defaults",
          "show_links_parser.add_argument",
          "epic_parser.add_subparsers"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "artifact_id": "b1abb599-d7d3-45b4-931e-0cff16506f04"
    },
    {
      "module_id": "scripts.tools.ollama_queue",
      "path": "scripts/tools/ollama_queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "log_event",
          "docstring": "",
          "line_range": [
            25,
            27
          ],
          "parameters": [
            "event"
          ],
          "decorators": []
        },
        {
          "name": "send_to_ollama",
          "docstring": "",
          "line_range": [
            29,
            37
          ],
          "parameters": [
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            39,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_event": [
          "LOG_FILE.open",
          "datetime.now",
          "f.write"
        ],
        "send_to_ollama": [
          "response.raise_for_status",
          "requests.post",
          "response.json"
        ],
        "main": [
          "result_file.open",
          "send_to_ollama",
          "f.write",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "pathlib",
        "requests"
      ],
      "hash": "e84ed70980f42a0902e13c5b88eea995bdb78cf6dc8e5e66ccb7b85a68dc58a6",
      "artifact_id": "e89086fc-abf8-40d8-8a66-e91fc6e3735e"
    }
  ]
}