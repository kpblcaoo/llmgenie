{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-12T16:33:07.040228Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 82,
      "functions_count": 523,
      "classes_count": 102,
      "call_edges_count": 1415
    },
    "artifact_id": "06facaef-d4b6-4be9-bf0f-3db5ce182dee",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "801206fc-ef70-474e-862b-abc3235cb365",
        "metadata": {}
      },
      {
        "path": ".cursor",
        "type": "directory",
        "artifact_id": "baa0d785-c56e-4fac-9d44-73a788a8259c",
        "metadata": {}
      },
      {
        "path": ".cursor/rules",
        "type": "directory",
        "artifact_id": "97040bec-78e2-4b3f-8707-092e7c23f6c3",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/core",
        "type": "directory",
        "artifact_id": "e16e9bba-4aff-47bf-97d5-bab8c39c61e2",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/core-rules",
        "type": "directory",
        "artifact_id": "6961115a-12bd-48ca-9a92-a9457882734d",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles",
        "type": "directory",
        "artifact_id": "fca8481d-822c-4c07-b2fe-265de7978bd9",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles/220_rules_engineer",
        "type": "directory",
        "artifact_id": "72953d89-3d1c-4336-98d6-e30023ae014c",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/security",
        "type": "directory",
        "artifact_id": "64c8c31b-e610-4e0b-a8bb-0a3947ec11e9",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/templates",
        "type": "directory",
        "artifact_id": "12ccb0d2-c88c-4a45-a6d4-aa913dad4257",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/tools",
        "type": "directory",
        "artifact_id": "39b2bba6-1c2f-4bf2-ac81-9521e198a332",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "b840c51a-1c08-4030-b9e6-2dad0c7eda99",
        "metadata": {}
      },
      {
        "path": "archive",
        "type": "directory",
        "artifact_id": "59d293f7-8ebb-48bf-82ce-4e7e38a37daa",
        "metadata": {}
      },
      {
        "path": "archive/bak",
        "type": "directory",
        "artifact_id": "1425bfb2-f616-4cbf-bd0d-7b3ff0ed5ddf",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak",
        "type": "directory",
        "artifact_id": "0f13bf2c-edb4-4dd3-a8fd-41a105c25161",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor",
        "type": "directory",
        "artifact_id": "0b78745b-0aae-4c1e-82dc-9d96b0ab6da8",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "52b4db5b-d2d2-43c1-896f-f02a6c809529",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/bak",
        "type": "directory",
        "artifact_id": "0844325a-0294-47ef-8911-d885277fe906",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/bak/.cursor",
        "type": "directory",
        "artifact_id": "4bf8d508-3876-4860-8e64-1a0262d40066",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "7e57c763-bb20-4636-8627-e5ec153cbead",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "42bbccc0-a3aa-427c-999c-4e038c775b57",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "dc7a348d-e1ad-45c4-9160-d46d77ac2dec",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/core",
        "type": "directory",
        "artifact_id": "1bcc9a77-0150-4208-8e61-0d7573630bc2",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/roles",
        "type": "directory",
        "artifact_id": "1207a535-fc34-41c4-985e-5ccf5c4a381f",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "970272ad-c9b3-4cdf-aee6-ba4646849099",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/templates",
        "type": "directory",
        "artifact_id": "2c1aadac-490c-4509-a2c6-4bdcd29edb7f",
        "metadata": {}
      },
      {
        "path": "archive/bak/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "b82ebcc0-93aa-443a-b74b-43c3bab15c5b",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules",
        "type": "directory",
        "artifact_id": "675c4b00-9832-4f41-ac7c-bc4389f893d7",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/core",
        "type": "directory",
        "artifact_id": "925fb0d9-a73b-43e2-b9d6-039ca246305d",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/languages",
        "type": "directory",
        "artifact_id": "aafc22c0-eefa-4897-b36b-ab8181751519",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/roles",
        "type": "directory",
        "artifact_id": "2bea355c-2864-404e-9b2c-1bca7ce1fb43",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/security",
        "type": "directory",
        "artifact_id": "5a89a237-ba06-4fcb-991b-929ae1206b6d",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/templates",
        "type": "directory",
        "artifact_id": "dca8d4d4-e690-4705-ad9f-82e8ff0702ec",
        "metadata": {}
      },
      {
        "path": "archive/bak/rules/workflows",
        "type": "directory",
        "artifact_id": "857e5a5a-6269-4cd8-a910-22bcc7ca5786",
        "metadata": {}
      },
      {
        "path": "archive/temp_files",
        "type": "directory",
        "artifact_id": "8fac3055-f541-4758-a4c1-58c167046690",
        "metadata": {}
      },
      {
        "path": "archive/tmp",
        "type": "directory",
        "artifact_id": "a823c1fd-40f4-4cca-a668-85967a40a83d",
        "metadata": {}
      },
      {
        "path": "config",
        "type": "directory",
        "artifact_id": "9ecd70bd-0033-4b0d-95ac-9bbe3d69d863",
        "metadata": {}
      },
      {
        "path": "config/profiles",
        "type": "directory",
        "artifact_id": "5fa58bc0-ad8d-4019-94ea-a5b6eeb9ba8f",
        "metadata": {}
      },
      {
        "path": "config/project_overrides",
        "type": "directory",
        "artifact_id": "6e8bc5c2-27b8-4fe8-a5d8-91fe9dcd918c",
        "metadata": {}
      },
      {
        "path": "core",
        "type": "directory",
        "artifact_id": "46eb8a2b-e6a2-42b0-816e-5733d42c1d03",
        "metadata": {}
      },
      {
        "path": "core/llmgenie",
        "type": "directory",
        "artifact_id": "9d9421e8-1193-4394-aa0b-4ff82faa5209",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/api",
        "type": "directory",
        "artifact_id": "6c69be94-2cb4-4983-94f6-710f8722ecbd",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/api/__init__.py",
        "type": "file",
        "artifact_id": "7e00c3d8-1e69-47ee-a0a9-ab32c6bfa1cf",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/api/handoff_validator.py",
        "type": "file",
        "artifact_id": "9a89720f-4b2e-4700-8cfb-6b386bc3cb8a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/api/main.py",
        "type": "file",
        "artifact_id": "517053f5-5746-4fb7-ac55-018ac4e8dc64",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/api/simple_mcp_server.py",
        "type": "file",
        "artifact_id": "e679b506-4681-4a49-acf7-f37acaf81c01",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/cli",
        "type": "directory",
        "artifact_id": "ebc4d1d1-c60c-4bc9-ad99-a611790432e6",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/cli.py",
        "type": "file",
        "artifact_id": "b37e92b0-96ca-42be-b626-129b099bb42f",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/cli/handoff_cli.py",
        "type": "file",
        "artifact_id": "199d47e7-801e-4b7b-9eb8-87dd4706ce61",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/llm_client.py",
        "type": "file",
        "artifact_id": "649a6cfd-f2f4-4718-aca0-bfdd7887f13a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "4b8ba90e-ad6f-4876-a4a4-1dbb65fee38a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/mcp/__init__.py",
        "type": "file",
        "artifact_id": "c822e974-f4da-4491-8772-cf2e15080ef1",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/mcp/server.py",
        "type": "file",
        "artifact_id": "2c56eb9e-e238-4581-b9b5-335b60a0b1fe",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/mcp/tools.py",
        "type": "file",
        "artifact_id": "53e5fe9f-f508-4860-8782-44a22fe4c63e",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules",
        "type": "directory",
        "artifact_id": "e5ec40e2-8c1d-4d2b-b64e-1e534f5d4c17",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "fac99251-1a25-4ade-b47d-a560adfe88b2",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "5f142277-e69a-42d1-97ae-35508c0bbb07",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "270adc20-7a4a-47f0-965d-a82508f5e246",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "9564bbd6-13db-4275-b186-79831474ea5d",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/context.py",
        "type": "file",
        "artifact_id": "0a018b77-d1ed-40cd-bcef-cfd56f7ca9ca",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "75320256-9c5c-406e-9cfc-c4464f1a4a61",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "6604321e-0958-4e67-8eb2-20d404dfa2c7",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "71308ff1-b048-4bc1-839e-7ad3b1f45cfd",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "2ba59165-54ed-4231-8f2e-23447bb4c8f8",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "abef869e-b85c-4408-b608-de6c07e8cfab",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "7e61ca3a-8600-45e0-8ebe-7167e8138e4a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/query.py",
        "type": "file",
        "artifact_id": "c13db684-1472-42c7-b668-27a978865b2a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/review.py",
        "type": "file",
        "artifact_id": "c61fc9ea-5af7-4792-89ae-44d0dd4c12f1",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "516f9676-b098-4367-b4dd-53559a92166a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "bfc2b64f-3c16-4683-805f-a5f426ab4cee",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "9349b6bd-09e7-40d4-90fb-713b9185de0f",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "74895029-3a8b-4af3-b831-a06812cd8c25",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "32df0201-6591-4830-963d-998b077c03cb",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/modules/commands/services.py",
        "type": "file",
        "artifact_id": "54884dc9-c817-4300-bae4-1bf5e208b029",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "3af9fa4a-fc59-49d4-8f6b-9caf0b0f00a0",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "ad19bf80-ead7-4cc9-939a-f48aded822b2",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/agent_orchestrator.py",
        "type": "file",
        "artifact_id": "fc81a5b1-9cf0-4c68-baef-a2c871352106",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "22ceed09-fd97-464e-8557-ce0a19d35489",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "28ebdce7-e23d-49c7-9088-f6a7108f5559",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/core/coordination_types.py",
        "type": "file",
        "artifact_id": "324651b5-9326-427d-8a5d-efdaef50a836",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/core/execution_modes.py",
        "type": "file",
        "artifact_id": "991a3f3c-06a9-4479-812c-1ecf28b83831",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/core/task_models.py",
        "type": "file",
        "artifact_id": "b59c39e7-b4dd-4065-9518-50cff55472f4",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "e5f72607-f41d-4662-b4a1-f5ef21dba31e",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "23758613-933e-47c2-8289-63822ef0e435",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/executors/collaborative_executor.py",
        "type": "file",
        "artifact_id": "95091ee6-277c-42c1-8818-fad34285bad2",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/executors/parallel_executor.py",
        "type": "file",
        "artifact_id": "b042f09d-0b71-4747-8393-3d4bf912944e",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/executors/sequential_executor.py",
        "type": "file",
        "artifact_id": "7867bf0b-283f-46ad-8abe-eca13f98314e",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/orchestration/orchestrator.py",
        "type": "file",
        "artifact_id": "a04b91b9-e95e-4d67-a3a9-a2bd03d463e3",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "3b66d97f-d443-4677-8946-a823ac36f105",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router/__init__.py",
        "type": "file",
        "artifact_id": "1d8a12a1-90cd-46bd-bb1f-7f26cacdacdb",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router/model_router.py",
        "type": "file",
        "artifact_id": "aec6eb64-35a1-4bc8-b813-a8fe6f5ed87a",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router/quality_intelligence.py",
        "type": "file",
        "artifact_id": "c8e1132c-59a6-46d9-846e-7352812ef6cf",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router/quality_validator.py",
        "type": "file",
        "artifact_id": "a66b48aa-a470-4b32-be29-8942d1e16fd2",
        "metadata": {}
      },
      {
        "path": "core/llmgenie/task_router/task_classifier.py",
        "type": "file",
        "artifact_id": "c921961b-3669-423e-a772-619c19f6cf62",
        "metadata": {}
      },
      {
        "path": "core/rag_context",
        "type": "directory",
        "artifact_id": "6d579af9-3a72-47f2-912a-573979c5d23f",
        "metadata": {}
      },
      {
        "path": "core/rag_context/__init__.py",
        "type": "file",
        "artifact_id": "ba7c7b74-6074-4edb-b721-f4cc15141b99",
        "metadata": {}
      },
      {
        "path": "core/rag_context/active_knowledge_integration.py",
        "type": "file",
        "artifact_id": "b96c4c8d-ea64-4cd1-80d8-06d03ccb8254",
        "metadata": {}
      },
      {
        "path": "core/rag_context/cli_interface.py",
        "type": "file",
        "artifact_id": "ffef96b5-214b-4ca2-9827-488129154437",
        "metadata": {}
      },
      {
        "path": "core/rag_context/code_discovery.py",
        "type": "file",
        "artifact_id": "0ad1c742-5a3d-4bd3-b66d-d96161b82680",
        "metadata": {}
      },
      {
        "path": "core/rag_context/config.py",
        "type": "file",
        "artifact_id": "f686adf2-e8a8-4e5d-bbfd-26d2e5d08317",
        "metadata": {}
      },
      {
        "path": "core/rag_context/cursor_intelligence.py",
        "type": "file",
        "artifact_id": "80a46a26-ec2d-4a0c-a3c8-8f14bc1e057b",
        "metadata": {}
      },
      {
        "path": "core/rag_context/data",
        "type": "directory",
        "artifact_id": "72b2252f-6da3-4ff0-be05-1c93d171d4d2",
        "metadata": {}
      },
      {
        "path": "core/rag_context/data/analytics",
        "type": "directory",
        "artifact_id": "cf3442b0-69c6-48de-ac6e-b7d751d3bfaf",
        "metadata": {}
      },
      {
        "path": "core/rag_context/embedder.py",
        "type": "file",
        "artifact_id": "b66bee23-691c-48a1-a105-ee0ea2014f95",
        "metadata": {}
      },
      {
        "path": "core/rag_context/enhanced_logging_intelligence.py",
        "type": "file",
        "artifact_id": "3c079806-0ab2-482c-9845-58a2643540f9",
        "metadata": {}
      },
      {
        "path": "core/rag_context/enhancer.py",
        "type": "file",
        "artifact_id": "ba8eb541-234a-483c-b688-ca7f32ffbcf8",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "e293d08b-ed52-4038-abc0-33452f5f6682",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/__init__.py",
        "type": "file",
        "artifact_id": "3132d559-bd07-4f03-8ddd-d1e2a5b3f1ad",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/auto_logger.py",
        "type": "file",
        "artifact_id": "8f8d8099-6b29-404e-badf-17a2bb53db92",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/cli_tool.py",
        "type": "file",
        "artifact_id": "4ba682e4-1d73-4b50-bc8d-740b4ad7efb2",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/http_api.py",
        "type": "file",
        "artifact_id": "15875055-7441-49ca-9d90-7950934a175f",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/mcp_server.py",
        "type": "file",
        "artifact_id": "d40275df-60fc-4d05-8e41-745f36d5c3bf",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "e3f65a66-568f-4a24-9b13-ae125875ca8c",
        "metadata": {}
      },
      {
        "path": "core/rag_context/interfaces/websocket_server.py",
        "type": "file",
        "artifact_id": "518c6a49-ea5e-45bb-ab3a-ae81e545968b",
        "metadata": {}
      },
      {
        "path": "core/rag_context/knowledge_extractor.py",
        "type": "file",
        "artifact_id": "9bba3c5a-f6c9-431f-b2ed-ff1219f4f92b",
        "metadata": {}
      },
      {
        "path": "core/rag_context/loader.py",
        "type": "file",
        "artifact_id": "ac12ce77-67cc-4a00-a1d9-4d4580ffecd3",
        "metadata": {}
      },
      {
        "path": "core/rag_context/retriever.py",
        "type": "file",
        "artifact_id": "ad0d6633-1c32-4855-8331-f0cf753d1e5e",
        "metadata": {}
      },
      {
        "path": "core/rag_context/session_context_manager.py",
        "type": "file",
        "artifact_id": "30da76f4-b6fe-4dca-be17-7640ed272364",
        "metadata": {}
      },
      {
        "path": "core/struct_tools",
        "type": "directory",
        "artifact_id": "d9b033dd-506a-43d9-9647-fdca053110ea",
        "metadata": {}
      },
      {
        "path": "core/struct_tools/__init__.py",
        "type": "file",
        "artifact_id": "40ef7aa3-d0c3-486a-857f-cd3d76e848e1",
        "metadata": {}
      },
      {
        "path": "core/struct_tools/cli_interface.py",
        "type": "file",
        "artifact_id": "09acd830-6a74-417e-94e4-8b18e5733049",
        "metadata": {}
      },
      {
        "path": "core/struct_tools/mcp_interface.py",
        "type": "file",
        "artifact_id": "75fec8d7-4e85-48a4-80a4-709c1b78fdc0",
        "metadata": {}
      },
      {
        "path": "core/struct_tools/structure_analyzer.py",
        "type": "file",
        "artifact_id": "b51b952d-9d1a-445a-bb07-09303ee94e3a",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "218b4b00-1d24-4440-b871-b07004f709be",
        "metadata": {}
      },
      {
        "path": "docs/architecture",
        "type": "directory",
        "artifact_id": "9de40497-394f-4f73-be42-3d8c97cf0e67",
        "metadata": {}
      },
      {
        "path": "docs/architecture/phase2",
        "type": "directory",
        "artifact_id": "68fba139-9339-4c9a-bb89-c977cff7f619",
        "metadata": {}
      },
      {
        "path": "docs/archive",
        "type": "directory",
        "artifact_id": "0465267f-256c-46ab-8dd5-b891fd209870",
        "metadata": {}
      },
      {
        "path": "docs/archive/analysis_reports",
        "type": "directory",
        "artifact_id": "d26c13b7-c3fd-4dd0-9ae9-967fdaf56069",
        "metadata": {}
      },
      {
        "path": "docs/archive/archive_analysis",
        "type": "directory",
        "artifact_id": "43301d52-4068-4e7d-96e1-22ed91817929",
        "metadata": {}
      },
      {
        "path": "docs/archive/archive_analysis/01_architecture_patterns",
        "type": "directory",
        "artifact_id": "ef54d9fd-2023-4555-b16c-98b4af07553e",
        "metadata": {}
      },
      {
        "path": "docs/archive/archived_memos",
        "type": "directory",
        "artifact_id": "a0e2ae52-4d91-4a17-af2e-019062a2cdc3",
        "metadata": {}
      },
      {
        "path": "docs/archive/examples",
        "type": "directory",
        "artifact_id": "7b0b8c50-af23-45de-9028-669546396b2f",
        "metadata": {}
      },
      {
        "path": "docs/archive/internal",
        "type": "directory",
        "artifact_id": "8703eedb-7c57-4be4-8da3-55546aaeb93e",
        "metadata": {}
      },
      {
        "path": "docs/archive/internal/memos",
        "type": "directory",
        "artifact_id": "597197fb-ab95-4958-939c-98b87b4bc048",
        "metadata": {}
      },
      {
        "path": "docs/archive/strategic_docs",
        "type": "directory",
        "artifact_id": "adf8bc91-0e21-4492-921c-2b0e02c86e22",
        "metadata": {}
      },
      {
        "path": "docs/configs",
        "type": "directory",
        "artifact_id": "47c5a0b3-125c-4656-a12b-3b32bf800a40",
        "metadata": {}
      },
      {
        "path": "docs/decisions",
        "type": "directory",
        "artifact_id": "8a4d72c1-00a0-45e1-a396-21ce8f734d18",
        "metadata": {}
      },
      {
        "path": "docs/deployment",
        "type": "directory",
        "artifact_id": "f48aa53e-85ea-426d-a57e-d704b7605f5a",
        "metadata": {}
      },
      {
        "path": "docs/epics",
        "type": "directory",
        "artifact_id": "fab385a3-2d0f-4520-bdc4-83e4a23de3ba",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "251cc42a-41d5-4801-b3a2-400bdc59cf77",
        "metadata": {}
      },
      {
        "path": "docs/generated",
        "type": "directory",
        "artifact_id": "6c20fd5a-6837-43bf-949a-ff19a0663b4c",
        "metadata": {}
      },
      {
        "path": "docs/guides",
        "type": "directory",
        "artifact_id": "f7cf5a71-183a-4af9-99ed-6752bfd440f5",
        "metadata": {}
      },
      {
        "path": "docs/index",
        "type": "directory",
        "artifact_id": "01825060-8373-4b2b-8f47-8f38cb4a5ed7",
        "metadata": {}
      },
      {
        "path": "docs/knowledge",
        "type": "directory",
        "artifact_id": "82c53e0e-ced7-485b-83f3-4a9725e462a4",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/models",
        "type": "directory",
        "artifact_id": "659dd26e-9cce-465a-b7f8-fb6669f4e1f6",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/techs",
        "type": "directory",
        "artifact_id": "630795f2-2946-4953-a68d-a064bb3a224c",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/templates",
        "type": "directory",
        "artifact_id": "5bbdac98-2d12-4957-b351-4ec9fa29f118",
        "metadata": {}
      },
      {
        "path": "docs/mamay_onboarding",
        "type": "directory",
        "artifact_id": "1d8c0b51-5032-4d9d-85ec-58f91bbdc472",
        "metadata": {}
      },
      {
        "path": "docs/memos",
        "type": "directory",
        "artifact_id": "fc211752-9069-40a7-baed-30348c9a9337",
        "metadata": {}
      },
      {
        "path": "docs/memos/decisions",
        "type": "directory",
        "artifact_id": "1bbd2ad6-2113-4657-b1a5-6215a13272f7",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics",
        "type": "directory",
        "artifact_id": "4ec34368-effd-4881-9e98-cbf8653f4550",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic1",
        "type": "directory",
        "artifact_id": "d2fb1d2c-7430-4517-abfd-377b02a6c43e",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic2",
        "type": "directory",
        "artifact_id": "7fd16abf-203c-4b53-9ac9-a27faf2f5b53",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic3",
        "type": "directory",
        "artifact_id": "45042e24-c8d3-4710-ab56-f4c2beba18a8",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic4",
        "type": "directory",
        "artifact_id": "0fbbbf5b-cd53-49d1-afb8-a5121a79afab",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic5",
        "type": "directory",
        "artifact_id": "50699f4a-13d9-4935-a427-dc9bc6698918",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic6",
        "type": "directory",
        "artifact_id": "f19083c8-3f07-4650-86d8-09d75f35b945",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/epic7",
        "type": "directory",
        "artifact_id": "a5684449-3299-4c94-a387-a605d5501165",
        "metadata": {}
      },
      {
        "path": "docs/memos/epics/master",
        "type": "directory",
        "artifact_id": "e4278210-3339-4771-b186-4dcdbd15bd29",
        "metadata": {}
      },
      {
        "path": "docs/notes",
        "type": "directory",
        "artifact_id": "4c4c1632-3e21-4ab5-bec5-b34b3f806afb",
        "metadata": {}
      },
      {
        "path": "docs/notes/llm_analisys",
        "type": "directory",
        "artifact_id": "fc3788f0-1abe-41f4-a45e-f8112439a157",
        "metadata": {}
      },
      {
        "path": "docs/orchestration",
        "type": "directory",
        "artifact_id": "94a49855-fb5e-4a00-a39b-f52590cb2334",
        "metadata": {}
      },
      {
        "path": "docs/plans",
        "type": "directory",
        "artifact_id": "8bc63ea4-d37e-4a25-8cf6-ada442e33c36",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_multiagent_platform",
        "type": "directory",
        "artifact_id": "4de7b86c-1c9d-4ffb-a67e-09c62b695f8f",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_multiagent_platform/epic_advanced_capabilities",
        "type": "directory",
        "artifact_id": "1404f1af-d3f6-4d91-ba22-9a47188fe54f",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_multiagent_platform/epic_foundation",
        "type": "directory",
        "artifact_id": "f0282a8f-818d-4917-b1e8-181929564c72",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_multiagent_platform/epic_platform_integration",
        "type": "directory",
        "artifact_id": "f6629f79-add1-4a68-baf4-9887aa657d30",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_rag_context",
        "type": "directory",
        "artifact_id": "6add05b6-5e12-4faa-8182-8ec95079e612",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_rag_context/epic_knowledge_preservation",
        "type": "directory",
        "artifact_id": "2efe465e-7489-4f55-857b-4dff64a630e1",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_rag_context/epic_rag_context_plan",
        "type": "directory",
        "artifact_id": "fc7080a8-651c-4b9e-bd4f-347be53ee5e4",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_rag_context/epic_universal_interfaces",
        "type": "directory",
        "artifact_id": "4f735297-93d0-4ed4-944c-f5734bedf7ed",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_review",
        "type": "directory",
        "artifact_id": "00ce046c-5157-4e38-9a44-e8b99dccd507",
        "metadata": {}
      },
      {
        "path": "docs/plans/master_review/epic_review_v3",
        "type": "directory",
        "artifact_id": "8e9e34aa-24dc-4ed6-bec1-455eb97913eb",
        "metadata": {}
      },
      {
        "path": "docs/solutions",
        "type": "directory",
        "artifact_id": "c2016b02-c54b-4a35-b851-9b521f22a02f",
        "metadata": {}
      },
      {
        "path": "docs/standards",
        "type": "directory",
        "artifact_id": "47a1b122-4334-4bf1-b2b2-1d1c3bfa74a4",
        "metadata": {}
      },
      {
        "path": "docs/taskrouter",
        "type": "directory",
        "artifact_id": "796425f2-0d07-4711-8e3b-8450f95861de",
        "metadata": {}
      },
      {
        "path": "docs/workflows",
        "type": "directory",
        "artifact_id": "7d9b712b-81bb-47fa-84a6-238fba2ec5cd",
        "metadata": {}
      },
      {
        "path": "logs",
        "type": "directory",
        "artifact_id": "52a9d014-3a64-4667-8860-f69d79c7d000",
        "metadata": {}
      },
      {
        "path": "logs/cursor_agent",
        "type": "directory",
        "artifact_id": "ab149883-6afd-454b-aca3-4a87c3ba6c66",
        "metadata": {}
      },
      {
        "path": "logs/phase2_integration",
        "type": "directory",
        "artifact_id": "afcd1e2a-982e-45b4-bddf-03981ae3bceb",
        "metadata": {}
      },
      {
        "path": "projects",
        "type": "directory",
        "artifact_id": "44f26a5e-d782-465e-8435-5b89291b6b62",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "e6d88280-b34e-4bac-bc4c-34a70e13ad46",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index",
        "type": "directory",
        "artifact_id": "a3652a9d-7697-40ed-832b-e2b0af788329",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration",
        "type": "directory",
        "artifact_id": "70f000fd-43a5-4ca7-8f5e-995b337cd9bb",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/core",
        "type": "directory",
        "artifact_id": "38a3b8c0-62ba-4ce1-ae1e-56593c750adc",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/executors",
        "type": "directory",
        "artifact_id": "2fdd0d65-7c2d-4e56-8c18-68ebe247d763",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/integration",
        "type": "directory",
        "artifact_id": "192b4555-a2ae-423c-8794-bd8f231b59d9",
        "metadata": {}
      },
      {
        "path": "tests/integration",
        "type": "directory",
        "artifact_id": "7784a231-36f9-4cbb-9235-0610402a64de",
        "metadata": {}
      },
      {
        "path": "tests/orchestration",
        "type": "directory",
        "artifact_id": "8e1cea06-62be-43c6-934e-70d6d1db4b0a",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "2afb99c3-e87e-4a3f-bec4-073578651b76",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core",
        "type": "directory",
        "artifact_id": "2cf47879-c936-4fc1-b11a-7ee5779120fe",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "9e462bd8-cd18-4929-97da-c639d0a5c201",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/test_execution_modes.py",
        "type": "file",
        "artifact_id": "fbde9c48-4bd0-4af2-917a-304c6fde2f7b",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/test_task_models.py",
        "type": "file",
        "artifact_id": "f2df06ef-9197-481a-91f3-0943e9aafe39",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors",
        "type": "directory",
        "artifact_id": "b55ab00f-42b3-49b1-b6bd-5e2f5ba67ebd",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "47018131-1152-4010-895a-dc36bfc0c179",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors/test_parallel_executor.py",
        "type": "file",
        "artifact_id": "48c977be-a14e-4d2a-a52d-cf53a1b5bfdb",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/fixtures.py",
        "type": "file",
        "artifact_id": "da1f11b3-40e8-41cb-a6be-92d3166ee5fa",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration",
        "type": "directory",
        "artifact_id": "026d4742-6a1f-4a88-abbc-17c29b879bd6",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration/__init__.py",
        "type": "file",
        "artifact_id": "d87adc17-d03c-426d-b4f9-3d27d954589c",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration/test_epic5_components.py",
        "type": "file",
        "artifact_id": "13f2c53f-49c9-4ced-8faa-559990de83c5",
        "metadata": {}
      },
      {
        "path": "tests/test_api.py",
        "type": "file",
        "artifact_id": "4e8ab502-dc2b-4f4a-8b22-54664a7fd8a4",
        "metadata": {}
      },
      {
        "path": "tests/test_cli.py",
        "type": "file",
        "artifact_id": "edbc55b9-53a5-421d-b323-6d99118e7ada",
        "metadata": {}
      },
      {
        "path": "tests/test_ollama_function_calling.py",
        "type": "file",
        "artifact_id": "d1b4a89a-f5ce-4e43-ba3c-b4b4b66e7dbe",
        "metadata": {}
      },
      {
        "path": "tests/test_self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "f3de6d59-6b1d-4434-a24c-c176270fe6ce",
        "metadata": {}
      },
      {
        "path": "tests/test_smoke.py",
        "type": "file",
        "artifact_id": "5db024f1-0820-4b83-a693-4dbd35cb0061",
        "metadata": {}
      },
      {
        "path": "tests/test_task_router.py",
        "type": "file",
        "artifact_id": "972d4a84-c21d-413e-bf04-d24486db2b9c",
        "metadata": {}
      },
      {
        "path": "unused",
        "type": "directory",
        "artifact_id": "c7ebf082-2d96-4cba-8ea6-9588c7011a2b",
        "metadata": {}
      },
      {
        "path": "unused/.cache",
        "type": "directory",
        "artifact_id": "712b25c4-1883-4530-bfc1-9442d94fb1da",
        "metadata": {}
      },
      {
        "path": "unused/.cache/rag_embeddings",
        "type": "directory",
        "artifact_id": "e6a981bf-9890-4b34-8df7-2895e4389a25",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "tests.test_task_router",
      "path": "tests/test_task_router.py",
      "category": "test",
      "functions": 35,
      "classes": 5,
      "summary": "Comprehensive tests for Epic 5 TaskRouter implementation",
      "artifact_id": "ddbb3a42-a4cb-4310-b17f-ae1133c89e9b"
    },
    {
      "module_id": "tests.test_ollama_function_calling",
      "path": "tests/test_ollama_function_calling.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "Test script for Ollama function calling capability",
      "artifact_id": "4eb83ed4-4c6b-4ccc-bc27-c252d4ef084c"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "Tests for llmgenie FastAPI application",
      "artifact_id": "5b0f799c-0661-4762-9faf-c783edafeb29"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Tests for llmgenie CLI module",
      "artifact_id": "6a306973-77f1-4d9a-95d4-6a0ab609936d"
    },
    {
      "module_id": "tests.test_self_refine_pipeline",
      "path": "tests/test_self_refine_pipeline.py",
      "category": "test",
      "functions": 20,
      "classes": 3,
      "summary": "Tests for Self-Refine Pipeline System",
      "artifact_id": "cc9d89b3-b99a-4625-a876-f3e1b89115b1"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0e8ec91e-f651-4888-9e19-435b91134e24"
    },
    {
      "module_id": "core.struct_tools.structure_analyzer",
      "path": "core/struct_tools/structure_analyzer.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json",
      "artifact_id": "bb55b0e9-3eb2-49f0-9a99-3aeeda873720"
    },
    {
      "module_id": "core.struct_tools.mcp_interface",
      "path": "core/struct_tools/mcp_interface.py",
      "category": "core",
      "functions": 16,
      "classes": 6,
      "summary": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "0f5b47cf-4ca0-40fd-abd0-0d0ec1898be9"
    },
    {
      "module_id": "core.struct_tools.__init__",
      "path": "core/struct_tools/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "9113fa89-7e1f-4bd2-b617-9642b0daea6b"
    },
    {
      "module_id": "core.struct_tools.cli_interface",
      "path": "core/struct_tools/cli_interface.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "a272ad91-d9fc-4d45-bf3b-5fa1362a396c"
    },
    {
      "module_id": "core.rag_context.active_knowledge_integration",
      "path": "core/rag_context/active_knowledge_integration.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation",
      "artifact_id": "68688b06-d3dd-4ce1-887a-0df2d8aeb62d"
    },
    {
      "module_id": "core.rag_context.cursor_intelligence",
      "path": "core/rag_context/cursor_intelligence.py",
      "category": "core",
      "functions": 15,
      "classes": 4,
      "summary": "Cursor Intelligence System for Workflow Enhancement",
      "artifact_id": "abfa87aa-5fc0-4d4d-88d8-5cce9240d2a6"
    },
    {
      "module_id": "core.rag_context.knowledge_extractor",
      "path": "core/rag_context/knowledge_extractor.py",
      "category": "core",
      "functions": 8,
      "classes": 3,
      "summary": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation",
      "artifact_id": "794aa89e-2b8a-48ce-abe5-026cc9f5cfa3"
    },
    {
      "module_id": "core.rag_context.code_discovery",
      "path": "core/rag_context/code_discovery.py",
      "category": "core",
      "functions": 10,
      "classes": 2,
      "summary": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation",
      "artifact_id": "84b8f9ec-4238-4fa7-a73b-a7fbfd5be1e6"
    },
    {
      "module_id": "core.rag_context.embedder",
      "path": "core/rag_context/embedder.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "artifact_id": "7a19cdd9-4c22-4b93-904b-08fb3577cf38"
    },
    {
      "module_id": "core.rag_context.enhanced_logging_intelligence",
      "path": "core/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "functions": 3,
      "classes": 2,
      "summary": "",
      "artifact_id": "bf6853f1-7cb3-45b0-976b-1bc19ee5a771"
    },
    {
      "module_id": "core.rag_context.enhancer",
      "path": "core/rag_context/enhancer.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "0dc98c86-4ad6-4879-a8f5-35315c40cc5f"
    },
    {
      "module_id": "core.rag_context.loader",
      "path": "core/rag_context/loader.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "2d540399-398b-48a4-aa64-3c94c173b058"
    },
    {
      "module_id": "core.rag_context.__init__",
      "path": "core/rag_context/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Enhancement System",
      "artifact_id": "15c6f878-f13c-4118-9b64-c8bfd8490b0d"
    },
    {
      "module_id": "core.rag_context.config",
      "path": "core/rag_context/config.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "fd0e4d23-c73f-449d-98d3-d6fa60231158"
    },
    {
      "module_id": "core.rag_context.session_context_manager",
      "path": "core/rag_context/session_context_manager.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Session Context Manager - Phase 4A.2.3 Safe Implementation",
      "artifact_id": "95ffd43f-b5f3-4845-9037-4a0bf35a1fda"
    },
    {
      "module_id": "core.rag_context.retriever",
      "path": "core/rag_context/retriever.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "artifact_id": "8680084b-dbb8-446c-875c-cda07f4a45a8"
    },
    {
      "module_id": "core.rag_context.cli_interface",
      "path": "core/rag_context/cli_interface.py",
      "category": "core",
      "functions": 9,
      "classes": 0,
      "summary": "Enhanced CLI Interface for RAG Context Management",
      "artifact_id": "e97f1cc1-5c47-447b-a1d0-4244c1d43c77"
    },
    {
      "module_id": "core.llmgenie.llm_client",
      "path": "core/llmgenie/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "ab5eccaf-b2ba-45b3-a4e6-04c96d17048a"
    },
    {
      "module_id": "core.llmgenie.cli",
      "path": "core/llmgenie/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "b33493d5-8adc-4bc9-bb5b-b5e6049077cb"
    },
    {
      "module_id": "core.rag_context.interfaces.self_refine_pipeline",
      "path": "core/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "functions": 12,
      "classes": 3,
      "summary": "Self-Refine Pipeline with MCP Tools Integration",
      "artifact_id": "28b77e7e-cee7-4fe7-894d-0b39f6800c33"
    },
    {
      "module_id": "core.rag_context.interfaces.websocket_server",
      "path": "core/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "artifact_id": "1fb343cc-3397-4926-bf75-ac36e1aea88e"
    },
    {
      "module_id": "core.rag_context.interfaces.http_api",
      "path": "core/rag_context/interfaces/http_api.py",
      "category": "core",
      "functions": 15,
      "classes": 6,
      "summary": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "artifact_id": "02514993-cf23-4d57-8bf5-0018ed8a4055"
    },
    {
      "module_id": "core.rag_context.interfaces.mcp_server",
      "path": "core/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop",
      "artifact_id": "2375dc33-c3e0-489e-907e-f44cb88915a9"
    },
    {
      "module_id": "core.rag_context.interfaces.__init__",
      "path": "core/rag_context/interfaces/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
      "artifact_id": "b8dbdcc7-3d98-4ea3-be7b-f298f6748b7f"
    },
    {
      "module_id": "core.rag_context.interfaces.cli_tool",
      "path": "core/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "artifact_id": "424c3462-22ac-459b-94a0-1db0cda83167"
    },
    {
      "module_id": "core.rag_context.interfaces.auto_logger",
      "path": "core/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "Auto Logger for MCP Server Integration",
      "artifact_id": "a7646a9d-1b11-4228-8364-4795a821300c"
    },
    {
      "module_id": "core.llmgenie.mcp.tools",
      "path": "core/llmgenie/mcp/tools.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "MCP Tools Implementation",
      "artifact_id": "f860cf0d-92ca-471f-96d2-ce6292a5dc77"
    },
    {
      "module_id": "core.llmgenie.mcp.server",
      "path": "core/llmgenie/mcp/server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "457af299-5f67-49d1-a84f-66380ceec498"
    },
    {
      "module_id": "core.llmgenie.mcp.__init__",
      "path": "core/llmgenie/mcp/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "763fa446-7e7f-40f3-9b9d-8496d91cfe15"
    },
    {
      "module_id": "core.llmgenie.api.simple_mcp_server",
      "path": "core/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Simple MCP Server for llmgenie",
      "artifact_id": "d55d0d9f-6344-4890-b0b8-d7267daa7f0a"
    },
    {
      "module_id": "core.llmgenie.api.handoff_validator",
      "path": "core/llmgenie/api/handoff_validator.py",
      "category": "core",
      "functions": 9,
      "classes": 6,
      "summary": "Handoff validation module for llmgenie",
      "artifact_id": "a133d315-4ad9-4c50-90a6-506c634653cd"
    },
    {
      "module_id": "core.llmgenie.api.__init__",
      "path": "core/llmgenie/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "llmgenie API module",
      "artifact_id": "145c068f-3818-4aa8-92ba-f730c2b78039"
    },
    {
      "module_id": "core.llmgenie.api.main",
      "path": "core/llmgenie/api/main.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "FastAPI main application for llmgenie",
      "artifact_id": "81ed5896-8be4-4c63-9d5a-095543d8821c"
    },
    {
      "module_id": "core.llmgenie.orchestration.__init__",
      "path": "core/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Multi-Agent Orchestration Package",
      "artifact_id": "ef852c89-efde-4fef-bc87-f2a47ed8bcb7"
    },
    {
      "module_id": "core.llmgenie.orchestration.orchestrator",
      "path": "core/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Multi-Agent Orchestrator",
      "artifact_id": "928523d4-cbbf-447f-a540-534fd184532d"
    },
    {
      "module_id": "core.llmgenie.orchestration.agent_orchestrator",
      "path": "core/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "functions": 14,
      "classes": 5,
      "summary": "Agent Orchestrator for Multi-Agent Task Coordination",
      "artifact_id": "4edb1efc-9f9b-4cee-af7f-73b5fef49a29"
    },
    {
      "module_id": "core.llmgenie.cli.handoff_cli",
      "path": "core/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "functions": 5,
      "classes": 0,
      "summary": "CLI tool for handoff validation",
      "artifact_id": "399a3821-4bbf-4119-96c8-0868e96c228e"
    },
    {
      "module_id": "core.llmgenie.task_router.quality_intelligence",
      "path": "core/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "functions": 9,
      "classes": 4,
      "summary": "Quality Intelligence System for Smart LLM Routing",
      "artifact_id": "6e522ccc-04e8-49c2-85fd-b5080adfa9ea"
    },
    {
      "module_id": "core.llmgenie.task_router.task_classifier",
      "path": "core/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "Task Classification Engine for Smart LLM Routing",
      "artifact_id": "202c0a1c-631b-4b3f-8c03-85e2d3e134e7"
    },
    {
      "module_id": "core.llmgenie.task_router.model_router",
      "path": "core/llmgenie/task_router/model_router.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Model Router for Smart LLM Selection",
      "artifact_id": "afb21b5e-da8e-4229-b140-8278c2d943f4"
    },
    {
      "module_id": "core.llmgenie.task_router.__init__",
      "path": "core/llmgenie/task_router/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Task Router Module for LLMGenie",
      "artifact_id": "688f941b-49f9-4be7-8349-a082d8591272"
    },
    {
      "module_id": "core.llmgenie.task_router.quality_validator",
      "path": "core/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Quality Validator for LLM Output Assessment",
      "artifact_id": "db73e962-d0a1-4961-b05a-378ed6c8939d"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.execution_modes",
      "path": "core/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Execution modes for multi-agent orchestration",
      "artifact_id": "082be011-389d-490c-964c-06140d4d5c07"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.__init__",
      "path": "core/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Core types and models for Agent Orchestration",
      "artifact_id": "3be7a584-e315-4d08-ba5e-c61c6e786251"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.coordination_types",
      "path": "core/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Agent coordination types for orchestration",
      "artifact_id": "a281a38a-c36a-47f8-ae1b-8988b41003c0"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.task_models",
      "path": "core/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Task data models for orchestration",
      "artifact_id": "67a2bf38-d34a-43ba-8a37-7b2c6e3b5b43"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.collaborative_executor",
      "path": "core/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Collaborative execution strategy",
      "artifact_id": "396c085d-188e-4536-a6ef-051cb8c94191"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.parallel_executor",
      "path": "core/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "Parallel execution strategy",
      "artifact_id": "0d2b4a2b-2429-4696-bdb0-84010334b6ff"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.sequential_executor",
      "path": "core/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Sequential execution strategy",
      "artifact_id": "916353b3-34cd-4ea0-b07e-417d59e199bc"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.__init__",
      "path": "core/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Execution strategies for multi-agent orchestration",
      "artifact_id": "54936c61-8200-40ca-b0c1-0a9d0884a9d9"
    },
    {
      "module_id": "core.llmgenie.modules.commands.metrics",
      "path": "core/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "eebb7716-b1d2-454d-a547-2e79bc8351f3"
    },
    {
      "module_id": "core.llmgenie.modules.commands.services",
      "path": "core/llmgenie/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "bf51c3b0-6e73-4274-88af-65a5aff64cf2"
    },
    {
      "module_id": "core.llmgenie.modules.commands.__init__",
      "path": "core/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5f264c06-dc62-4023-80ca-4a7a3138f485"
    },
    {
      "module_id": "core.llmgenie.modules.commands.queue",
      "path": "core/llmgenie/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2b1dcbcf-f590-40e0-84cf-0d33811f4783"
    },
    {
      "module_id": "core.llmgenie.modules.cli.audit",
      "path": "core/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "54707fbb-9bcc-40cf-a5ac-40fd0465506f"
    },
    {
      "module_id": "core.llmgenie.modules.cli.utils",
      "path": "core/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "92ffc8ca-0b3d-4aa7-910f-3c25836a4a6b"
    },
    {
      "module_id": "core.llmgenie.modules.cli.dogfood",
      "path": "core/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ad3e86cd-0536-49ad-87c2-042b6deedd82"
    },
    {
      "module_id": "core.llmgenie.modules.cli.handlers_legacy",
      "path": "core/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "57e6ee1e-a0f9-470a-addf-a42e1c5d75dc"
    },
    {
      "module_id": "core.llmgenie.modules.cli.analyze_duplicates",
      "path": "core/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3dcc1cb7-07e2-42e1-9ccb-02a249aa4000"
    },
    {
      "module_id": "core.llmgenie.modules.cli.__init__",
      "path": "core/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "edf8d5e0-3275-4ab5-9628-c3f7643cee19"
    },
    {
      "module_id": "core.llmgenie.modules.cli.review",
      "path": "core/llmgenie/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2bc24bff-0dd8-40db-853e-a581e3d600fc"
    },
    {
      "module_id": "core.llmgenie.modules.cli.context",
      "path": "core/llmgenie/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "404c30d3-83a7-41b3-9699-d9887d3365ce"
    },
    {
      "module_id": "core.llmgenie.modules.cli.query",
      "path": "core/llmgenie/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d0e8e6b1-f10e-45ee-94ed-19a2f318e548"
    },
    {
      "module_id": "core.llmgenie.modules.cli.copilot",
      "path": "core/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b42586a4-0858-42a6-a2b2-95e69bd7b392"
    },
    {
      "module_id": "core.llmgenie.modules.cli.parse",
      "path": "core/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5d8a7aa7-8fa0-48f6-9262-cfc5d6e4a276"
    },
    {
      "module_id": "core.llmgenie.modules.cli.epic",
      "path": "core/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "06fc318e-0018-4c8d-9aa0-8aaaadd5d768"
    },
    {
      "module_id": "core.llmgenie.modules.cli.handlers",
      "path": "core/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "eecdfbd7-a9e2-4131-8692-d71deb019bf8"
    },
    {
      "module_id": "tests.orchestration.__init__",
      "path": "tests/orchestration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Modular tests for Multi-Agent Orchestration",
      "artifact_id": "f468376b-f73a-4bc9-8d8c-4d3f0fdc7c50"
    },
    {
      "module_id": "tests.orchestration.fixtures",
      "path": "tests/orchestration/fixtures.py",
      "category": "test",
      "functions": 4,
      "classes": 1,
      "summary": "Shared test fixtures for orchestration testing",
      "artifact_id": "aa0020f8-3971-4501-baa2-304ba38b3d7e"
    },
    {
      "module_id": "tests.orchestration.integration.__init__",
      "path": "tests/orchestration/integration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Integration tests",
      "artifact_id": "ccb68eb0-bc43-44aa-8a75-f734057512b5"
    },
    {
      "module_id": "tests.orchestration.integration.test_epic5_components",
      "path": "tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "functions": 5,
      "classes": 1,
      "summary": "Test integration with Epic 5 components",
      "artifact_id": "1c4e9c4d-22b5-44e8-9f87-2f2828a2c2a3"
    },
    {
      "module_id": "tests.orchestration.core.test_task_models",
      "path": "tests/orchestration/core/test_task_models.py",
      "category": "test",
      "functions": 8,
      "classes": 2,
      "summary": "Test OrchestrationTask and OrchestrationResult models",
      "artifact_id": "2ea5e53d-a48b-41da-9f4b-7d3c8dc7d0ff"
    },
    {
      "module_id": "tests.orchestration.core.__init__",
      "path": "tests/orchestration/core/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Core orchestration component tests",
      "artifact_id": "920f84ff-2222-4d6f-9676-c9de2b182c0b"
    },
    {
      "module_id": "tests.orchestration.core.test_execution_modes",
      "path": "tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "functions": 7,
      "classes": 1,
      "summary": "Test ExecutionMode enum and smart suggestions",
      "artifact_id": "9d9b7fee-e6bb-4e9a-8029-9cd18568ed6e"
    },
    {
      "module_id": "tests.orchestration.executors.test_parallel_executor",
      "path": "tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "functions": 6,
      "classes": 1,
      "summary": "Test ParallelExecutor implementation",
      "artifact_id": "6e725272-6629-42a5-bdbe-f5b1bfb12778"
    },
    {
      "module_id": "tests.orchestration.executors.__init__",
      "path": "tests/orchestration/executors/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Executor strategy tests",
      "artifact_id": "265962ee-1e45-421d-8095-95764d494663"
    }
  ],
  "modules": [
    {
      "module_id": "tests.test_task_router",
      "path": "tests/test_task_router.py",
      "category": "test",
      "module_doc": "Comprehensive tests for Epic 5 TaskRouter implementation\n\nTests task classification, model routing, and integration with FastAPI",
      "functions": [
        {
          "name": "setup_method",
          "docstring": "Setup classifier for each test",
          "line_range": [
            20,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_code_generation_classification",
          "docstring": "Test code generation task classification",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_classification",
          "docstring": "Test documentation task classification",
          "line_range": [
            33,
            39
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complex_reasoning_classification",
          "docstring": "Test complex reasoning task classification",
          "line_range": [
            41,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_debugging_classification",
          "docstring": "Test debugging task classification",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complexity_scoring",
          "docstring": "Test complexity level calculation",
          "line_range": [
            58,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_based_classification",
          "docstring": "Test classification with context information",
          "line_range": [
            75,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_method",
          "docstring": "Setup router for each test",
          "line_range": [
            92,
            95
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ollama_routing_preference",
          "docstring": "Test routing to Ollama for code generation",
          "line_range": [
            98,
            106
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_claude_routing_preference",
          "docstring": "Test routing to Claude for complex reasoning",
          "line_range": [
            109,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_user_model_preference",
          "docstring": "Test user model preference override",
          "line_range": [
            119,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_fallback_model_selection",
          "docstring": "Test fallback model logic",
          "line_range": [
            133,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_ollama_execution",
          "docstring": "Test actual Ollama execution",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "test_claude_execution_placeholder",
          "docstring": "Test Claude execution (placeholder implementation)",
          "line_range": [
            165,
            174
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_error_handling",
          "docstring": "Test error handling in execution",
          "line_range": [
            178,
            190
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for performance tests",
          "line_range": [
            196,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_model_performance_baselines",
          "docstring": "Test that performance baselines match Epic 5 findings",
          "line_range": [
            200,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_optimization",
          "docstring": "Test routing optimization for performance",
          "line_range": [
            213,
            221
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_quality_threshold_calculation",
          "docstring": "Test quality threshold based on task complexity",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_agent_request_compatibility",
          "docstring": "Test compatibility with existing AgentRequest model",
          "line_range": [
            240,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_serialization",
          "docstring": "Test that RoutingDecision can be serialized for API responses",
          "line_range": [
            263,
            279
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for quality validator tests",
          "line_range": [
            285,
            287
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_success",
          "docstring": "Test successful Python code validation",
          "line_range": [
            289,
            311
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_syntax_error",
          "docstring": "Test Python code with syntax errors",
          "line_range": [
            313,
            326
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_javascript_code_validation",
          "docstring": "Test JavaScript code validation",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_high_quality",
          "docstring": "Test high-quality text validation",
          "line_range": [
            351,
            374
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_poor_quality",
          "docstring": "Test poor quality text validation",
          "line_range": [
            376,
            385
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_specific_validation",
          "docstring": "Test documentation-specific validation",
          "line_range": [
            387,
            411
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_fallback_decision_making",
          "docstring": "Test fallback decision based on task type and quality",
          "line_range": [
            413,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_thresholds_by_task_type",
          "docstring": "Test different quality thresholds for different task types",
          "line_range": [
            457,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_coherence_score_calculation",
          "docstring": "Test text coherence scoring",
          "line_range": [
            468,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_completeness_score_calculation",
          "docstring": "Test text completeness scoring",
          "line_range": [
            483,
            499
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_input_handling",
          "docstring": "Test handling of empty inputs",
          "line_range": [
            501,
            513
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_metrics_extraction",
          "docstring": "Test quality metrics extraction for monitoring",
          "line_range": [
            515,
            532
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_generic_code_validation",
          "docstring": "Test generic code validation for unknown languages",
          "line_range": [
            534,
            547
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestTaskClassifier",
          "docstring": "Test TaskClassifier with Epic 5 research patterns",
          "line_range": [
            17,
            86
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup classifier for each test",
              "line_range": [
                20,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_code_generation_classification",
              "docstring": "Test code generation task classification",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_classification",
              "docstring": "Test documentation task classification",
              "line_range": [
                33,
                39
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complex_reasoning_classification",
              "docstring": "Test complex reasoning task classification",
              "line_range": [
                41,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_debugging_classification",
              "docstring": "Test debugging task classification",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complexity_scoring",
              "docstring": "Test complexity level calculation",
              "line_range": [
                58,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_based_classification",
              "docstring": "Test classification with context information",
              "line_range": [
                75,
                86
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestModelRouter",
          "docstring": "Test ModelRouter with Epic 5 integration patterns",
          "line_range": [
            89,
            190
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup router for each test",
              "line_range": [
                92,
                95
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_routing_preference",
              "docstring": "Test routing to Ollama for code generation",
              "line_range": [
                98,
                106
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_claude_routing_preference",
              "docstring": "Test routing to Claude for complex reasoning",
              "line_range": [
                109,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_user_model_preference",
              "docstring": "Test user model preference override",
              "line_range": [
                119,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_model_selection",
              "docstring": "Test fallback model logic",
              "line_range": [
                133,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_execution",
              "docstring": "Test actual Ollama execution",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            },
            {
              "name": "test_claude_execution_placeholder",
              "docstring": "Test Claude execution (placeholder implementation)",
              "line_range": [
                165,
                174
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_error_handling",
              "docstring": "Test error handling in execution",
              "line_range": [
                178,
                190
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestPerformanceOptimization",
          "docstring": "Test performance optimization based on Epic 5 baselines",
          "line_range": [
            193,
            234
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for performance tests",
              "line_range": [
                196,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_model_performance_baselines",
              "docstring": "Test that performance baselines match Epic 5 findings",
              "line_range": [
                200,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_optimization",
              "docstring": "Test routing optimization for performance",
              "line_range": [
                213,
                221
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_threshold_calculation",
              "docstring": "Test quality threshold based on task complexity",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestIntegrationWithFastAPI",
          "docstring": "Test integration with existing FastAPI infrastructure",
          "line_range": [
            237,
            279
          ],
          "methods": [
            {
              "name": "test_agent_request_compatibility",
              "docstring": "Test compatibility with existing AgentRequest model",
              "line_range": [
                240,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_serialization",
              "docstring": "Test that RoutingDecision can be serialized for API responses",
              "line_range": [
                263,
                279
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestQualityValidator",
          "docstring": "Test enhanced Quality Validator with real validation logic",
          "line_range": [
            282,
            547
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for quality validator tests",
              "line_range": [
                285,
                287
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_success",
              "docstring": "Test successful Python code validation",
              "line_range": [
                289,
                311
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_syntax_error",
              "docstring": "Test Python code with syntax errors",
              "line_range": [
                313,
                326
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_javascript_code_validation",
              "docstring": "Test JavaScript code validation",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_high_quality",
              "docstring": "Test high-quality text validation",
              "line_range": [
                351,
                374
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_poor_quality",
              "docstring": "Test poor quality text validation",
              "line_range": [
                376,
                385
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_specific_validation",
              "docstring": "Test documentation-specific validation",
              "line_range": [
                387,
                411
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_decision_making",
              "docstring": "Test fallback decision based on task type and quality",
              "line_range": [
                413,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_thresholds_by_task_type",
              "docstring": "Test different quality thresholds for different task types",
              "line_range": [
                457,
                466
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_coherence_score_calculation",
              "docstring": "Test text coherence scoring",
              "line_range": [
                468,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_completeness_score_calculation",
              "docstring": "Test text completeness scoring",
              "line_range": [
                483,
                499
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_empty_input_handling",
              "docstring": "Test handling of empty inputs",
              "line_range": [
                501,
                513
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_metrics_extraction",
              "docstring": "Test quality metrics extraction for monitoring",
              "line_range": [
                515,
                532
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_generic_code_validation",
              "docstring": "Test generic code validation for unknown languages",
              "line_range": [
                534,
                547
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "setup_method": [
          "QualityValidator"
        ],
        "test_code_generation_classification": [],
        "test_documentation_classification": [],
        "test_complex_reasoning_classification": [],
        "test_debugging_classification": [],
        "test_complexity_scoring": [],
        "test_context_based_classification": [],
        "test_ollama_routing_preference": [],
        "test_claude_routing_preference": [],
        "test_user_model_preference": [],
        "test_fallback_model_selection": [],
        "test_ollama_execution": [
          "Mock",
          "patch"
        ],
        "test_claude_execution_placeholder": [],
        "test_error_handling": [
          "patch",
          "Exception"
        ],
        "test_model_performance_baselines": [
          "expected_baselines.items"
        ],
        "test_routing_decision_optimization": [],
        "test_quality_threshold_calculation": [
          "TaskClassifier",
          "classifier.classify_task"
        ],
        "test_agent_request_compatibility": [
          "TaskClassifier",
          "classifier.classify_task",
          "isinstance"
        ],
        "test_routing_decision_serialization": [
          "ModelRouter",
          "router.route_task",
          "isinstance"
        ],
        "test_python_code_validation_success": [],
        "test_python_code_validation_syntax_error": [
          "issue.lower",
          "any"
        ],
        "test_javascript_code_validation": [],
        "test_text_validation_high_quality": [],
        "test_text_validation_poor_quality": [],
        "test_documentation_specific_validation": [
          "len"
        ],
        "test_fallback_decision_making": [
          "QualityResult"
        ],
        "test_quality_thresholds_by_task_type": [],
        "test_coherence_score_calculation": [],
        "test_completeness_score_calculation": [
          "complete_text.lower"
        ],
        "test_empty_input_handling": [],
        "test_quality_metrics_extraction": [
          "QualityResult"
        ],
        "test_generic_code_validation": []
      },
      "dependencies": [
        "AsyncMock",
        "ComplexityLevel",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "asyncio",
        "patch",
        "pytest",
        "src.llmgenie.task_router",
        "src.llmgenie.task_router.task_classifier",
        "unittest.mock"
      ],
      "hash": "07b8ae843db69e19353cb6bd830e348ff42e34847c774212be84ff248f3dd137",
      "artifact_id": "ddbb3a42-a4cb-4310-b17f-ae1133c89e9b"
    },
    {
      "module_id": "tests.test_ollama_function_calling",
      "path": "tests/test_ollama_function_calling.py",
      "category": "test",
      "module_doc": "Test script for Ollama function calling capability\nPart of Epic 5: MCP-Ollama Integration\n\nThis script tests:\n1. Basic function calling with different models\n2. Performance measurement\n3. Quality validation",
      "functions": [
        {
          "name": "get_current_weather",
          "docstring": "Get the current weather for a city (mock function for testing)\n\nArgs:\n    city: The name of the city\n    \nReturns:\n    dict: Weather information",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "city"
          ],
          "decorators": []
        },
        {
          "name": "add_two_numbers",
          "docstring": "Add two numbers together\n\nArgs:\n    a: The first integer number\n    b: The second integer number\n    \nReturns:\n    int: The sum of the two numbers",
          "line_range": [
            40,
            51
          ],
          "parameters": [
            "a",
            "b"
          ],
          "decorators": []
        },
        {
          "name": "test_model_function_calling",
          "docstring": "Test function calling capability for a specific model\n\nArgs:\n    model_name: Name of the Ollama model to test\n    \nReturns:\n    dict: Test results including performance metrics",
          "line_range": [
            54,
            128
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "test_openai_compatible_endpoint",
          "docstring": "Test OpenAI compatible endpoint functionality\n\nReturns:\n    dict: Test results for OpenAI compatibility",
          "line_range": [
            131,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main test execution function",
          "line_range": [
            181,
            265
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_current_weather": [
          "weather_data.get"
        ],
        "add_two_numbers": [],
        "test_model_function_calling": [
          "add_two_numbers",
          "get_current_weather",
          "str",
          "ollama.chat",
          "print",
          "len",
          "time.time"
        ],
        "test_openai_compatible_endpoint": [
          "requests.post",
          "str",
          "data.get",
          "len",
          "response.json",
          "print",
          "time.time"
        ],
        "main": [
          "isinstance",
          "open",
          "result.get",
          "json.dump",
          "hasattr",
          "test_model_function_calling",
          "test_openai_compatible_endpoint",
          "print",
          "test_results.items",
          "sum",
          "len",
          "ollama.list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "json",
        "ollama",
        "requests",
        "time",
        "typing"
      ],
      "hash": "ee0ccf1cf8a278a300a6c166371f0df26dd9bc8843a50e0fbda21bd40c742b25",
      "artifact_id": "4eb83ed4-4c6b-4ccc-bc27-c252d4ef084c"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "module_doc": "Tests for llmgenie FastAPI application",
      "functions": [
        {
          "name": "test_health_check",
          "docstring": "Test health check endpoint",
          "line_range": [
            17,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_workflow_modes",
          "docstring": "Test workflow modes endpoint",
          "line_range": [
            26,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_agent_execute",
          "docstring": "Test agent execution endpoint",
          "line_range": [
            36,
            48
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_placeholder",
          "docstring": "Test MCP tools placeholder endpoint",
          "line_range": [
            50,
            56
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_health_check": [
          "client.get",
          "response.json"
        ],
        "test_workflow_modes": [
          "client.get",
          "response.json"
        ],
        "test_agent_execute": [
          "client.post",
          "response.json"
        ],
        "test_mcp_tools_placeholder": [
          "client.post",
          "response.json"
        ]
      },
      "dependencies": [
        "TestClient",
        "app",
        "core.llmgenie.api.main",
        "fastapi.testclient",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "f03b68cc3ee17250796fcf93c634c80d2e860681a50ef1a74580e32102289f59",
      "artifact_id": "5b0f799c-0661-4762-9faf-c783edafeb29"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "module_doc": "Tests for llmgenie CLI module",
      "functions": [
        {
          "name": "test_cli_import",
          "docstring": "Test that CLI module can be imported",
          "line_range": [
            12,
            18
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_llm_client_import",
          "docstring": "Test that LLM client can be imported",
          "line_range": [
            20,
            26
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_cli_import": [
          "pytest.fail"
        ],
        "test_llm_client_import": [
          "pytest.fail"
        ]
      },
      "dependencies": [
        "cli",
        "core.llmgenie",
        "llm_client",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "d7fc337b7a3a8fa484d5ae7301a345bd0226eccb8f5262fa880ce331e1542adc",
      "artifact_id": "6a306973-77f1-4d9a-95d4-6a0ab609936d"
    },
    {
      "module_id": "tests.test_self_refine_pipeline",
      "path": "tests/test_self_refine_pipeline.py",
      "category": "test",
      "module_doc": "Tests for Self-Refine Pipeline System\nComprehensive testing of MCP-enhanced iterative improvement",
      "functions": [
        {
          "name": "pipeline",
          "docstring": "Create a test pipeline instance",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_code",
          "docstring": "Sample code for testing",
          "line_range": [
            29,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_text",
          "docstring": "Sample text for testing",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_pipeline_initialization",
          "docstring": "Test pipeline initialization",
          "line_range": [
            47,
            51
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code",
          "docstring": "Test code refinement",
          "line_range": [
            53,
            61
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_text",
          "docstring": "Test text refinement",
          "line_range": [
            63,
            69
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_confidence_threshold_reached",
          "docstring": "Test that refinement stops when confidence threshold is reached",
          "line_range": [
            72,
            82
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_max_iterations_limit",
          "docstring": "Test that refinement respects max iterations limit",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_integration",
          "docstring": "Test MCP tools integration in refinement process",
          "line_range": [
            95,
            104
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code_file",
          "docstring": "Test refinement of entire code file",
          "line_range": [
            106,
            128
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_report_generation",
          "docstring": "Test refinement report generation",
          "line_range": [
            130,
            148
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_quick_refine_functions",
          "docstring": "Test convenience quick refine functions",
          "line_range": [
            150,
            159
          ],
          "parameters": [
            "self",
            "sample_code",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_enhancement_context_building",
          "docstring": "Test context enhancement with MCP tools",
          "line_range": [
            161,
            171
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_critique_generation",
          "docstring": "Test critique generation with MCP integration",
          "line_range": [
            173,
            186
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_validation_logic",
          "docstring": "Test improvement validation logic",
          "line_range": [
            188,
            203
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_error_handling_file_not_found",
          "docstring": "Test error handling for non-existent files",
          "line_range": [
            205,
            208
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_results_report",
          "docstring": "Test report generation with empty results",
          "line_range": [
            210,
            214
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_auto_logging_integration",
          "docstring": "Test integration with auto-logging system",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "mock_auto_logger",
            "pipeline",
            "sample_code"
          ],
          "decorators": [
            "patch('src.rag_context.interfaces.self_refine_pipeline.AUTO_LOGGING_AVAILABLE', True)",
            "patch('src.rag_context.interfaces.self_refine_pipeline.auto_logger')"
          ]
        },
        {
          "name": "test_all_refinement_types",
          "docstring": "Test that all refinement types are properly defined",
          "line_range": [
            237,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_result_creation",
          "docstring": "Test RefinementResult creation and attributes",
          "line_range": [
            249,
            269
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestSelfRefinePipeline",
          "docstring": "Test suite for Self-Refine Pipeline",
          "line_range": [
            20,
            231
          ],
          "methods": [
            {
              "name": "pipeline",
              "docstring": "Create a test pipeline instance",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_code",
              "docstring": "Sample code for testing",
              "line_range": [
                29,
                40
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_text",
              "docstring": "Sample text for testing",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_pipeline_initialization",
              "docstring": "Test pipeline initialization",
              "line_range": [
                47,
                51
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_refine_code",
              "docstring": "Test code refinement",
              "line_range": [
                53,
                61
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_text",
              "docstring": "Test text refinement",
              "line_range": [
                63,
                69
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_text"
              ]
            },
            {
              "name": "test_confidence_threshold_reached",
              "docstring": "Test that refinement stops when confidence threshold is reached",
              "line_range": [
                72,
                82
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_max_iterations_limit",
              "docstring": "Test that refinement respects max iterations limit",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_mcp_tools_integration",
              "docstring": "Test MCP tools integration in refinement process",
              "line_range": [
                95,
                104
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_code_file",
              "docstring": "Test refinement of entire code file",
              "line_range": [
                106,
                128
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refinement_report_generation",
              "docstring": "Test refinement report generation",
              "line_range": [
                130,
                148
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_quick_refine_functions",
              "docstring": "Test convenience quick refine functions",
              "line_range": [
                150,
                159
              ],
              "parameters": [
                "self",
                "sample_code",
                "sample_text"
              ]
            },
            {
              "name": "test_enhancement_context_building",
              "docstring": "Test context enhancement with MCP tools",
              "line_range": [
                161,
                171
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_critique_generation",
              "docstring": "Test critique generation with MCP integration",
              "line_range": [
                173,
                186
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_validation_logic",
              "docstring": "Test improvement validation logic",
              "line_range": [
                188,
                203
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_error_handling_file_not_found",
              "docstring": "Test error handling for non-existent files",
              "line_range": [
                205,
                208
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_empty_results_report",
              "docstring": "Test report generation with empty results",
              "line_range": [
                210,
                214
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_auto_logging_integration",
              "docstring": "Test integration with auto-logging system",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "mock_auto_logger",
                "pipeline",
                "sample_code"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementTypes",
          "docstring": "Test different refinement types",
          "line_range": [
            234,
            243
          ],
          "methods": [
            {
              "name": "test_all_refinement_types",
              "docstring": "Test that all refinement types are properly defined",
              "line_range": [
                237,
                243
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementResult",
          "docstring": "Test RefinementResult dataclass",
          "line_range": [
            246,
            269
          ],
          "methods": [
            {
              "name": "test_refinement_result_creation",
              "docstring": "Test RefinementResult creation and attributes",
              "line_range": [
                249,
                269
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "pipeline": [
          "SelfRefinePipeline"
        ],
        "sample_code": [],
        "sample_text": [],
        "test_pipeline_initialization": [
          "isinstance"
        ],
        "test_refine_code": [
          "pipeline.refine",
          "isinstance",
          "len",
          "all"
        ],
        "test_refine_text": [
          "pipeline.refine",
          "len"
        ],
        "test_confidence_threshold_reached": [
          "pipeline.refine",
          "patch.object",
          "len"
        ],
        "test_max_iterations_limit": [
          "pipeline.refine",
          "patch.object",
          "len"
        ],
        "test_mcp_tools_integration": [
          "pipeline.refine",
          "isinstance",
          "len"
        ],
        "test_refine_code_file": [
          "backup_file.unlink",
          "str",
          "temp_file.with_suffix",
          "temp_file.unlink",
          "tempfile.NamedTemporaryFile",
          "backup_file.exists",
          "len",
          "backup_file.read_text",
          "f.write",
          "temp_file.read_text",
          "Path",
          "pipeline.refine_code_file"
        ],
        "test_refinement_report_generation": [
          "pipeline.refine",
          "pipeline.generate_refinement_report",
          "len"
        ],
        "test_quick_refine_functions": [
          "isinstance",
          "quick_refine_code",
          "quick_refine_text",
          "len"
        ],
        "test_enhancement_context_building": [
          "pipeline._enhance_context",
          "len"
        ],
        "test_critique_generation": [
          "isinstance",
          "pipeline._critique_with_mcp",
          "len"
        ],
        "test_validation_logic": [
          "pipeline._validate_improvements"
        ],
        "test_error_handling_file_not_found": [
          "pytest.raises",
          "pipeline.refine_code_file"
        ],
        "test_empty_results_report": [
          "pipeline.generate_refinement_report"
        ],
        "test_auto_logging_integration": [
          "pipeline.refine",
          "patch",
          "len"
        ],
        "test_all_refinement_types": [],
        "test_refinement_result_creation": [
          "RefinementResult"
        ]
      },
      "dependencies": [
        "Mock",
        "Path",
        "RefinementResult",
        "RefinementType",
        "SelfRefinePipeline",
        "patch",
        "pathlib",
        "pytest",
        "quick_refine_code",
        "quick_refine_text",
        "src.rag_context.interfaces.self_refine_pipeline",
        "tempfile",
        "unittest.mock"
      ],
      "hash": "05a17d4148ab1b8353ab668170382fc22d156d6746c10cd6bb09241703f4f0c8",
      "artifact_id": "cc9d89b3-b99a-4625-a876-f3e1b89115b1"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_smoke",
          "docstring": "",
          "line_range": [
            1,
            2
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_smoke": []
      },
      "dependencies": [],
      "hash": "a6845264444e66537bcf4ff95e3560a9deb6764c4ad8fda31f59580707d69a97",
      "artifact_id": "0e8ec91e-f651-4888-9e19-435b91134e24"
    },
    {
      "module_id": "core.struct_tools.structure_analyzer",
      "path": "core/struct_tools/structure_analyzer.py",
      "category": "core",
      "module_doc": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json\n\u0438 modular index (.llmstruct_index/)\n\n\u0426\u0435\u043b\u044c: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430,\n\u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, call graphs, \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            32,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            46
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "generate_structure",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
          "line_range": [
            48,
            92
          ],
          "parameters": [
            "self",
            "target_dir",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "load_structure",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
          "line_range": [
            94,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_modular_index",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
          "line_range": [
            116,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_overview",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module_dependencies",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            158,
            193
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "find_function_callers",
          "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "function_name",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "get_module_complexity_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            218,
            254
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self",
            "functions",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "generate_architecture_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            276,
            337
          ],
          "parameters": [
            "self",
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "search_functions_by_pattern",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
          "line_range": [
            339,
            355
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "get_refactoring_impact",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            357,
            394
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_assess_refactoring_risk",
          "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            396,
            407
          ],
          "parameters": [
            "self",
            "importers_count",
            "called_functions_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            19,
            36
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                32,
                36
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructureAnalyzer",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 struct.json \u0438 modular index",
          "line_range": [
            39,
            407
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                46
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "generate_structure",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
              "line_range": [
                48,
                92
              ],
              "parameters": [
                "self",
                "target_dir",
                "force"
              ]
            },
            {
              "name": "load_structure",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
              "line_range": [
                94,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_modular_index",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
              "line_range": [
                116,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_overview",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                139,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_module_dependencies",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                158,
                193
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "find_function_callers",
              "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "function_name",
                "module_path"
              ]
            },
            {
              "name": "get_module_complexity_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                218,
                254
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                256,
                274
              ],
              "parameters": [
                "self",
                "functions",
                "classes"
              ]
            },
            {
              "name": "generate_architecture_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                276,
                337
              ],
              "parameters": [
                "self",
                "output_path"
              ]
            },
            {
              "name": "search_functions_by_pattern",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
              "line_range": [
                339,
                355
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "get_refactoring_impact",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                357,
                394
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_assess_refactoring_risk",
              "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
              "line_range": [
                396,
                407
              ],
              "parameters": [
                "self",
                "importers_count",
                "called_functions_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "StructureConfig",
          "logging.getLogger"
        ],
        "generate_structure": [
          "str",
          "cmd.extend",
          "subprocess.run",
          "datetime.now"
        ],
        "load_structure": [
          "self._load_modular_index",
          "json.load",
          "len",
          "open"
        ],
        "_load_modular_index": [
          "list",
          "open",
          "str",
          "module_data.get",
          "json.load",
          "len"
        ],
        "get_project_overview": [
          "sum",
          "len",
          "mod.get"
        ],
        "analyze_module_dependencies": [
          "c.get",
          "target_module.get",
          "module.get",
          "len",
          "f.get"
        ],
        "find_function_callers": [
          "callers.append",
          "edge.get",
          "call_graph.get",
          "target.get"
        ],
        "get_module_complexity_metrics": [
          "self._calculate_complexity_score",
          "module_data.get",
          "max",
          "function_lines.append",
          "sum",
          "class_lines.append",
          "len"
        ],
        "_calculate_complexity_score": [
          "cls.get",
          "func.get",
          "round",
          "len"
        ],
        "generate_architecture_report": [
          "open",
          "enumerate",
          "complexity_analysis.sort",
          "self.get_project_overview",
          "datetime.now",
          "complexity_analysis.append",
          "report_lines.extend",
          "self.get_module_complexity_metrics",
          "f.write"
        ],
        "search_functions_by_pattern": [
          "function.get",
          "module.get",
          "pattern.lower",
          "results.append"
        ],
        "get_refactoring_impact": [
          "source.get",
          "edge.get",
          "module.get",
          "importers.append",
          "called_functions.append",
          "call_graph.get",
          "len",
          "import_item.get",
          "target.get",
          "self._assess_refactoring_risk"
        ],
        "_assess_refactoring_risk": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "typing"
      ],
      "hash": "3b33899511ecb08c4d0c0f2400c74c15e97b81ba1866741ad68bf7f2c680d9d9",
      "artifact_id": "bb55b0e9-3eb2-49f0-9a99-3aeeda873720"
    },
    {
      "module_id": "core.struct_tools.mcp_interface",
      "path": "core/struct_tools/mcp_interface.py",
      "category": "core",
      "module_doc": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f struct_tools \u0441 Model Context Protocol \u0434\u043b\u044f Cursor IDE",
      "functions": [
        {
          "name": "run_struct_mcp_server",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f struct_tools",
          "line_range": [
            358,
            361
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            44
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_tools",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
          "line_range": [
            46,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            164,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            197,
            224
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_overview",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            226,
            239
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_analyze_module",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            241,
            272
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_search_functions",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            274,
            294
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_find_callers",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            296,
            319
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate_report",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            321,
            341
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            343,
            354
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            168,
            195
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            20,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureMCPServer",
          "docstring": "MCP \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            31,
            354
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                44
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_tools",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
              "line_range": [
                46,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                164,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_generate",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                197,
                224
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_overview",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                226,
                239
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_analyze_module",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                241,
                272
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_search_functions",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                274,
                294
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_find_callers",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                296,
                319
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_generate_report",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                321,
                341
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
              "line_range": [
                343,
                354
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "types",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Tool",
          "docstring": "",
          "line_range": [
            19,
            20
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                20,
                20
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TextContent",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                22
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolRequest",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                24
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolResult",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                26
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Server",
          "ImportError",
          "self._setup_handlers",
          "StructureAnalyzer",
          "logging.getLogger",
          "StructureConfig",
          "self._setup_tools"
        ],
        "_setup_tools": [],
        "_setup_handlers": [],
        "handle_call_tool": [
          "json.dumps",
          "self._handle_find_callers",
          "types.TextContent",
          "str",
          "self._handle_search_functions",
          "self._handle_generate_report",
          "self._handle_generate",
          "self._handle_overview",
          "self._handle_analyze_module"
        ],
        "_handle_generate": [
          "result.update",
          "json.dumps",
          "args.get",
          "types.TextContent"
        ],
        "_handle_overview": [
          "json.dumps",
          "types.TextContent"
        ],
        "_handle_analyze_module": [
          "json.dumps",
          "args.get",
          "types.TextContent"
        ],
        "_handle_search_functions": [
          "json.dumps",
          "len",
          "types.TextContent"
        ],
        "_handle_find_callers": [
          "len",
          "json.dumps",
          "args.get",
          "types.TextContent"
        ],
        "_handle_generate_report": [
          "json.dumps",
          "args.get",
          "types.TextContent"
        ],
        "run_stdio": [
          "stdio_server",
          "ImportError"
        ],
        "run_struct_mcp_server": [
          "server.run_stdio",
          "StructureMCPServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "json",
        "logging",
        "mcp",
        "mcp.server",
        "mcp.server.stdio",
        "pathlib",
        "stdio_server",
        "structure_analyzer",
        "types",
        "typing"
      ],
      "hash": "b72078d01e40ffab9133d1701757ae12de3ed0b7d0d837fb2a3c04e035afe3e8",
      "artifact_id": "0f5b47cf-4ca0-40fd-abd0-0d0ec1898be9"
    },
    {
      "module_id": "core.struct_tools.__init__",
      "path": "core/struct_tools/__init__.py",
      "category": "cli",
      "module_doc": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n\u042d\u0442\u043e\u0442 \u043f\u0430\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f:\n- \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 struct.json\n- \u0420\u0430\u0431\u043e\u0442\u044b \u0441 modular index (.llmstruct_index/)\n- \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430  \n- \u041e\u0446\u0435\u043d\u043a\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430\n- \u0410\u043d\u0430\u043b\u0438\u0437\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 call graphs",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "StructureAnalyzer",
        "StructureCLI",
        "StructureConfig",
        "cli_interface",
        "structure_analyzer"
      ],
      "hash": "b0756092205908aa270fe5bbe802e388145c4e7f458c4f96a738f4d5c0e5fcc1",
      "artifact_id": "9113fa89-7e1f-4bd2-b617-9642b0daea6b"
    },
    {
      "module_id": "core.struct_tools.cli_interface",
      "path": "core/struct_tools/cli_interface.py",
      "category": "core",
      "module_doc": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f CLI",
          "line_range": [
            383,
            386
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            22,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "initialize_analyzer",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            159,
            172
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_generate",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            174,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_overview",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            190,
            213
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_module",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            215,
            285
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_search",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            287,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_callers",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            310,
            335
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_report",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            337,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
          "line_range": [
            350,
            380
          ],
          "parameters": [
            "self",
            "argv"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureCLI",
          "docstring": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c",
          "line_range": [
            15,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_parser",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
              "line_range": [
                22,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "verbose"
              ]
            },
            {
              "name": "initialize_analyzer",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                159,
                172
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_generate",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                174,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_overview",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                190,
                213
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_module",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                215,
                285
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_search",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                287,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_callers",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                310,
                335
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_report",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                337,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
              "line_range": [
                350,
                380
              ],
              "parameters": [
                "self",
                "argv"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger"
        ],
        "create_parser": [
          "report_parser.add_argument",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "mod_parser.add_argument",
          "callers_parser.add_argument",
          "search_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "Path",
          "gen_parser.add_argument"
        ],
        "setup_logging": [
          "logging.basicConfig"
        ],
        "initialize_analyzer": [
          "hasattr",
          "StructureConfig",
          "StructureAnalyzer"
        ],
        "cmd_generate": [
          "print"
        ],
        "cmd_overview": [
          "print"
        ],
        "cmd_module": [
          "print"
        ],
        "cmd_search": [
          "len",
          "print"
        ],
        "cmd_callers": [
          "len",
          "print"
        ],
        "cmd_report": [
          "print"
        ],
        "run": [
          "self.cmd_callers",
          "self.cmd_search",
          "self.cmd_overview",
          "self.create_parser",
          "self.cmd_report",
          "self.cmd_generate",
          "self.cmd_module",
          "self.setup_logging",
          "parser.print_help",
          "self.initialize_analyzer",
          "print",
          "parser.parse_args"
        ],
        "main": [
          "StructureCLI",
          "cli.run"
        ]
      },
      "dependencies": [
        "Optional",
        "Path",
        "StructureAnalyzer",
        "StructureConfig",
        "argparse",
        "json",
        "logging",
        "pathlib",
        "structure_analyzer",
        "sys",
        "typing"
      ],
      "hash": "3ada7ae986e24db35a509f66751ae1b53710ffaa9135c7aced362404fdf7917e",
      "artifact_id": "a272ad91-d9fc-4d45-bf3b-5fa1362a396c"
    },
    {
      "module_id": "core.rag_context.active_knowledge_integration",
      "path": "core/rag_context/active_knowledge_integration.py",
      "category": "core",
      "module_doc": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation\nIntegrates Phase 4A.2.1 (extraction), 4A.2.2 (discovery), 4A.2.3 (context) into active workflow.",
      "functions": [
        {
          "name": "create_active_integrator",
          "docstring": "Create active integrator safely",
          "line_range": [
            456,
            467
          ],
          "parameters": [
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            55,
            71
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "start_active_session",
          "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
          "line_range": [
            73,
            112
          ],
          "parameters": [
            "self",
            "task_description",
            "files_involved"
          ],
          "decorators": []
        },
        {
          "name": "get_contextual_suggestions",
          "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
          "line_range": [
            114,
            149
          ],
          "parameters": [
            "self",
            "current_code",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "notify_solution_implemented",
          "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
          "line_range": [
            151,
            192
          ],
          "parameters": [
            "self",
            "solution_description",
            "code_snippet"
          ],
          "decorators": []
        },
        {
          "name": "suggest_related_sessions",
          "docstring": "Suggest related sessions that might have relevant context.",
          "line_range": [
            194,
            239
          ],
          "parameters": [
            "self",
            "current_problem"
          ],
          "decorators": []
        },
        {
          "name": "_generate_proactive_suggestions",
          "docstring": "Generate proactive suggestions for a new task",
          "line_range": [
            241,
            258
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_convert_discovery_to_suggestions",
          "docstring": "Convert discovery results to knowledge suggestions",
          "line_range": [
            260,
            281
          ],
          "parameters": [
            "self",
            "discovery_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_based_suggestions",
          "docstring": "Get suggestions based on previous session contexts",
          "line_range": [
            283,
            307
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_based_suggestions",
          "docstring": "Get suggestions based on current file context",
          "line_range": [
            309,
            327
          ],
          "parameters": [
            "self",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on problem type",
          "line_range": [
            329,
            350
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_classify_problem_type",
          "docstring": "Classify problem type from task description",
          "line_range": [
            352,
            365
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_save_solution_pattern",
          "docstring": "Save new solution pattern to knowledge base",
          "line_range": [
            367,
            389
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "_log_session_event",
          "docstring": "Log session events for integration tracking",
          "line_range": [
            391,
            407
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "_suggestion_to_dict",
          "docstring": "Convert suggestion to dict for JSON serialization",
          "line_range": [
            409,
            418
          ],
          "parameters": [
            "self",
            "suggestion"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_stats",
          "docstring": "Get integration system statistics",
          "line_range": [
            420,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable integration system safely",
          "line_range": [
            444,
            448
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable integration system",
          "line_range": [
            450,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "KnowledgeSuggestion",
          "docstring": "Proactive knowledge suggestion for active workflow",
          "line_range": [
            17,
            24
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveSessionState",
          "docstring": "Current active session state for context-aware suggestions",
          "line_range": [
            28,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveKnowledgeIntegrator",
          "docstring": "Active Knowledge Integration system - the intelligence layer.\n\nBrings together all knowledge preservation components into active workflow:\n- Proactive suggestions during coding\n- \"You solved this before\" notifications  \n- Auto-tagging of new solutions\n- Smart context switching\n\nSafe design principles:\n- Builds on all previous Phase 4A.2.1-3 components\n- Non-intrusive suggestions (can be ignored)\n- Performance-conscious (fast suggestions)\n- Easy disable without workflow disruption",
          "line_range": [
            38,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                55,
                71
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery",
                "context_manager"
              ]
            },
            {
              "name": "start_active_session",
              "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
              "line_range": [
                73,
                112
              ],
              "parameters": [
                "self",
                "task_description",
                "files_involved"
              ]
            },
            {
              "name": "get_contextual_suggestions",
              "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
              "line_range": [
                114,
                149
              ],
              "parameters": [
                "self",
                "current_code",
                "current_file"
              ]
            },
            {
              "name": "notify_solution_implemented",
              "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
              "line_range": [
                151,
                192
              ],
              "parameters": [
                "self",
                "solution_description",
                "code_snippet"
              ]
            },
            {
              "name": "suggest_related_sessions",
              "docstring": "Suggest related sessions that might have relevant context.",
              "line_range": [
                194,
                239
              ],
              "parameters": [
                "self",
                "current_problem"
              ]
            },
            {
              "name": "_generate_proactive_suggestions",
              "docstring": "Generate proactive suggestions for a new task",
              "line_range": [
                241,
                258
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_convert_discovery_to_suggestions",
              "docstring": "Convert discovery results to knowledge suggestions",
              "line_range": [
                260,
                281
              ],
              "parameters": [
                "self",
                "discovery_result"
              ]
            },
            {
              "name": "_get_context_based_suggestions",
              "docstring": "Get suggestions based on previous session contexts",
              "line_range": [
                283,
                307
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_get_file_based_suggestions",
              "docstring": "Get suggestions based on current file context",
              "line_range": [
                309,
                327
              ],
              "parameters": [
                "self",
                "current_file"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on problem type",
              "line_range": [
                329,
                350
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_classify_problem_type",
              "docstring": "Classify problem type from task description",
              "line_range": [
                352,
                365
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_save_solution_pattern",
              "docstring": "Save new solution pattern to knowledge base",
              "line_range": [
                367,
                389
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "_log_session_event",
              "docstring": "Log session events for integration tracking",
              "line_range": [
                391,
                407
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "_suggestion_to_dict",
              "docstring": "Convert suggestion to dict for JSON serialization",
              "line_range": [
                409,
                418
              ],
              "parameters": [
                "self",
                "suggestion"
              ]
            },
            {
              "name": "get_integration_stats",
              "docstring": "Get integration system statistics",
              "line_range": [
                420,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable integration system safely",
              "line_range": [
                444,
                448
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable integration system",
              "line_range": [
                450,
                452
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "SessionContextManager",
          "Path",
          "SmartCodeDiscovery",
          "SafeKnowledgeExtractor"
        ],
        "start_active_session": [
          "self._generate_proactive_suggestions",
          "self._suggestion_to_dict",
          "int",
          "self._classify_problem_type",
          "str",
          "len",
          "self._log_session_event",
          "ActiveSessionState",
          "time.time"
        ],
        "get_contextual_suggestions": [
          "sorted",
          "suggestions.extend",
          "self._get_file_based_suggestions",
          "self._convert_discovery_to_suggestions",
          "self._get_context_based_suggestions"
        ],
        "notify_solution_implemented": [
          "self._save_solution_pattern",
          "int",
          "str",
          "self._log_session_event",
          "time.time"
        ],
        "suggest_related_sessions": [
          "context_stats.get",
          "snapshot.get",
          "open",
          "description.split",
          "bool",
          "related_sessions.sort",
          "json.load",
          "set",
          "current_problem.lower",
          "related_sessions.append",
          "len",
          "Path"
        ],
        "_generate_proactive_suggestions": [
          "self._classify_problem_type",
          "self._get_workflow_suggestions",
          "self._convert_discovery_to_suggestions",
          "suggestions.extend"
        ],
        "_convert_discovery_to_suggestions": [
          "enumerate",
          "KnowledgeSuggestion",
          "len",
          "suggestions.append",
          "Path"
        ],
        "_get_context_based_suggestions": [
          "self.suggest_related_sessions",
          "KnowledgeSuggestion",
          "min",
          "suggestions.append"
        ],
        "_get_file_based_suggestions": [
          "KnowledgeSuggestion",
          "Path",
          "suggestions.append"
        ],
        "_get_workflow_suggestions": [
          "KnowledgeSuggestion",
          "problem_type.title",
          "suggestions.append"
        ],
        "_classify_problem_type": [
          "task_description.lower",
          "any"
        ],
        "_save_solution_pattern": [
          "open",
          "json.load",
          "json.dump",
          "patterns.append",
          "patterns_file.exists",
          "Path"
        ],
        "_log_session_event": [
          "time.time",
          "json.dumps",
          "f.write",
          "open"
        ],
        "_suggestion_to_dict": [],
        "get_integration_stats": [
          "log_file.exists",
          "sum",
          "open"
        ],
        "disable": [
          "self._log_session_event"
        ],
        "enable": [],
        "create_active_integrator": [
          "integrator.disable",
          "ActiveKnowledgeIntegrator",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "DiscoveryResult",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SessionContextManager",
        "SmartCodeDiscovery",
        "Tuple",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "session_context_manager",
        "time",
        "typing"
      ],
      "hash": "80e046baa4fc0e0d227447432806987fef70e8ec0dab38f131cdb0160f876c92",
      "artifact_id": "68688b06-d3dd-4ce1-887a-0df2d8aeb62d"
    },
    {
      "module_id": "core.rag_context.cursor_intelligence",
      "path": "core/rag_context/cursor_intelligence.py",
      "category": "core",
      "module_doc": "Cursor Intelligence System for Workflow Enhancement\n\nPhase 4A.4: Intelligent synthesis of Cursor history patterns for enhanced development workflow.\nIntegrates with Phase 4A.2 Knowledge Preservation System for comprehensive intelligence.",
      "functions": [
        {
          "name": "create_cursor_intelligence",
          "docstring": "Create and initialize Cursor Intelligence System",
          "line_range": [
            278,
            280
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_module_placement",
          "docstring": "Suggest optimal module placement based on architectural patterns",
          "line_range": [
            49,
            68
          ],
          "parameters": [
            "self",
            "functionality_description"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_pattern_relevance",
          "docstring": "Calculate how relevant patterns are to description",
          "line_range": [
            70,
            74
          ],
          "parameters": [
            "self",
            "description",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            84,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_workflow_context",
          "docstring": "Comprehensive workflow analysis combining all intelligence sources",
          "line_range": [
            90,
            148
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_proactive_suggestions",
          "docstring": "Get proactive suggestions based on current session state",
          "line_range": [
            150,
            170
          ],
          "parameters": [
            "self",
            "session_state"
          ],
          "decorators": []
        },
        {
          "name": "_assess_complexity",
          "docstring": "Assess task complexity",
          "line_range": [
            172,
            187
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_assess_quality_risk",
          "docstring": "Assess quality risk (0.0 to 1.0)",
          "line_range": [
            189,
            197
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_time",
          "docstring": "Estimate implementation time",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "self",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_get_recommended_approach",
          "docstring": "Get recommended implementation approach",
          "line_range": [
            208,
            227
          ],
          "parameters": [
            "self",
            "complexity",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_risk_factors",
          "docstring": "Get risk factors based on risk level",
          "line_range": [
            229,
            236
          ],
          "parameters": [
            "self",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_success_factors",
          "docstring": "Get success factors",
          "line_range": [
            238,
            247
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_insight_to_dict",
          "docstring": "Convert insight to dictionary format",
          "line_range": [
            249,
            259
          ],
          "parameters": [
            "self",
            "insight"
          ],
          "decorators": []
        },
        {
          "name": "_generate_summary",
          "docstring": "Generate human-readable summary",
          "line_range": [
            261,
            276
          ],
          "parameters": [
            "self",
            "insights",
            "prediction"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "IntelligenceInsight",
          "docstring": "Single intelligence insight from pattern analysis",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "WorkflowPrediction",
          "docstring": "Prediction about workflow complexity and quality",
          "line_range": [
            29,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ArchitecturalIntelligence",
          "docstring": "Intelligence patterns from architectural analysis",
          "line_range": [
            38,
            74
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_module_placement",
              "docstring": "Suggest optimal module placement based on architectural patterns",
              "line_range": [
                49,
                68
              ],
              "parameters": [
                "self",
                "functionality_description"
              ]
            },
            {
              "name": "_calculate_pattern_relevance",
              "docstring": "Calculate how relevant patterns are to description",
              "line_range": [
                70,
                74
              ],
              "parameters": [
                "self",
                "description",
                "patterns"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntelligenceOrchestrator",
          "docstring": "Main orchestrator for Cursor Intelligence System\n\nSynthesizes all intelligence patterns for comprehensive workflow enhancement.\nIntegrates with Phase 4A.2 Knowledge Preservation System.",
          "line_range": [
            76,
            276
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                84,
                88
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_workflow_context",
              "docstring": "Comprehensive workflow analysis combining all intelligence sources",
              "line_range": [
                90,
                148
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "get_proactive_suggestions",
              "docstring": "Get proactive suggestions based on current session state",
              "line_range": [
                150,
                170
              ],
              "parameters": [
                "self",
                "session_state"
              ]
            },
            {
              "name": "_assess_complexity",
              "docstring": "Assess task complexity",
              "line_range": [
                172,
                187
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_assess_quality_risk",
              "docstring": "Assess quality risk (0.0 to 1.0)",
              "line_range": [
                189,
                197
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_time",
              "docstring": "Estimate implementation time",
              "line_range": [
                199,
                206
              ],
              "parameters": [
                "self",
                "complexity"
              ]
            },
            {
              "name": "_get_recommended_approach",
              "docstring": "Get recommended implementation approach",
              "line_range": [
                208,
                227
              ],
              "parameters": [
                "self",
                "complexity",
                "risk"
              ]
            },
            {
              "name": "_get_risk_factors",
              "docstring": "Get risk factors based on risk level",
              "line_range": [
                229,
                236
              ],
              "parameters": [
                "self",
                "risk"
              ]
            },
            {
              "name": "_get_success_factors",
              "docstring": "Get success factors",
              "line_range": [
                238,
                247
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_insight_to_dict",
              "docstring": "Convert insight to dictionary format",
              "line_range": [
                249,
                259
              ],
              "parameters": [
                "self",
                "insight"
              ]
            },
            {
              "name": "_generate_summary",
              "docstring": "Generate human-readable summary",
              "line_range": [
                261,
                276
              ],
              "parameters": [
                "self",
                "insights",
                "prediction"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ArchitecturalIntelligence",
          "logger.info"
        ],
        "suggest_module_placement": [
          "IntelligenceInsight",
          "insights.append",
          "category.lower",
          "self._calculate_pattern_relevance"
        ],
        "_calculate_pattern_relevance": [
          "pattern.lower",
          "sum",
          "len",
          "description.lower",
          "min"
        ],
        "analyze_workflow_context": [
          "self._get_success_factors",
          "self._generate_summary",
          "bool",
          "logger.info",
          "logger.error",
          "context.get",
          "str",
          "self._assess_quality_risk",
          "self._get_recommended_approach",
          "datetime.now",
          "self._estimate_time",
          "self._assess_complexity",
          "len",
          "self._get_risk_factors",
          "WorkflowPrediction",
          "self._insight_to_dict"
        ],
        "get_proactive_suggestions": [
          "str",
          "any",
          "suggestions.append"
        ],
        "_assess_complexity": [
          "str",
          "sum",
          "len"
        ],
        "_assess_quality_risk": [
          "str",
          "len",
          "sum",
          "min"
        ],
        "_estimate_time": [
          "time_mapping.get"
        ],
        "_get_recommended_approach": [
          "approach.extend"
        ],
        "_get_risk_factors": [],
        "_get_success_factors": [
          "str",
          "factors.append"
        ],
        "_insight_to_dict": [],
        "_generate_summary": [
          "len"
        ],
        "create_cursor_intelligence": [
          "CursorIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "df53087815726c54c0bb11a7c2de0495692fc727dbec2f09f94575ddb7ff5c3f",
      "artifact_id": "abfa87aa-5fc0-4d4d-88d8-5cce9240d2a6"
    },
    {
      "module_id": "core.rag_context.knowledge_extractor",
      "path": "core/rag_context/knowledge_extractor.py",
      "category": "core",
      "module_doc": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation\nBuilds on existing RAG infrastructure without breaking existing tools.\nLessons learned from struct tools issues applied.",
      "functions": [
        {
          "name": "create_knowledge_extractor",
          "docstring": "Create knowledge extractor safely",
          "line_range": [
            164,
            173
          ],
          "parameters": [
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing enhancer",
          "line_range": [
            50,
            61
          ],
          "parameters": [
            "self",
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "extract_code_knowledge",
          "docstring": "Extract code knowledge safely",
          "line_range": [
            63,
            85
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_patterns_from_document",
          "docstring": "Extract patterns from document",
          "line_range": [
            87,
            108
          ],
          "parameters": [
            "self",
            "doc"
          ],
          "decorators": []
        },
        {
          "name": "_save_patterns",
          "docstring": "Save patterns to JSON",
          "line_range": [
            110,
            131
          ],
          "parameters": [
            "self",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "get_extraction_stats",
          "docstring": "Get extraction statistics",
          "line_range": [
            133,
            152
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable safely",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable knowledge extraction",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CodePattern",
          "docstring": "Extracted code pattern for knowledge base",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "KnowledgeExtractionResult",
          "docstring": "Result of knowledge extraction operation",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SafeKnowledgeExtractor",
          "docstring": "Safe knowledge extractor that builds on existing RAG infrastructure.\n\nDesign principles:\n- NO breaking changes to existing components\n- Graceful fallbacks if anything fails  \n- Self-contained with minimal dependencies\n- Can be disabled without trace",
          "line_range": [
            39,
            160
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing enhancer",
              "line_range": [
                50,
                61
              ],
              "parameters": [
                "self",
                "enhancer"
              ]
            },
            {
              "name": "extract_code_knowledge",
              "docstring": "Extract code knowledge safely",
              "line_range": [
                63,
                85
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_patterns_from_document",
              "docstring": "Extract patterns from document",
              "line_range": [
                87,
                108
              ],
              "parameters": [
                "self",
                "doc"
              ]
            },
            {
              "name": "_save_patterns",
              "docstring": "Save patterns to JSON",
              "line_range": [
                110,
                131
              ],
              "parameters": [
                "self",
                "patterns"
              ]
            },
            {
              "name": "get_extraction_stats",
              "docstring": "Get extraction statistics",
              "line_range": [
                133,
                152
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable safely",
              "line_range": [
                154,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable knowledge extraction",
              "line_range": [
                158,
                160
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "PromptEnhancer",
          "Path"
        ],
        "extract_code_knowledge": [
          "patterns.extend",
          "str",
          "self._save_patterns",
          "self._extract_patterns_from_document",
          "len",
          "time.time"
        ],
        "_extract_patterns_from_document": [
          "enumerate",
          "content.split",
          "CodePattern",
          "patterns.append",
          "line.strip"
        ],
        "_save_patterns": [
          "json.dump",
          "patterns_data.append",
          "open",
          "time.time"
        ],
        "get_extraction_stats": [
          "patterns_file.exists",
          "json.load",
          "len",
          "open"
        ],
        "disable": [],
        "enable": [],
        "create_knowledge_extractor": [
          "print",
          "SafeKnowledgeExtractor",
          "extractor.disable"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "dataclass",
        "dataclasses",
        "enhancer",
        "json",
        "loader",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9d90819f91f32cb6cb28ee6a06ffa952263058f6d93b48662014299b2cc3fd6f",
      "artifact_id": "794aa89e-2b8a-48ce-abe5-026cc9f5cfa3"
    },
    {
      "module_id": "core.rag_context.code_discovery",
      "path": "core/rag_context/code_discovery.py",
      "category": "core",
      "module_doc": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation\nBuilds on Phase 4A.2.1 knowledge extraction safely.",
      "functions": [
        {
          "name": "create_discovery_system",
          "docstring": "Create discovery system safely",
          "line_range": [
            266,
            275
          ],
          "parameters": [
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing extractor",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self",
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "search_solutions",
          "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
          "line_range": [
            42,
            91
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_load_patterns_safely",
          "docstring": "Load patterns from JSON safely",
          "line_range": [
            93,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_search_patterns_simple",
          "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
          "line_range": [
            122,
            172
          ],
          "parameters": [
            "self",
            "query",
            "patterns",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_generate_suggestions",
          "docstring": "Generate practical suggestions based on found patterns",
          "line_range": [
            174,
            204
          ],
          "parameters": [
            "self",
            "query",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "quick_search",
          "docstring": "Quick keyword-based search for rapid discovery",
          "line_range": [
            206,
            233
          ],
          "parameters": [
            "self",
            "keywords"
          ],
          "decorators": []
        },
        {
          "name": "get_discovery_stats",
          "docstring": "Get discovery system statistics",
          "line_range": [
            235,
            254
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable discovery system safely",
          "line_range": [
            256,
            258
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable discovery system",
          "line_range": [
            260,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DiscoveryResult",
          "docstring": "Result of code discovery search",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartCodeDiscovery",
          "docstring": "Smart code discovery system for \"Have I solved this before?\" queries.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1 infrastructure\n- No breaking changes to existing components\n- Graceful degradation if knowledge base missing\n- Simple text search (no complex NLP that could break)",
          "line_range": [
            24,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing extractor",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self",
                "extractor"
              ]
            },
            {
              "name": "search_solutions",
              "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
              "line_range": [
                42,
                91
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_load_patterns_safely",
              "docstring": "Load patterns from JSON safely",
              "line_range": [
                93,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_search_patterns_simple",
              "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
              "line_range": [
                122,
                172
              ],
              "parameters": [
                "self",
                "query",
                "patterns",
                "max_results"
              ]
            },
            {
              "name": "_generate_suggestions",
              "docstring": "Generate practical suggestions based on found patterns",
              "line_range": [
                174,
                204
              ],
              "parameters": [
                "self",
                "query",
                "patterns"
              ]
            },
            {
              "name": "quick_search",
              "docstring": "Quick keyword-based search for rapid discovery",
              "line_range": [
                206,
                233
              ],
              "parameters": [
                "self",
                "keywords"
              ]
            },
            {
              "name": "get_discovery_stats",
              "docstring": "Get discovery system statistics",
              "line_range": [
                235,
                254
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable discovery system safely",
              "line_range": [
                256,
                258
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable discovery system",
              "line_range": [
                260,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SafeKnowledgeExtractor"
        ],
        "search_solutions": [
          "DiscoveryResult",
          "self._load_patterns_safely",
          "self._search_patterns_simple",
          "time.time",
          "self._generate_suggestions"
        ],
        "_load_patterns_safely": [
          "open",
          "CodePattern",
          "json.load",
          "item.get",
          "patterns.append",
          "patterns_file.exists"
        ],
        "_search_patterns_simple": [
          "query_lower.split",
          "pattern_scores.sort",
          "set",
          "query.lower",
          "any",
          "pattern_scores.append",
          "Path"
        ],
        "_generate_suggestions": [
          "list",
          "name.lower",
          "set",
          "any",
          "len",
          "suggestions.append",
          "Path"
        ],
        "quick_search": [
          "str",
          "self._load_patterns_safely",
          "matches.append",
          "time.time",
          "keyword.lower",
          "Path"
        ],
        "get_discovery_stats": [
          "patterns_file.exists",
          "json.load",
          "len",
          "open"
        ],
        "disable": [],
        "enable": [],
        "create_discovery_system": [
          "discovery.disable",
          "SmartCodeDiscovery",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CodePattern",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "Tuple",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "6cbc46e2dd7df1aad1c053912305e81c765be1c724588114984d7c2c39c1460b",
      "artifact_id": "84b8f9ec-4238-4fa7-a73b-a7fbfd5be1e6"
    },
    {
      "module_id": "core.rag_context.embedder",
      "path": "core/rag_context/embedder.py",
      "category": "core",
      "module_doc": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "parameters": [
            "self",
            "model_name",
            "cache_dir"
          ],
          "decorators": []
        },
        {
          "name": "model",
          "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "embed_text",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            32,
            54
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "embed_batch",
          "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            56,
            91
          ],
          "parameters": [
            "self",
            "texts"
          ],
          "decorators": []
        },
        {
          "name": "_hash_text",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            93,
            95
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_cache",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            97,
            105
          ],
          "parameters": [
            "self",
            "text_hash"
          ],
          "decorators": []
        },
        {
          "name": "_save_to_cache",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            107,
            125
          ],
          "parameters": [
            "self",
            "text_hash",
            "embedding",
            "text_preview"
          ],
          "decorators": []
        },
        {
          "name": "similarity",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
          "line_range": [
            127,
            129
          ],
          "parameters": [
            "self",
            "embedding1",
            "embedding2"
          ],
          "decorators": []
        },
        {
          "name": "find_most_similar",
          "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
          "line_range": [
            131,
            144
          ],
          "parameters": [
            "self",
            "query_embedding",
            "candidate_embeddings",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
          "line_range": [
            146,
            153
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleEmbedder",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 embeddings \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            13,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                22
              ],
              "parameters": [
                "self",
                "model_name",
                "cache_dir"
              ]
            },
            {
              "name": "model",
              "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
              "line_range": [
                25,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "embed_text",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
              "line_range": [
                32,
                54
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "embed_batch",
              "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                56,
                91
              ],
              "parameters": [
                "self",
                "texts"
              ]
            },
            {
              "name": "_hash_text",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                93,
                95
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_load_from_cache",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                97,
                105
              ],
              "parameters": [
                "self",
                "text_hash"
              ]
            },
            {
              "name": "_save_to_cache",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                107,
                125
              ],
              "parameters": [
                "self",
                "text_hash",
                "embedding",
                "text_preview"
              ]
            },
            {
              "name": "similarity",
              "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
              "line_range": [
                127,
                129
              ],
              "parameters": [
                "self",
                "embedding1",
                "embedding2"
              ]
            },
            {
              "name": "find_most_similar",
              "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
              "line_range": [
                131,
                144
              ],
              "parameters": [
                "self",
                "query_embedding",
                "candidate_embeddings",
                "threshold"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
              "line_range": [
                146,
                153
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "model": [
          "SentenceTransformer",
          "print"
        ],
        "embed_text": [
          "self._hash_text",
          "self._save_to_cache",
          "self._load_from_cache"
        ],
        "embed_batch": [
          "zip",
          "self._save_to_cache",
          "new_texts.append",
          "enumerate",
          "new_indices.append",
          "self._load_from_cache",
          "self._hash_text",
          "range",
          "print",
          "len"
        ],
        "_hash_text": [
          "text.encode",
          "hashlib.md5"
        ],
        "_load_from_cache": [
          "cache_file.exists",
          "np.load",
          "print"
        ],
        "_save_to_cache": [
          "json.dump",
          "open",
          "print",
          "np.save"
        ],
        "similarity": [
          "float",
          "np.dot"
        ],
        "find_most_similar": [
          "enumerate",
          "similarities.append",
          "similarities.sort",
          "self.similarity"
        ],
        "get_cache_stats": [
          "list",
          "sum",
          "len",
          "f.stat"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "SentenceTransformer",
        "Tuple",
        "hashlib",
        "json",
        "numpy",
        "os",
        "pathlib",
        "sentence_transformers",
        "typing"
      ],
      "hash": "d229d61d5b3f22f6b3f7c1b0b0efd293a16f13e53eb3391b24951b70fece349e",
      "artifact_id": "7a19cdd9-4c22-4b93-904b-08fb3577cf38"
    },
    {
      "module_id": "core.rag_context.enhanced_logging_intelligence",
      "path": "core/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "create_enhanced_logging_intelligence",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_current_session",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionMetrics",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "EnhancedLoggingIntelligenceOrchestrator",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_current_session",
              "docstring": "",
              "line_range": [
                21,
                22
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path"
        ],
        "analyze_current_session": [],
        "create_enhanced_logging_intelligence": [
          "EnhancedLoggingIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "e5889a76316632b70966b6729f89187fe4510d5a0fd37ff3ae20505cf53aae3f",
      "artifact_id": "bf6853f1-7cb3-45b0-976b-1bc19ee5a771"
    },
    {
      "module_id": "core.rag_context.enhancer",
      "path": "core/rag_context/enhancer.py",
      "category": "core",
      "module_doc": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            33
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "initialize",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            35,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enhance",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            66,
            93
          ],
          "parameters": [
            "self",
            "task_text",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_load_all_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            95,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_build_enhanced_prompt",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            118,
            169
          ],
          "parameters": [
            "self",
            "original_task",
            "relevant_results",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            171,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            191,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PromptEnhancer",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 RAG",
          "line_range": [
            13,
            195
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                33
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "initialize",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                35,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enhance",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                66,
                93
              ],
              "parameters": [
                "self",
                "task_text",
                "context"
              ]
            },
            {
              "name": "_load_all_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                95,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_build_enhanced_prompt",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
              "line_range": [
                118,
                169
              ],
              "parameters": [
                "self",
                "original_task",
                "relevant_results",
                "context"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                171,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refresh_index",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                191,
                195
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ContextRetriever",
          "SimpleEmbedder",
          "RAGConfig"
        ],
        "initialize": [
          "self._load_all_documents",
          "time.time",
          "len",
          "print"
        ],
        "enhance": [
          "self._build_enhanced_prompt",
          "print",
          "self.initialize"
        ],
        "_load_all_documents": [
          "RulesLoader",
          "documents.extend",
          "len",
          "print",
          "StructLoader",
          "struct_loader.load_document",
          "documents.append",
          "rules_loader.load_documents"
        ],
        "_build_enhanced_prompt": [
          "prompt_parts.append",
          "rules_context.append",
          "prompt_parts.extend",
          "len",
          "struct_context.append",
          "context.items"
        ],
        "get_stats": [
          "stats.update"
        ],
        "refresh_index": [
          "print",
          "self.initialize"
        ]
      },
      "dependencies": [
        "Any",
        "ContextRetriever",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "RAGConfig",
        "RetrievalResult",
        "RulesLoader",
        "SimpleEmbedder",
        "StructLoader",
        "config",
        "embedder",
        "loader",
        "pathlib",
        "retriever",
        "time",
        "typing"
      ],
      "hash": "8d2cfa893f488404c7818ec2ac83342e72863d59d3aed1de2b460c729d015f12",
      "artifact_id": "0dc98c86-4ad6-4879-a8f5-35315c40cc5f"
    },
    {
      "module_id": "core.rag_context.loader",
      "path": "core/rag_context/loader.py",
      "category": "core",
      "module_doc": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            27
          ],
          "parameters": [
            "self",
            "rules_dir",
            "extensions",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "load_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            29,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_rule_files",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            46,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_rule_file",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            68,
            93
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_clean_markdown",
          "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
          "line_range": [
            95,
            109
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_metadata",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            130,
            131
          ],
          "parameters": [
            "self",
            "struct_json"
          ],
          "decorators": []
        },
        {
          "name": "load_document",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
          "line_range": [
            133,
            161
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_format_struct_content",
          "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
          "line_range": [
            163,
            189
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Document",
          "docstring": "\u0423\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            13,
            18
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RulesLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u043f\u0440\u0430\u0432\u0438\u043b \u0438\u0437 .cursor/rules",
          "line_range": [
            21,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                27
              ],
              "parameters": [
                "self",
                "rules_dir",
                "extensions",
                "exclude_patterns"
              ]
            },
            {
              "name": "load_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                29,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_rule_files",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                46,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_rule_file",
              "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                68,
                93
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_clean_markdown",
              "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
              "line_range": [
                95,
                109
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_metadata",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "content"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            127,
            189
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                130,
                131
              ],
              "parameters": [
                "self",
                "struct_json"
              ]
            },
            {
              "name": "load_document",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
              "line_range": [
                133,
                161
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_format_struct_content",
              "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
              "line_range": [
                163,
                189
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_documents": [
          "self._parse_rule_file",
          "print",
          "self._get_rule_files",
          "documents.append"
        ],
        "_get_rule_files": [
          "list",
          "files.extend",
          "set",
          "filtered_files.append",
          "fnmatch.fnmatch"
        ],
        "_parse_rule_file": [
          "metadata.update",
          "self._extract_metadata",
          "self._clean_markdown",
          "str",
          "Document",
          "file_path.read_text",
          "print",
          "file_path.stat"
        ],
        "_clean_markdown": [
          "clean_line.replace",
          "clean_line.strip",
          "content.split",
          "line.replace",
          "cleaned_lines.append",
          "line.strip"
        ],
        "_extract_metadata": [
          "content.split",
          "line.split",
          "line.startswith"
        ],
        "load_document": [
          "open",
          "str",
          "json.load",
          "Document",
          "self._format_struct_content",
          "len",
          "print",
          "struct_data.get"
        ],
        "_format_struct_content": [
          "comp_data.get",
          "ep_data.get",
          "content_parts.append"
        ]
      },
      "dependencies": [
        "Any",
        "BeautifulSoup",
        "Comment",
        "Dict",
        "List",
        "Optional",
        "Path",
        "bs4",
        "dataclass",
        "dataclasses",
        "fnmatch",
        "json",
        "pathlib",
        "typing"
      ],
      "hash": "fa67b66a2df9b0a735345eed1628571710a243564f5fe9313f7ef8552bccbe91",
      "artifact_id": "2d540399-398b-48a4-aa64-3c94c173b058"
    },
    {
      "module_id": "core.rag_context.__init__",
      "path": "core/rag_context/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Enhancement System\n\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 AI-\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \n\u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438\u0437 .cursor/rules \u0438 struct.json",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "PromptEnhancer",
        "RAGConfig",
        "config",
        "enhancer"
      ],
      "hash": "5ac7f7467ea4bcc73c1433be7e9694c8079808150e2e8e8694c10ec1bd963272",
      "artifact_id": "15c6f878-f13c-4118-9b64-c8bfd8490b0d"
    },
    {
      "module_id": "core.rag_context.config",
      "path": "core/rag_context/config.py",
      "category": "core",
      "module_doc": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
          "line_range": [
            33,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "has_struct_support",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            59,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        }
      ],
      "classes": [
        {
          "name": "RAGConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f RAG Context Enhancement",
          "line_range": [
            9,
            61
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
              "line_range": [
                33,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "has_struct_support",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                59,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "print"
        ],
        "is_valid": [],
        "has_struct_support": []
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "pathlib",
        "typing"
      ],
      "hash": "8712b8b3a7612eaa6ee083d23b6262f104f0854308b5ef9e98c964a516d649ab",
      "artifact_id": "fd0e4d23-c73f-449d-98d3-d6fa60231158"
    },
    {
      "module_id": "core.rag_context.session_context_manager",
      "path": "core/rag_context/session_context_manager.py",
      "category": "core",
      "module_doc": "Session Context Manager - Phase 4A.2.3 Safe Implementation\nBuilds on Phase 4A.2.1 (knowledge extraction) and 4A.2.2 (discovery) safely.",
      "functions": [
        {
          "name": "create_context_manager",
          "docstring": "Create context manager safely",
          "line_range": [
            377,
            387
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "create_session_context_manager",
          "docstring": "Create session context manager safely (alias for create_context_manager)",
          "line_range": [
            390,
            393
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            52,
            67
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "extract_session_context",
          "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
          "line_range": [
            69,
            121
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_files_safely",
          "docstring": "Get session files safely",
          "line_range": [
            123,
            142
          ],
          "parameters": [
            "self",
            "specific_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_from_session",
          "docstring": "Extract context from a single session file (simple implementation)",
          "line_range": [
            144,
            188
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_session_description",
          "docstring": "Extract session description from data",
          "line_range": [
            190,
            197
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_decisions",
          "docstring": "Extract key decisions from session data",
          "line_range": [
            199,
            209
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_reasoning",
          "docstring": "Extract reasoning chains from session data",
          "line_range": [
            211,
            225
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_problem_type",
          "docstring": "Extract problem type from session data",
          "line_range": [
            227,
            243
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_solutions",
          "docstring": "Extract solutions used from session data",
          "line_range": [
            245,
            251
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_files",
          "docstring": "Extract relevant context files from session data",
          "line_range": [
            253,
            265
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_generate_restoration_prompt",
          "docstring": "Generate restoration prompt for session context",
          "line_range": [
            267,
            292
          ],
          "parameters": [
            "self",
            "description",
            "decisions",
            "reasoning",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_save_snapshots_safely",
          "docstring": "Save session snapshots to JSON safely",
          "line_range": [
            294,
            316
          ],
          "parameters": [
            "self",
            "snapshots"
          ],
          "decorators": []
        },
        {
          "name": "restore_session_context",
          "docstring": "Restore context for a specific session",
          "line_range": [
            318,
            337
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_context_stats",
          "docstring": "Get context management statistics",
          "line_range": [
            339,
            365
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable context manager safely",
          "line_range": [
            367,
            369
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable context manager",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionSnapshot",
          "docstring": "Captured session context for restoration",
          "line_range": [
            17,
            27
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextExtractionResult",
          "docstring": "Result of context extraction operation",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SessionContextManager",
          "docstring": "Session Context Preservation for maintaining decision-making context.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1/4A.2.2 components\n- No breaking changes to existing session logging\n- Graceful fallback if session data unavailable\n- Simple file-based storage (no complex dependencies)",
          "line_range": [
            41,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                52,
                67
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery"
              ]
            },
            {
              "name": "extract_session_context",
              "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
              "line_range": [
                69,
                121
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_get_session_files_safely",
              "docstring": "Get session files safely",
              "line_range": [
                123,
                142
              ],
              "parameters": [
                "self",
                "specific_file"
              ]
            },
            {
              "name": "_extract_context_from_session",
              "docstring": "Extract context from a single session file (simple implementation)",
              "line_range": [
                144,
                188
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_extract_session_description",
              "docstring": "Extract session description from data",
              "line_range": [
                190,
                197
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_decisions",
              "docstring": "Extract key decisions from session data",
              "line_range": [
                199,
                209
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_reasoning",
              "docstring": "Extract reasoning chains from session data",
              "line_range": [
                211,
                225
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_problem_type",
              "docstring": "Extract problem type from session data",
              "line_range": [
                227,
                243
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_solutions",
              "docstring": "Extract solutions used from session data",
              "line_range": [
                245,
                251
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_context_files",
              "docstring": "Extract relevant context files from session data",
              "line_range": [
                253,
                265
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_generate_restoration_prompt",
              "docstring": "Generate restoration prompt for session context",
              "line_range": [
                267,
                292
              ],
              "parameters": [
                "self",
                "description",
                "decisions",
                "reasoning",
                "problem_type"
              ]
            },
            {
              "name": "_save_snapshots_safely",
              "docstring": "Save session snapshots to JSON safely",
              "line_range": [
                294,
                316
              ],
              "parameters": [
                "self",
                "snapshots"
              ]
            },
            {
              "name": "restore_session_context",
              "docstring": "Restore context for a specific session",
              "line_range": [
                318,
                337
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_context_stats",
              "docstring": "Get context management statistics",
              "line_range": [
                339,
                365
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable context manager safely",
              "line_range": [
                367,
                369
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable context manager",
              "line_range": [
                371,
                373
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SmartCodeDiscovery",
          "SafeKnowledgeExtractor"
        ],
        "extract_session_context": [
          "snapshots.append",
          "errors.append",
          "self._get_session_files_safely",
          "self._save_snapshots_safely",
          "ContextExtractionResult",
          "sum",
          "len",
          "time.time",
          "self._extract_context_from_session"
        ],
        "_get_session_files_safely": [
          "specific_file.exists",
          "sorted",
          "file.is_file",
          "session_files.append",
          "f.stat"
        ],
        "_extract_context_from_session": [
          "self._extract_decisions",
          "session_data.append",
          "self._extract_problem_type",
          "open",
          "self._extract_session_description",
          "self._extract_context_files",
          "self._generate_restoration_prompt",
          "line.strip",
          "json.loads",
          "self._extract_reasoning",
          "SessionSnapshot",
          "self._extract_solutions",
          "time.time"
        ],
        "_extract_session_description": [
          "entry.get",
          "len"
        ],
        "_extract_decisions": [
          "decisions.append",
          "any",
          "entry.get"
        ],
        "_extract_reasoning": [
          "str",
          "any",
          "entry.get",
          "reasoning.append"
        ],
        "_extract_problem_type": [
          "any",
          "entry.get",
          "problem_keywords.items"
        ],
        "_extract_solutions": [
          "solutions.append",
          "entry.get"
        ],
        "_extract_context_files": [
          "list",
          "files.add",
          "description.split",
          "word.strip",
          "set",
          "any",
          "entry.get"
        ],
        "_generate_restoration_prompt": [
          "prompt_parts.append",
          "enumerate"
        ],
        "_save_snapshots_safely": [
          "int",
          "open",
          "snapshots_file.exists",
          "json.dump",
          "print",
          "snapshots_file.rename",
          "snapshots_data.append",
          "time.time",
          "asdict"
        ],
        "restore_session_context": [
          "snapshot_data.get",
          "snapshots_file.exists",
          "json.load",
          "open"
        ],
        "get_context_stats": [
          "snapshot.get",
          "open",
          "snapshots_file.exists",
          "json.load",
          "len"
        ],
        "disable": [],
        "enable": [],
        "create_context_manager": [
          "manager.disable",
          "SessionContextManager",
          "print"
        ],
        "create_session_context_manager": [
          "create_context_manager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SmartCodeDiscovery",
        "asdict",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "57328a157757a75b8daf27a187622e30db3b463df38139e30e30205a0cc2ffc8",
      "artifact_id": "95ffd43f-b5f3-4845-9037-4a0bf35a1fda"
    },
    {
      "module_id": "core.rag_context.retriever",
      "path": "core/rag_context/retriever.py",
      "category": "core",
      "module_doc": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            35
          ],
          "parameters": [
            "self",
            "embedder",
            "max_chunks",
            "similarity_threshold"
          ],
          "decorators": []
        },
        {
          "name": "index_documents",
          "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
          "line_range": [
            37,
            76
          ],
          "parameters": [
            "self",
            "documents"
          ],
          "decorators": []
        },
        {
          "name": "retrieve",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            78,
            112
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_chunk_document",
          "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
          "line_range": [
            114,
            138
          ],
          "parameters": [
            "self",
            "document",
            "chunk_size"
          ],
          "decorators": []
        },
        {
          "name": "_deduplicate_results",
          "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            140,
            154
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
          "line_range": [
            156,
            164
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RetrievalResult",
          "docstring": "\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            16,
            20
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextRetriever",
          "docstring": "FAISS-based retriever \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            23,
            164
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                35
              ],
              "parameters": [
                "self",
                "embedder",
                "max_chunks",
                "similarity_threshold"
              ]
            },
            {
              "name": "index_documents",
              "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
              "line_range": [
                37,
                76
              ],
              "parameters": [
                "self",
                "documents"
              ]
            },
            {
              "name": "retrieve",
              "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
              "line_range": [
                78,
                112
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_chunk_document",
              "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
              "line_range": [
                114,
                138
              ],
              "parameters": [
                "self",
                "document",
                "chunk_size"
              ]
            },
            {
              "name": "_deduplicate_results",
              "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                140,
                154
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
              "line_range": [
                156,
                164
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "index_documents": [
          "self._chunk_document",
          "faiss.IndexFlatIP",
          "texts.extend",
          "len",
          "print",
          "normalized_embeddings.append",
          "np.vstack"
        ],
        "retrieve": [
          "zip",
          "RetrievalResult",
          "float",
          "query_embedding.reshape",
          "len",
          "print",
          "self._deduplicate_results",
          "results.append",
          "min"
        ],
        "_chunk_document": [
          "content.split",
          "current_chunk.strip",
          "chunks.append",
          "len"
        ],
        "_deduplicate_results": [
          "list",
          "unique_results.sort",
          "source_to_best.values"
        ],
        "get_stats": [
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "SimpleEmbedder",
        "Tuple",
        "dataclass",
        "dataclasses",
        "embedder",
        "faiss",
        "json",
        "loader",
        "numpy",
        "pathlib",
        "typing"
      ],
      "hash": "551fd92175d5e562bef96e127736f97d365d06be58df4b7b543ec72280fe84de",
      "artifact_id": "8680084b-dbb8-446c-875c-cda07f4a45a8"
    },
    {
      "module_id": "core.rag_context.cli_interface",
      "path": "core/rag_context/cli_interface.py",
      "category": "core",
      "module_doc": "Enhanced CLI Interface for RAG Context Management\nNow includes Self-Refine Pipeline integration",
      "functions": [
        {
          "name": "create_main_parser",
          "docstring": "Create the main argument parser with all subcommands",
          "line_range": [
            20,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "handle_rag_commands",
          "docstring": "Handle RAG-related commands",
          "line_range": [
            93,
            123
          ],
          "parameters": [
            "args",
            "cli_tool"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_commands",
          "docstring": "Handle self-refine pipeline commands",
          "line_range": [
            126,
            139
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_code",
          "docstring": "Handle code refinement",
          "line_range": [
            142,
            183
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_text",
          "docstring": "Handle text refinement",
          "line_range": [
            186,
            222
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_report",
          "docstring": "Handle refinement report generation",
          "line_range": [
            225,
            241
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_quick",
          "docstring": "Handle quick refinement",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            259,
            283
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_main",
          "docstring": "Synchronous wrapper for main",
          "line_range": [
            286,
            288
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_main_parser": [
          "refine_parser.add_subparsers",
          "refine_subparsers.add_parser",
          "code_parser.add_argument",
          "text_parser.add_argument",
          "stats_parser.add_argument",
          "enhance_parser.add_argument",
          "struct_parser.add_argument",
          "report_parser.add_argument",
          "quick_parser.add_argument",
          "argparse.ArgumentParser",
          "refresh_parser.add_argument",
          "search_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser"
        ],
        "handle_rag_commands": [
          "cli_tool.refresh_command",
          "cli_tool.enhance_command",
          "cli_tool.stats_command",
          "getattr",
          "print",
          "cli_tool.search_rules_command",
          "cli_tool.struct_command"
        ],
        "handle_refine_commands": [
          "handle_refine_code",
          "sys.exit",
          "handle_refine_text",
          "handle_refine_quick",
          "print",
          "handle_refine_report"
        ],
        "handle_refine_code": [
          "SelfRefinePipeline",
          "sys.exit",
          "print",
          "pipeline.refine",
          "pipeline.generate_refinement_report",
          "Path",
          "pipeline.refine_code_file"
        ],
        "handle_refine_text": [
          "SelfRefinePipeline",
          "sys.exit",
          "print",
          "len",
          "pipeline.refine",
          "Path"
        ],
        "handle_refine_report": [
          "json.loads",
          "print",
          "sys.exit",
          "Path"
        ],
        "handle_refine_quick": [
          "quick_refine_code",
          "quick_refine_text",
          "print"
        ],
        "main": [
          "create_main_parser",
          "sys.exit",
          "hasattr",
          "handle_refine_commands",
          "parser.print_help",
          "print",
          "CLITool",
          "handle_rag_commands",
          "parser.parse_args",
          "RAGConfig"
        ],
        "sync_main": [
          "main",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "CLITool",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "RefinementType",
        "SelfRefinePipeline",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "interfaces.cli_tool",
        "interfaces.self_refine_pipeline",
        "json",
        "pathlib",
        "quick_refine_code",
        "quick_refine_text",
        "sys",
        "typing"
      ],
      "hash": "937f50b0dc1424f272a0bfc77654337f1d7ce1a090952463264f0c10b2f592ea",
      "artifact_id": "e97f1cc1-5c47-447b-a1d0-4244c1d43c77"
    },
    {
      "module_id": "core.llmgenie.llm_client",
      "path": "core/llmgenie/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.error",
          "self._query_ollama",
          "json.dumps",
          "self._query_hybrid",
          "self._query_anthropic",
          "asyncio.sleep",
          "logging.info",
          "json.load",
          "logging.warning",
          "range",
          "self._query_grok",
          "Path"
        ],
        "_query_grok": [
          "logging.error",
          "result.get",
          "logging.info",
          "aiohttp.ClientSession",
          "response.json",
          "session.post"
        ],
        "_query_anthropic": [
          "logging.error",
          "result.get",
          "logging.info",
          "aiohttp.ClientSession",
          "response.json",
          "session.post"
        ],
        "_query_ollama": [
          "logging.error",
          "result.get",
          "logging.debug",
          "logging.info",
          "aiohttp.ClientSession",
          "response.json",
          "session.post"
        ],
        "_query_hybrid": [
          "self._query_ollama",
          "isinstance",
          "self._query_anthropic",
          "logging.info",
          "asyncio.gather",
          "len",
          "self._query_grok"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "ab5eccaf-b2ba-45b3-a4e6-04c96d17048a"
    },
    {
      "module_id": "core.llmgenie.cli",
      "path": "core/llmgenie/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "context_parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "subparsers.add_parser"
        ],
        "normalize_patterns": [
          "result.append",
          "result.extend",
          "item.split",
          "p.strip",
          "item.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli",
        "core.llmgenie.modules.cli.analyze_duplicates",
        "core.llmgenie.modules.cli.audit",
        "core.llmgenie.modules.cli.context",
        "core.llmgenie.modules.cli.copilot",
        "core.llmgenie.modules.cli.dogfood",
        "core.llmgenie.modules.cli.handlers",
        "core.llmgenie.modules.cli.parse",
        "core.llmgenie.modules.cli.query",
        "core.llmgenie.modules.cli.review",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.modules.commands.queue",
        "core.llmgenie.self_run",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "490033407f065a15e63e0682825a90bf9d2a9736f6a2f2f8ec71545d08f8dc9b",
      "artifact_id": "b33493d5-8adc-4bc9-bb5b-b5e6049077cb"
    },
    {
      "module_id": "core.rag_context.interfaces.self_refine_pipeline",
      "path": "core/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "module_doc": "Self-Refine Pipeline with MCP Tools Integration\nEnhanced iterative improvement system for code, text, and workflow artifacts\nPart of Phase 4A.3: Self-Refine Pipeline Supercharged",
      "functions": [
        {
          "name": "quick_refine_code",
          "docstring": "Quick function to refine code content",
          "line_range": [
            316,
            320
          ],
          "parameters": [
            "code",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "quick_refine_text",
          "docstring": "Quick function to refine text content",
          "line_range": [
            323,
            327
          ],
          "parameters": [
            "text",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "parameters": [
            "self",
            "max_iterations",
            "confidence_threshold"
          ],
          "decorators": []
        },
        {
          "name": "_check_mcp_tools",
          "docstring": "Check which MCP tools are available",
          "line_range": [
            61,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refine",
          "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
          "line_range": [
            71,
            133
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context",
            "custom_criteria"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_context",
          "docstring": "Enhance context using MCP tools if available",
          "line_range": [
            135,
            161
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_critique_with_mcp",
          "docstring": "Generate critique using MCP tools for enhanced analysis",
          "line_range": [
            163,
            210
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_apply_refinements",
          "docstring": "Apply refinements based on critique results",
          "line_range": [
            212,
            230
          ],
          "parameters": [
            "self",
            "content",
            "critique_result",
            "refinement_type"
          ],
          "decorators": []
        },
        {
          "name": "_validate_improvements",
          "docstring": "Validate that refinements actually improved the content",
          "line_range": [
            232,
            246
          ],
          "parameters": [
            "self",
            "original",
            "refined",
            "critique"
          ],
          "decorators": []
        },
        {
          "name": "refine_code_file",
          "docstring": "Convenience method to refine an entire code file",
          "line_range": [
            248,
            272
          ],
          "parameters": [
            "self",
            "file_path",
            "backup"
          ],
          "decorators": []
        },
        {
          "name": "generate_refinement_report",
          "docstring": "Generate a comprehensive report of the refinement process",
          "line_range": [
            274,
            303
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "_get_most_used_tools",
          "docstring": "Get list of most frequently used MCP tools",
          "line_range": [
            305,
            312
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RefinementType",
          "docstring": "Types of content that can be refined",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RefinementResult",
          "docstring": "Result of a refinement iteration",
          "line_range": [
            32,
            41
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SelfRefinePipeline",
          "docstring": "Enhanced Self-Refine Pipeline with MCP Tools Integration\n\nFeatures:\n- Multi-type content refinement (code, text, config, etc.)\n- MCP tools integration for context-aware critique\n- Automatic logging of refinement process\n- Configurable improvement criteria\n- Iterative improvement until satisfaction threshold",
          "line_range": [
            44,
            312
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                56,
                59
              ],
              "parameters": [
                "self",
                "max_iterations",
                "confidence_threshold"
              ]
            },
            {
              "name": "_check_mcp_tools",
              "docstring": "Check which MCP tools are available",
              "line_range": [
                61,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refine",
              "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
              "line_range": [
                71,
                133
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context",
                "custom_criteria"
              ]
            },
            {
              "name": "_enhance_context",
              "docstring": "Enhance context using MCP tools if available",
              "line_range": [
                135,
                161
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_critique_with_mcp",
              "docstring": "Generate critique using MCP tools for enhanced analysis",
              "line_range": [
                163,
                210
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_apply_refinements",
              "docstring": "Apply refinements based on critique results",
              "line_range": [
                212,
                230
              ],
              "parameters": [
                "self",
                "content",
                "critique_result",
                "refinement_type"
              ]
            },
            {
              "name": "_validate_improvements",
              "docstring": "Validate that refinements actually improved the content",
              "line_range": [
                232,
                246
              ],
              "parameters": [
                "self",
                "original",
                "refined",
                "critique"
              ]
            },
            {
              "name": "refine_code_file",
              "docstring": "Convenience method to refine an entire code file",
              "line_range": [
                248,
                272
              ],
              "parameters": [
                "self",
                "file_path",
                "backup"
              ]
            },
            {
              "name": "generate_refinement_report",
              "docstring": "Generate a comprehensive report of the refinement process",
              "line_range": [
                274,
                303
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "_get_most_used_tools",
              "docstring": "Get list of most frequently used MCP tools",
              "line_range": [
                305,
                312
              ],
              "parameters": [
                "self",
                "results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._check_mcp_tools"
        ],
        "_check_mcp_tools": [],
        "refine": [
          "critique_result.get",
          "self._enhance_context",
          "self._critique_with_mcp",
          "self._validate_improvements",
          "range",
          "RefinementResult",
          "auto_logger.log_workflow_phase",
          "iterations.append",
          "time.time",
          "self._apply_refinements"
        ],
        "_enhance_context": [
          "mcp_tools_used.append",
          "context.copy"
        ],
        "_critique_with_mcp": [
          "context.get",
          "critique_points.append",
          "critique_points.extend",
          "mcp_tools_used.append"
        ],
        "_apply_refinements": [
          "str"
        ],
        "_validate_improvements": [
          "min",
          "len"
        ],
        "refine_code_file": [
          "file_path.write_text",
          "str",
          "FileNotFoundError",
          "file_path.read_text",
          "file_path.exists",
          "file_path.with_suffix",
          "backup_path.write_text",
          "self.refine",
          "Path"
        ],
        "generate_refinement_report": [
          "set",
          "self._get_most_used_tools",
          "sum",
          "len"
        ],
        "_get_most_used_tools": [
          "tool_counts.get",
          "sorted",
          "tool_counts.keys"
        ],
        "quick_refine_code": [
          "SelfRefinePipeline",
          "pipeline.refine"
        ],
        "quick_refine_text": [
          "SelfRefinePipeline",
          "pipeline.refine"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "auto_logger",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9f3711a6c9240c508770c3725dedc2933aeb045fb1c878313d24dee7b578317d",
      "artifact_id": "28b77e7e-cee7-4fe7-894d-0b39f6800c33"
    },
    {
      "module_id": "core.rag_context.interfaces.websocket_server",
      "path": "core/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "module_doc": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            265,
            295
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            34
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "register_connection",
          "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            36,
            39
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "unregister_connection",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            41,
            44
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "broadcast_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
          "line_range": [
            46,
            53
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            55,
            176
          ],
          "parameters": [
            "self",
            "websocket",
            "message_str"
          ],
          "decorators": []
        },
        {
          "name": "handle_connection",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            178,
            206
          ],
          "parameters": [
            "self",
            "websocket",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            208,
            226
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "get_client_example",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
          "line_range": [
            228,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WebSocketServer",
          "docstring": "WebSocket Server \u0434\u043b\u044f real-time \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            22,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                34
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "register_connection",
              "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                36,
                39
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "unregister_connection",
              "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                41,
                44
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "broadcast_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
              "line_range": [
                46,
                53
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                55,
                176
              ],
              "parameters": [
                "self",
                "websocket",
                "message_str"
              ]
            },
            {
              "name": "handle_connection",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                178,
                206
              ],
              "parameters": [
                "self",
                "websocket",
                "path"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                208,
                226
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "get_client_example",
              "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
              "line_range": [
                228,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set",
          "RAGConfig",
          "ImportError",
          "PromptEnhancer"
        ],
        "register_connection": [
          "len",
          "print"
        ],
        "unregister_connection": [
          "len",
          "print"
        ],
        "broadcast_message": [
          "websocket.send",
          "json.dumps",
          "asyncio.gather"
        ],
        "handle_message": [
          "round",
          "isinstance",
          "open",
          "str",
          "json.load",
          "rules.append",
          "message.get",
          "len",
          "asyncio.get_event_loop",
          "json.loads",
          "params.get",
          "locals"
        ],
        "handle_connection": [
          "json.dumps",
          "self.unregister_connection",
          "print",
          "websocket.send",
          "self.handle_message",
          "self.register_connection"
        ],
        "run": [
          "server.wait_closed",
          "websockets.serve",
          "print"
        ],
        "get_client_example": [],
        "main": [
          "server.run",
          "int",
          "print",
          "len",
          "server.get_client_example",
          "WebSocketServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Set",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing",
        "websockets"
      ],
      "hash": "9676904c881eaee00c82fd468681d7b301b3145a45389a3af56b7157906bce0c",
      "artifact_id": "1fb343cc-3397-4926-bf75-ac36e1aea88e"
    },
    {
      "module_id": "core.rag_context.interfaces.http_api",
      "path": "core/rag_context/interfaces/http_api.py",
      "category": "core",
      "module_doc": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            261,
            281
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "_setup_routes",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
          "line_range": [
            85,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            238,
            249
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            251,
            258
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "startup_event",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            89,
            93
          ],
          "parameters": [],
          "decorators": [
            "self.app.on_event('startup')"
          ]
        },
        {
          "name": "root",
          "docstring": "\u041a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 endpoint",
          "line_range": [
            96,
            103
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            106,
            112
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/health')"
          ]
        },
        {
          "name": "enhance_prompt",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            115,
            140
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/enhance', response_model=EnhanceResponse)"
          ]
        },
        {
          "name": "search_rules",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            143,
            171
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/rules/search', response_model=RulesResponse)"
          ]
        },
        {
          "name": "get_project_structure",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            174,
            187
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/project/structure')"
          ]
        },
        {
          "name": "get_system_stats",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            190,
            197
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/stats')"
          ]
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            200,
            213
          ],
          "parameters": [],
          "decorators": [
            "self.app.post('/admin/refresh')"
          ]
        },
        {
          "name": "enhance_prompt_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f enhance \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            217,
            225
          ],
          "parameters": [
            "query",
            "max_context"
          ],
          "decorators": [
            "self.app.get('/enhance')"
          ]
        },
        {
          "name": "search_rules_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f rules search \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439  ",
          "line_range": [
            228,
            236
          ],
          "parameters": [
            "query",
            "max_rules"
          ],
          "decorators": [
            "self.app.get('/rules/search')"
          ]
        }
      ],
      "classes": [
        {
          "name": "EnhanceRequest",
          "docstring": "",
          "line_range": [
            25,
            28
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "EnhanceResponse",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesRequest",
          "docstring": "",
          "line_range": [
            38,
            40
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RuleInfo",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesResponse",
          "docstring": "",
          "line_range": [
            51,
            53
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HTTPAPIServer",
          "docstring": "HTTP API Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            56,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "_setup_routes",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
              "line_range": [
                85,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                238,
                249
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                251,
                258
              ],
              "parameters": [
                "self",
                "host"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "FastAPI",
          "ImportError",
          "PromptEnhancer",
          "self._setup_routes",
          "RAGConfig"
        ],
        "_setup_routes": [],
        "startup_event": [
          "print"
        ],
        "root": [],
        "health_check": [],
        "enhance_prompt": [
          "max",
          "EnhanceResponse",
          "enhanced_query.count",
          "str",
          "HTTPException",
          "len"
        ],
        "search_rules": [
          "round",
          "str",
          "HTTPException",
          "RulesResponse",
          "rules.append",
          "len",
          "RuleInfo"
        ],
        "get_project_structure": [
          "str",
          "json.load",
          "HTTPException",
          "open"
        ],
        "get_system_stats": [
          "str",
          "HTTPException"
        ],
        "refresh_index": [
          "str",
          "HTTPException"
        ],
        "enhance_prompt_get": [
          "Query",
          "EnhanceRequest",
          "enhance_prompt"
        ],
        "search_rules_get": [
          "Query",
          "RulesRequest",
          "search_rules"
        ],
        "run": [
          "uvicorn.Server",
          "server.serve",
          "uvicorn.Config",
          "print"
        ],
        "run_sync": [
          "uvicorn.run"
        ],
        "main": [
          "server.run",
          "HTTPAPIServer",
          "int",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "Query",
        "RAGConfig",
        "asyncio",
        "config",
        "enhancer",
        "fastapi",
        "fastapi.middleware.cors",
        "json",
        "pathlib",
        "pydantic",
        "sys",
        "typing",
        "uvicorn"
      ],
      "hash": "1af7ded9db88a3b9e27d52eb109dc02b6f4149443f98b05453389ef62d17c65f",
      "artifact_id": "02514993-cf23-4d57-8bf5-0018ed8a4055"
    },
    {
      "module_id": "core.rag_context.interfaces.mcp_server",
      "path": "core/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "module_doc": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 RAG (5 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432) + Struct Tools (6 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432)\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 MCP Python SDK",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            822,
            836
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            71,
            105
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
          "line_range": [
            107,
            614
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_struct_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            616,
            769
          ],
          "parameters": [
            "self",
            "name",
            "arguments"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
          "line_range": [
            771,
            788
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            790,
            802
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_vscode_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
          "line_range": [
            804,
            807
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cursor_config",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            809,
            819
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "handle_list_tools",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            111,
            388
          ],
          "parameters": [],
          "decorators": [
            "self.server.list_tools()"
          ]
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            391,
            614
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        }
      ],
      "classes": [
        {
          "name": "MCPServer",
          "docstring": "MCP Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435 + Struct Tools",
          "line_range": [
            68,
            819
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                71,
                105
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
              "line_range": [
                107,
                614
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_struct_tool",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                616,
                769
              ],
              "parameters": [
                "self",
                "name",
                "arguments"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
              "line_range": [
                771,
                788
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                790,
                802
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_vscode_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
              "line_range": [
                804,
                807
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cursor_config",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                809,
                819
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Server",
          "ImportError",
          "PromptEnhancer",
          "create_knowledge_extractor",
          "create_session_context_manager",
          "self._setup_handlers",
          "StructureAnalyzer",
          "print",
          "create_cursor_intelligence",
          "StructureConfig",
          "RAGConfig",
          "Path",
          "create_discovery_system"
        ],
        "_setup_handlers": [],
        "handle_list_tools": [
          "types.Tool",
          "tools.extend"
        ],
        "handle_call_tool": [
          "auto_logger.log_tool_result",
          "name.startswith",
          "cursor_intelligence.get_proactive_suggestions",
          "len",
          "time.time",
          "auto_logger.log_tool_call",
          "round",
          "json.load",
          "session_context_manager.extract_session_context",
          "discovery_system.search_solutions",
          "Path",
          "json.dumps",
          "self._handle_struct_tool",
          "extractor.extract_code_knowledge",
          "datetime.now",
          "suggestions_system.get_workflow_suggestions",
          "cursor_intelligence.analyze_workflow_context",
          "detect_and_log_model_context",
          "arguments.get",
          "types.TextContent",
          "open",
          "str",
          "cursor_intelligence._insight_to_dict",
          "rules.append",
          "workflow_analysis.get",
          "locals"
        ],
        "_handle_struct_tool": [
          "json.dumps",
          "arguments.get",
          "types.TextContent",
          "str",
          "result.update",
          "len"
        ],
        "run_stdio": [
          "NotificationOptions",
          "InitializationOptions",
          "print"
        ],
        "get_cursor_config": [],
        "get_vscode_config": [
          "self.get_cursor_config"
        ],
        "save_cursor_config": [
          "self.get_cursor_config",
          "open",
          "json.dump",
          "print",
          "Path.cwd"
        ],
        "main": [
          "server.run_stdio",
          "server.save_cursor_config",
          "MCPServer",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "InitializationOptions",
        "List",
        "NotificationOptions",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "auto_logger",
        "code_discovery",
        "config",
        "create_cursor_intelligence",
        "create_discovery_system",
        "create_knowledge_extractor",
        "create_session_context_manager",
        "cursor_intelligence",
        "datetime",
        "detect_and_log_model_context",
        "enhancer",
        "json",
        "knowledge_extractor",
        "mcp.server",
        "mcp.server.models",
        "mcp.server.stdio",
        "mcp.types",
        "pathlib",
        "session_context_manager",
        "struct_tools.structure_analyzer",
        "sys",
        "time",
        "typing"
      ],
      "hash": "f878d69e1759e3a3e2ae48e66ba2b5ea3aade210c4a4de59ac5b727e0684b207",
      "artifact_id": "2375dc33-c3e0-489e-907e-f44cb88915a9"
    },
    {
      "module_id": "core.rag_context.interfaces.__init__",
      "path": "core/rag_context/interfaces/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435\n\n\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b:\n- MCP: \u0434\u043b\u044f Cursor, VSCode, Claude Desktop\n- HTTP API: \u0434\u043b\u044f \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n- CLI: \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n- WebSocket: \u0434\u043b\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n- Python Library: \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CLITool",
        "HTTPAPIServer",
        "MCPServer",
        "WebSocketServer",
        "cli_tool",
        "http_api",
        "mcp_server",
        "websocket_server"
      ],
      "hash": "9d6e8c8c43139ceda139fa99039ac95d086caaa368f5be4ec90746da19e7cfeb",
      "artifact_id": "b8dbdcc7-3d98-4ea3-be7b-f298f6748b7f"
    },
    {
      "module_id": "core.rag_context.interfaces.cli_tool",
      "path": "core/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "module_doc": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "functions": [
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0430\u0440\u0441\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            209,
            244
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f CLI",
          "line_range": [
            247,
            298
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            21
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "enhance_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
          "line_range": [
            23,
            52
          ],
          "parameters": [
            "self",
            "query",
            "max_context",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "search_rules_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            54,
            109
          ],
          "parameters": [
            "self",
            "query",
            "max_rules",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "stats_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            111,
            144
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "refresh_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
          "line_range": [
            146,
            163
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            165,
            206
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLITool",
          "docstring": "CLI \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439",
          "line_range": [
            16,
            206
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                21
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "enhance_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
              "line_range": [
                23,
                52
              ],
              "parameters": [
                "self",
                "query",
                "max_context",
                "output_format"
              ]
            },
            {
              "name": "search_rules_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                54,
                109
              ],
              "parameters": [
                "self",
                "query",
                "max_rules",
                "output_format"
              ]
            },
            {
              "name": "stats_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                111,
                144
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "refresh_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
              "line_range": [
                146,
                163
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                165,
                206
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "PromptEnhancer"
        ],
        "enhance_command": [
          "str",
          "json.dumps",
          "len"
        ],
        "search_rules_command": [
          "round",
          "json.dumps",
          "output.append",
          "enumerate",
          "str",
          "rules.append",
          "len"
        ],
        "stats_command": [
          "str",
          "json.dumps",
          "output.append"
        ],
        "refresh_command": [
          "str",
          "json.dumps"
        ],
        "struct_command": [
          "json.dumps",
          "output.append",
          "str",
          "open",
          "json.load"
        ],
        "create_parser": [
          "enhance_parser.add_argument",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "search_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser"
        ],
        "main": [
          "cli.refresh_command",
          "json.dumps",
          "str",
          "sys.exit",
          "create_parser",
          "cli.search_rules_command",
          "cli.struct_command",
          "cli.enhance_command",
          "parser.print_help",
          "CLITool",
          "cli.stats_command",
          "print",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d303e47d0e5ebf9fe48d32604c56e3639b3d1d8c87e36e6a64028174d7bb4cbd",
      "artifact_id": "424c3462-22ac-459b-94a0-1db0cda83167"
    },
    {
      "module_id": "core.rag_context.interfaces.auto_logger",
      "path": "core/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "module_doc": "Auto Logger for MCP Server Integration\nAutomatic workflow logging without efficiency loss\nPart of Phase 4A.2: Agent-as-a-Judge Enhanced",
      "functions": [
        {
          "name": "log_mcp_tool_call",
          "docstring": "Convenience function for MCP tool call logging",
          "line_range": [
            261,
            264
          ],
          "parameters": [
            "tool_name",
            "arguments",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_mcp_tool_result",
          "docstring": "Convenience function for MCP tool result logging",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "detect_and_log_model_context",
          "docstring": "Detect model from context and log if switch detected",
          "line_range": [
            271,
            282
          ],
          "parameters": [
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "parameters": [
            "self",
            "session_log_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_model",
          "docstring": "Detect current model based on context clues",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ensure_session",
          "docstring": "Ensure active session exists, create if needed",
          "line_range": [
            38,
            44
          ],
          "parameters": [
            "self",
            "session_name"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_call",
          "docstring": "Log MCP tool call with automatic metadata",
          "line_range": [
            46,
            62
          ],
          "parameters": [
            "self",
            "tool_name",
            "arguments",
            "model",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_result",
          "docstring": "Log tool result with performance metrics",
          "line_range": [
            64,
            79
          ],
          "parameters": [
            "self",
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_model_switch",
          "docstring": "Log model switches for continuity tracking",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "from_model",
            "to_model",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_workflow_phase",
          "docstring": "Log workflow phase transitions",
          "line_range": [
            96,
            107
          ],
          "parameters": [
            "self",
            "phase",
            "detected_by"
          ],
          "decorators": []
        },
        {
          "name": "analyze_activity_pattern",
          "docstring": "Analyze recent activity to detect workflow patterns",
          "line_range": [
            109,
            140
          ],
          "parameters": [
            "self",
            "recent_events"
          ],
          "decorators": []
        },
        {
          "name": "_detect_pattern_with_confidence",
          "docstring": "Detect patterns with evidence-based confidence scoring",
          "line_range": [
            142,
            161
          ],
          "parameters": [
            "self",
            "tool_usage",
            "models_used",
            "timespan"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_timespan",
          "docstring": "Calculate time span of events",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "events"
          ],
          "decorators": []
        },
        {
          "name": "generate_session_summary",
          "docstring": "Generate automatic session summary",
          "line_range": [
            175,
            223
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_hash_args",
          "docstring": "Create hash of arguments for deduplication",
          "line_range": [
            225,
            228
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_args",
          "docstring": "Create human-readable summary of arguments",
          "line_range": [
            230,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_append_to_log",
          "docstring": "Append event to session log file",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "self",
            "event",
            "session"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AutoLogger",
          "docstring": "Automatic logging system for MCP workflow events",
          "line_range": [
            15,
            256
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                26
              ],
              "parameters": [
                "self",
                "session_log_path"
              ]
            },
            {
              "name": "detect_model",
              "docstring": "Detect current model based on context clues",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "ensure_session",
              "docstring": "Ensure active session exists, create if needed",
              "line_range": [
                38,
                44
              ],
              "parameters": [
                "self",
                "session_name"
              ]
            },
            {
              "name": "log_tool_call",
              "docstring": "Log MCP tool call with automatic metadata",
              "line_range": [
                46,
                62
              ],
              "parameters": [
                "self",
                "tool_name",
                "arguments",
                "model",
                "session"
              ]
            },
            {
              "name": "log_tool_result",
              "docstring": "Log tool result with performance metrics",
              "line_range": [
                64,
                79
              ],
              "parameters": [
                "self",
                "tool_name",
                "result",
                "duration_ms",
                "model"
              ]
            },
            {
              "name": "log_model_switch",
              "docstring": "Log model switches for continuity tracking",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "from_model",
                "to_model",
                "context"
              ]
            },
            {
              "name": "log_workflow_phase",
              "docstring": "Log workflow phase transitions",
              "line_range": [
                96,
                107
              ],
              "parameters": [
                "self",
                "phase",
                "detected_by"
              ]
            },
            {
              "name": "analyze_activity_pattern",
              "docstring": "Analyze recent activity to detect workflow patterns",
              "line_range": [
                109,
                140
              ],
              "parameters": [
                "self",
                "recent_events"
              ]
            },
            {
              "name": "_detect_pattern_with_confidence",
              "docstring": "Detect patterns with evidence-based confidence scoring",
              "line_range": [
                142,
                161
              ],
              "parameters": [
                "self",
                "tool_usage",
                "models_used",
                "timespan"
              ]
            },
            {
              "name": "_calculate_timespan",
              "docstring": "Calculate time span of events",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "events"
              ]
            },
            {
              "name": "generate_session_summary",
              "docstring": "Generate automatic session summary",
              "line_range": [
                175,
                223
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_hash_args",
              "docstring": "Create hash of arguments for deduplication",
              "line_range": [
                225,
                228
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_summarize_args",
              "docstring": "Create human-readable summary of arguments",
              "line_range": [
                230,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_append_to_log",
              "docstring": "Append event to session log file",
              "line_range": [
                244,
                256
              ],
              "parameters": [
                "self",
                "event",
                "session"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "detect_model": [
          "context.lower",
          "any"
        ],
        "ensure_session": [
          "datetime.now"
        ],
        "log_tool_call": [
          "self._append_to_log",
          "self._summarize_args",
          "datetime.now",
          "self._hash_args",
          "self.ensure_session"
        ],
        "log_tool_result": [
          "str",
          "self._append_to_log",
          "len",
          "datetime.now"
        ],
        "log_model_switch": [
          "self._append_to_log",
          "datetime.now"
        ],
        "log_workflow_phase": [
          "self._append_to_log",
          "datetime.now"
        ],
        "analyze_activity_pattern": [
          "event.get",
          "list",
          "self._detect_pattern_with_confidence",
          "tool_usage.keys",
          "self._calculate_timespan",
          "set",
          "models_used.add",
          "tool_usage.get",
          "len",
          "event_timespan.total_seconds"
        ],
        "_detect_pattern_with_confidence": [
          "tool_usage.keys",
          "tool.startswith",
          "tool_usage.get",
          "sum",
          "len",
          "min"
        ],
        "_calculate_timespan": [
          "datetime.fromisoformat",
          "len"
        ],
        "generate_session_summary": [
          "event.get",
          "list",
          "json.loads",
          "open",
          "set",
          "tools_used.add",
          "log_file.exists",
          "models_used.add",
          "phases.add",
          "line.strip",
          "events.append",
          "len"
        ],
        "_hash_args": [
          "args_str.encode",
          "json.dumps",
          "hashlib.md5"
        ],
        "_summarize_args": [
          "args.items",
          "summary_parts.append",
          "isinstance",
          "len"
        ],
        "_append_to_log": [
          "__import__",
          "json.dumps",
          "open",
          "print",
          "f.write"
        ],
        "log_mcp_tool_call": [
          "auto_logger.log_tool_call"
        ],
        "log_mcp_tool_result": [
          "auto_logger.log_tool_result"
        ],
        "detect_and_log_model_context": [
          "hasattr",
          "auto_logger.log_model_switch",
          "auto_logger.detect_model"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "f2bc412c5b72a8930278fff9018170ee36da5ebc5b1190fbbbb146eb456da51e",
      "artifact_id": "a7646a9d-1b11-4228-8364-4795a821300c"
    },
    {
      "module_id": "core.llmgenie.mcp.tools",
      "path": "core/llmgenie/mcp/tools.py",
      "category": "core",
      "module_doc": "MCP Tools Implementation\n\nModular tools architecture:\n- HandoffTools: Context transfer validation\n- ProjectTools: Project state management  \n- AgentTools: Agent orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all handoff tools with MCP server",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_handoff",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
          "line_range": [
            36,
            64
          ],
          "parameters": [
            "self",
            "package_data"
          ],
          "decorators": []
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            66,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            105,
            107
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all project tools with MCP server",
          "line_range": [
            109,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            116,
            142
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            174,
            182
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            188,
            192
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all agent tools with MCP server",
          "line_range": [
            194,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
          "line_range": [
            199,
            271
          ],
          "parameters": [
            "self",
            "agent_type",
            "task",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
          "line_range": [
            273,
            289
          ],
          "parameters": [
            "self",
            "agent_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffTools",
          "docstring": "Tools for handoff validation and context transfer",
          "line_range": [
            23,
            99
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all handoff tools with MCP server",
              "line_range": [
                31,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_handoff",
              "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
              "line_range": [
                36,
                64
              ],
              "parameters": [
                "self",
                "package_data"
              ]
            },
            {
              "name": "get_handoff_template",
              "docstring": "Get handoff package template with required files and validation criteria",
              "line_range": [
                66,
                99
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ProjectTools",
          "docstring": "Tools for project state and workflow management",
          "line_range": [
            102,
            182
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                105,
                107
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all project tools with MCP server",
              "line_range": [
                109,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_state",
              "docstring": "Get current project state",
              "line_range": [
                116,
                142
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_rules_manifest",
              "docstring": "Get rules manifest",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workflow_modes",
              "docstring": "Get available workflow modes",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Health check endpoint",
              "line_range": [
                174,
                182
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AgentTools",
          "docstring": "Tools for agent orchestration and task execution",
          "line_range": [
            185,
            289
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                188,
                192
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all agent tools with MCP server",
              "line_range": [
                194,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_agent_task",
              "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
              "line_range": [
                199,
                271
              ],
              "parameters": [
                "self",
                "agent_type",
                "task",
                "context"
              ]
            },
            {
              "name": "get_agent_status",
              "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
              "line_range": [
                273,
                289
              ],
              "parameters": [
                "self",
                "agent_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskClassifier",
          "ModelRouter",
          "self._register_tools"
        ],
        "_register_tools": [],
        "validate_handoff": [
          "str",
          "HandoffPackage"
        ],
        "get_handoff_template": [],
        "get_project_state": [
          "open",
          "str",
          "json.load",
          "state.get",
          "Path",
          "project_state_path.exists"
        ],
        "get_rules_manifest": [
          "str",
          "json.load",
          "open"
        ],
        "get_workflow_modes": [],
        "health_check": [
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "execution_result.get",
          "datetime.now"
        ],
        "get_agent_status": []
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "datetime",
        "fastmcp",
        "json",
        "pathlib",
        "pydantic",
        "task_router",
        "typing"
      ],
      "hash": "ab35e501f17c2819b5ed8ec1e5ed910b58708cc9bffc36a2ae144d539fdd3410",
      "artifact_id": "f860cf0d-92ca-471f-96d2-ce6292a5dc77"
    },
    {
      "module_id": "core.llmgenie.mcp.server",
      "path": "core/llmgenie/mcp/server.py",
      "category": "core",
      "module_doc": "FastMCP Server Implementation\n\nClean server initialization using decorators",
      "functions": [
        {
          "name": "validate_handoff",
          "docstring": "",
          "line_range": [
            29,
            47
          ],
          "parameters": [
            "package_data"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "",
          "line_range": [
            50,
            82
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "",
          "line_range": [
            85,
            108
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "health_check",
          "docstring": "",
          "line_range": [
            111,
            118
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "",
          "line_range": [
            121,
            171
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "",
          "line_range": [
            174,
            181
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "",
          "line_range": [
            184,
            201
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "",
          "line_range": [
            204,
            211
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_handoff": [
          "str",
          "HandoffPackage",
          "mcp.tool",
          "validator.validate_package"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ],
        "get_project_state": [
          "open",
          "str",
          "json.load",
          "mcp.tool",
          "state.get",
          "Path",
          "project_state_path.exists"
        ],
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "execution_result.get",
          "router.route_task",
          "datetime.now",
          "router.execute_with_model",
          "mcp.tool"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "str",
          "mcp.tool",
          "json.load",
          "open"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "asyncio",
        "datetime",
        "fastmcp",
        "json",
        "logging",
        "pathlib",
        "task_router",
        "typing"
      ],
      "hash": "0dff6427b5df5156492a11d9dfd2c7984b7b86e6e4972411700ace0edb3cf23d",
      "artifact_id": "457af299-5f67-49d1-a84f-66380ceec498"
    },
    {
      "module_id": "core.llmgenie.mcp.__init__",
      "path": "core/llmgenie/mcp/__init__.py",
      "category": "cli",
      "module_doc": "FastMCP Server Implementation\n\nEpic 5 Completion: Modular MCP architecture using FastMCP\n- Better initialization handling\n- Cleaner tool separation\n- Stable SSE transport",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentTools",
        "HandoffTools",
        "ProjectTools",
        "tools"
      ],
      "hash": "923abf222fd2a38c7f538f06c41510d360ade1778dfadd2d1e4c61067af77aa4",
      "artifact_id": "763fa446-7e7f-40f3-9b9d-8496d91cfe15"
    },
    {
      "module_id": "core.llmgenie.api.simple_mcp_server",
      "path": "core/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "module_doc": "Simple MCP Server for llmgenie\nUses stdio transport without FastAPI dependencies",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            16,
            22
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            25,
            54
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent",
          "line_range": [
            57,
            68
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            80,
            94
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            97,
            104
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness",
          "line_range": [
            107,
            136
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template",
          "line_range": [
            139,
            172
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_project_state": [
          "open",
          "str",
          "json.load",
          "state_file.exists",
          "mcp.tool",
          "state.get",
          "Path"
        ],
        "execute_agent_task": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "open",
          "str",
          "json.load",
          "mcp.tool",
          "manifest_file.exists",
          "Path"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ],
        "validate_handoff_package": [
          "str",
          "mcp.tool",
          "len",
          "package.get",
          "min"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "FastMCP",
        "Path",
        "datetime",
        "json",
        "mcp.server.fastmcp",
        "os",
        "pathlib"
      ],
      "hash": "9cb3574a738a8dd3591f9647deead6a732aeffb5552cdd2c58b23c1d5ea46c1a",
      "artifact_id": "d55d0d9f-6344-4890-b0b8-d7267daa7f0a"
    },
    {
      "module_id": "core.llmgenie.api.handoff_validator",
      "path": "core/llmgenie/api/handoff_validator.py",
      "category": "core",
      "module_doc": "Handoff validation module for llmgenie\nImplements automated completeness validation for context transfer packages\nBased on 016_context_transfer_protocol atomic rule",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "validate_package",
          "docstring": "Validate complete handoff package",
          "line_range": [
            86,
            125
          ],
          "parameters": [
            "self",
            "package"
          ],
          "decorators": []
        },
        {
          "name": "_validate_files",
          "docstring": "Validate individual files in package",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_find_missing_files",
          "docstring": "Find missing required file types",
          "line_range": [
            145,
            149
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_validate_startup_prompt",
          "docstring": "Validate startup prompt content",
          "line_range": [
            151,
            161
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_validate_control_questions",
          "docstring": "Validate control questions",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "questions"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate overall completeness score",
          "line_range": [
            175,
            206
          ],
          "parameters": [
            "self",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_warnings",
          "docstring": "Generate validation warnings",
          "line_range": [
            208,
            231
          ],
          "parameters": [
            "self",
            "package",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate improvement recommendations",
          "line_range": [
            233,
            251
          ],
          "parameters": [
            "self",
            "package",
            "missing_files",
            "warnings"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffFile",
          "docstring": "Single file in handoff package",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "StartupPrompt",
          "docstring": "Startup prompt validation",
          "line_range": [
            23,
            29
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ControlQuestions",
          "docstring": "Control questions validation",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffPackage",
          "docstring": "Complete handoff package for validation",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResult",
          "docstring": "Handoff validation result",
          "line_range": [
            50,
            67
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffValidator",
          "docstring": "Core handoff validation logic",
          "line_range": [
            69,
            251
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                83,
                84
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "validate_package",
              "docstring": "Validate complete handoff package",
              "line_range": [
                86,
                125
              ],
              "parameters": [
                "self",
                "package"
              ]
            },
            {
              "name": "_validate_files",
              "docstring": "Validate individual files in package",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_find_missing_files",
              "docstring": "Find missing required file types",
              "line_range": [
                145,
                149
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_validate_startup_prompt",
              "docstring": "Validate startup prompt content",
              "line_range": [
                151,
                161
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_validate_control_questions",
              "docstring": "Validate control questions",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "questions"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate overall completeness score",
              "line_range": [
                175,
                206
              ],
              "parameters": [
                "self",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_warnings",
              "docstring": "Generate validation warnings",
              "line_range": [
                208,
                231
              ],
              "parameters": [
                "self",
                "package",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate improvement recommendations",
              "line_range": [
                233,
                251
              ],
              "parameters": [
                "self",
                "package",
                "missing_files",
                "warnings"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "validate_package": [
          "self._validate_startup_prompt",
          "self._generate_recommendations",
          "all",
          "ValidationResult",
          "self._find_missing_files",
          "file_validation.values",
          "self._validate_files",
          "self._generate_warnings",
          "len",
          "self._validate_control_questions",
          "self._calculate_completeness_score"
        ],
        "_validate_files": [
          "file_path.exists",
          "file_path.stat"
        ],
        "_find_missing_files": [
          "set",
          "list"
        ],
        "_validate_startup_prompt": [
          "prompt.lower",
          "StartupPrompt"
        ],
        "_validate_control_questions": [
          "len",
          "ControlQuestions"
        ],
        "_calculate_completeness_score": [
          "max",
          "sum",
          "len",
          "file_validation.values"
        ],
        "_generate_warnings": [
          "all",
          "file_validation.items",
          "file_validation.values",
          "warnings.append",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "len"
        ]
      },
      "dependencies": [
        "BaseModel",
        "Dict",
        "Field",
        "List",
        "Optional",
        "Path",
        "Union",
        "datetime",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "typing"
      ],
      "hash": "95e1fca4753701656be3b38544e6201c6077ce68a7837cc24ecc6ae98625cbc3",
      "artifact_id": "a133d315-4ad9-4c50-90a6-506c634653cd"
    },
    {
      "module_id": "core.llmgenie.api.__init__",
      "path": "core/llmgenie/api/__init__.py",
      "category": "cli",
      "module_doc": "llmgenie API module\nFastAPI-based REST API for llmgenie orchestration",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "113730aac8ee128f272f72d14db21b5639e86fbd7697a11dc62547f8f826d153",
      "artifact_id": "145c068f-3818-4aa8-92ba-f730c2b78039"
    },
    {
      "module_id": "core.llmgenie.api.main",
      "path": "core/llmgenie/api/main.py",
      "category": "core",
      "module_doc": "FastAPI main application for llmgenie\nProvides REST API for multi-agent orchestration and workflow management",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            69,
            75
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            79,
            94
          ],
          "parameters": [],
          "decorators": [
            "app.get('/project/state', response_model=ProjectStateResponse)"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing",
          "line_range": [
            98,
            164
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/agents/execute', response_model=AgentResponse)"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            167,
            174
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "app.get('/agents/status/{agent_id}')"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            178,
            185
          ],
          "parameters": [],
          "decorators": [
            "app.get('/rules/manifest')"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            188,
            195
          ],
          "parameters": [],
          "decorators": [
            "app.get('/workflow/modes')"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "app.post('/handoff/validate', response_model=ValidationResult, operation_id='validate_handoff_package')"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            209,
            242
          ],
          "parameters": [],
          "decorators": [
            "app.get('/handoff/template', operation_id='get_handoff_template')"
          ]
        }
      ],
      "classes": [
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            46,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ProjectStateResponse",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentRequest",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentResponse",
          "docstring": "",
          "line_range": [
            61,
            65
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "health_check": [
          "HealthResponse",
          "app.get",
          "datetime.now"
        ],
        "get_project_state": [
          "app.get",
          "open",
          "str",
          "json.load",
          "HTTPException",
          "state.get",
          "ProjectStateResponse"
        ],
        "execute_agent_task": [
          "TaskClassifier",
          "str",
          "execution_result.get",
          "router.route_task",
          "AgentResponse",
          "datetime.now",
          "ModelRouter",
          "router.execute_with_model",
          "app.post"
        ],
        "get_agent_status": [
          "app.get"
        ],
        "get_rules_manifest": [
          "app.get",
          "json.load",
          "HTTPException",
          "open"
        ],
        "get_workflow_modes": [
          "app.get"
        ],
        "validate_handoff_package": [
          "str",
          "HTTPException",
          "validator.validate_package",
          "app.post",
          "HandoffValidator"
        ],
        "get_handoff_template": [
          "app.get"
        ]
      },
      "dependencies": [
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "FastApiMCP",
        "HTTPException",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi_mcp",
        "handoff_validator",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "sys",
        "task_router",
        "typing",
        "uvicorn"
      ],
      "hash": "924d3f4417bd5f759688dd49b03282f0e54d64231bf423eb061b52a46ecb3096",
      "artifact_id": "81ed5896-8be4-4c63-9d5a-095543d8821c"
    },
    {
      "module_id": "core.llmgenie.orchestration.__init__",
      "path": "core/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "module_doc": "Multi-Agent Orchestration Package\n\nEpic 5 Phase 3.1: Complete orchestration system\n- AgentOrchestrator: Main orchestration class\n- Core: ExecutionMode, AgentCoordination, OrchestrationTask, OrchestrationResult\n- Executors: ParallelExecutor, SequentialExecutor, CollaborativeExecutor",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "AgentOrchestrator",
        "CollaborativeExecutor",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "core",
        "executors",
        "orchestrator"
      ],
      "hash": "84b5d81bce4f1e78a7e889727b30bc9050567530d03928ca7b0979d04de3b09e",
      "artifact_id": "ef852c89-efde-4fef-bc87-f2a47ed8bcb7"
    },
    {
      "module_id": "core.llmgenie.orchestration.orchestrator",
      "path": "core/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "module_doc": "Multi-Agent Orchestrator\n\nEpic 5 Phase 3.1: Main orchestration class\nSingle responsibility: Coordinate multiple agents using different execution strategies",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
          "line_range": [
            28,
            44
          ],
          "parameters": [
            "self",
            "agent_routers",
            "task_classifier"
          ],
          "decorators": []
        },
        {
          "name": "orchestrate",
          "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
          "line_range": [
            46,
            135
          ],
          "parameters": [
            "self",
            "query",
            "execution_mode",
            "coordination_type",
            "context",
            "subtasks",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_execution_mode",
          "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_coordination_type",
          "docstring": "Suggest coordination type based on execution mode",
          "line_range": [
            162,
            172
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        },
        {
          "name": "_validate_coordination_compatibility",
          "docstring": "Validate that coordination type is compatible with execution mode",
          "line_range": [
            174,
            186
          ],
          "parameters": [
            "self",
            "execution_mode",
            "coordination_type"
          ],
          "decorators": []
        },
        {
          "name": "get_orchestration_stats",
          "docstring": "Get orchestration statistics and available agents",
          "line_range": [
            188,
            201
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentOrchestrator",
          "docstring": "Main orchestration class for multi-agent task execution\n\nEpic 5 integration: Uses existing TaskRouter + ModelRouter components\nSupports: PARALLEL, SEQUENTIAL, COLLABORATIVE execution modes",
          "line_range": [
            20,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
              "line_range": [
                28,
                44
              ],
              "parameters": [
                "self",
                "agent_routers",
                "task_classifier"
              ]
            },
            {
              "name": "orchestrate",
              "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
              "line_range": [
                46,
                135
              ],
              "parameters": [
                "self",
                "query",
                "execution_mode",
                "coordination_type",
                "context",
                "subtasks",
                "task_id"
              ]
            },
            {
              "name": "_suggest_execution_mode",
              "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "_suggest_coordination_type",
              "docstring": "Suggest coordination type based on execution mode",
              "line_range": [
                162,
                172
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            },
            {
              "name": "_validate_coordination_compatibility",
              "docstring": "Validate that coordination type is compatible with execution mode",
              "line_range": [
                174,
                186
              ],
              "parameters": [
                "self",
                "execution_mode",
                "coordination_type"
              ]
            },
            {
              "name": "get_orchestration_stats",
              "docstring": "Get orchestration statistics and available agents",
              "line_range": [
                188,
                201
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "ParallelExecutor",
          "len",
          "CollaborativeExecutor",
          "SequentialExecutor"
        ],
        "orchestrate": [
          "OrchestrationResult",
          "start_time.timestamp",
          "int",
          "OrchestrationTask",
          "self._suggest_coordination_type",
          "logger.info",
          "logger.warning",
          "self._validate_coordination_compatibility",
          "ValueError",
          "logger.error",
          "str",
          "datetime.now",
          "len",
          "self._suggest_execution_mode"
        ],
        "_suggest_execution_mode": [
          "logger.warning",
          "ExecutionMode.suggest_mode_for_task"
        ],
        "_suggest_coordination_type": [],
        "_validate_coordination_compatibility": [
          "compatible_combinations.get",
          "coordination_type.is_compatible_with_mode"
        ],
        "get_orchestration_stats": [
          "list",
          "len"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "CollaborativeExecutor",
        "Dict",
        "ExecutionMode",
        "List",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "TaskClassifier",
        "core",
        "datetime",
        "executors",
        "logging",
        "task_router",
        "typing"
      ],
      "hash": "15ef1421365f772d0d10ebb002a9b5ef46c79e30408acc2a5e7630155371aaff",
      "artifact_id": "928523d4-cbbf-447f-a540-534fd184532d"
    },
    {
      "module_id": "core.llmgenie.orchestration.agent_orchestrator",
      "path": "core/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "module_doc": "Agent Orchestrator for Multi-Agent Task Coordination\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration implementation\nExtends existing TaskRouter/ModelRouter with orchestration capabilities.\n\nDesign principle: Composition over inheritance - leverages existing components.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with TaskRouter components",
          "line_range": [
            78,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_agent_routers",
          "docstring": "Initialize specialized ModelRouter instances for different agent roles",
          "line_range": [
            92,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "coordinate_multi_agent_tasks",
          "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
          "line_range": [
            101,
            145
          ],
          "parameters": [
            "self",
            "complex_task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_parallel",
          "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
          "line_range": [
            147,
            215
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_sequential",
          "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
          "line_range": [
            217,
            284
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_collaborative",
          "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
          "line_range": [
            286,
            347
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
          "line_range": [
            349,
            381
          ],
          "parameters": [
            "self",
            "query",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_score",
          "docstring": "Calculate quality score using existing QualityValidator",
          "line_range": [
            383,
            405
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_validate_result_quality",
          "docstring": "Validate result quality using existing Epic 5 QualityValidator",
          "line_range": [
            407,
            415
          ],
          "parameters": [
            "self",
            "execution_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_log_coordination_event",
          "docstring": "Log coordination event for analysis and improvement",
          "line_range": [
            417,
            433
          ],
          "parameters": [
            "self",
            "task",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_metrics",
          "docstring": "Get coordination performance metrics",
          "line_range": [
            435,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "manage_parallel_execution",
          "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
          "line_range": [
            456,
            484
          ],
          "parameters": [
            "self",
            "task_list"
          ],
          "decorators": []
        },
        {
          "name": "handle_inter_agent_communication",
          "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
          "line_range": [
            486,
            516
          ],
          "parameters": [
            "self",
            "sender_agent",
            "receiver_agent",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "execute_subtask",
          "docstring": "",
          "line_range": [
            160,
            182
          ],
          "parameters": [
            "router_name",
            "subtask"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist",
          "line_range": [
            28,
            32
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies",
          "line_range": [
            35,
            39
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration",
          "line_range": [
            43,
            52
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration",
          "line_range": [
            56,
            65
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AgentOrchestrator",
          "docstring": "Multi-Agent Orchestrator for Epic 5 Phase 3 Production Ready\n\nCoordinates multiple TaskRouter instances for complex multi-agent workflows.\nImplements patterns from Epic 5 checklist: parallel, sequential, collaborative execution.\n\nDesign: Composition with existing TaskRouter/ModelRouter components",
          "line_range": [
            68,
            516
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with TaskRouter components",
              "line_range": [
                78,
                90
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_agent_routers",
              "docstring": "Initialize specialized ModelRouter instances for different agent roles",
              "line_range": [
                92,
                99
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "coordinate_multi_agent_tasks",
              "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
              "line_range": [
                101,
                145
              ],
              "parameters": [
                "self",
                "complex_task"
              ]
            },
            {
              "name": "_execute_parallel",
              "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
              "line_range": [
                147,
                215
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_sequential",
              "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
              "line_range": [
                217,
                284
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_collaborative",
              "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
              "line_range": [
                286,
                347
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
              "line_range": [
                349,
                381
              ],
              "parameters": [
                "self",
                "query",
                "mode"
              ]
            },
            {
              "name": "_calculate_quality_score",
              "docstring": "Calculate quality score using existing QualityValidator",
              "line_range": [
                383,
                405
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_validate_result_quality",
              "docstring": "Validate result quality using existing Epic 5 QualityValidator",
              "line_range": [
                407,
                415
              ],
              "parameters": [
                "self",
                "execution_result",
                "task"
              ]
            },
            {
              "name": "_log_coordination_event",
              "docstring": "Log coordination event for analysis and improvement",
              "line_range": [
                417,
                433
              ],
              "parameters": [
                "self",
                "task",
                "result"
              ]
            },
            {
              "name": "get_coordination_metrics",
              "docstring": "Get coordination performance metrics",
              "line_range": [
                435,
                452
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "manage_parallel_execution",
              "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
              "line_range": [
                456,
                484
              ],
              "parameters": [
                "self",
                "task_list"
              ]
            },
            {
              "name": "handle_inter_agent_communication",
              "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
              "line_range": [
                486,
                516
              ],
              "parameters": [
                "self",
                "sender_agent",
                "receiver_agent",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskClassifier",
          "QualityValidator",
          "self._initialize_agent_routers"
        ],
        "_initialize_agent_routers": [
          "ModelRouter"
        ],
        "coordinate_multi_agent_tasks": [
          "OrchestrationResult",
          "self._execute_sequential",
          "self._execute_collaborative",
          "str",
          "ValueError",
          "datetime.now",
          "self._execute_parallel",
          "self._log_coordination_event",
          "self._calculate_quality_score"
        ],
        "_execute_parallel": [
          "self._decompose_task",
          "len"
        ],
        "execute_subtask": [
          "router.route_task",
          "router.execute_with_model"
        ],
        "_execute_sequential": [
          "list",
          "OrchestrationResult",
          "r.get",
          "enumerate",
          "execution_result.get",
          "str",
          "self._decompose_task",
          "router.route_task",
          "results.values",
          "router.execute_with_model",
          "len"
        ],
        "_execute_collaborative": [
          "OrchestrationResult",
          "str",
          "self._validate_result_quality",
          "max",
          "router.route_task",
          "collaborative_results.items",
          "router.execute_with_model"
        ],
        "_decompose_task": [
          "query.lower"
        ],
        "_calculate_quality_score": [
          "k.startswith",
          "self._validate_result_quality",
          "max",
          "r.get"
        ],
        "_validate_result_quality": [
          "execution_result.get"
        ],
        "_log_coordination_event": [
          "len",
          "datetime.now"
        ],
        "get_coordination_metrics": [
          "e.get",
          "sum",
          "len"
        ],
        "manage_parallel_execution": [
          "OrchestrationResult",
          "self.coordinate_multi_agent_tasks",
          "isinstance",
          "enumerate",
          "str",
          "processed_results.append",
          "asyncio.gather"
        ],
        "handle_inter_agent_communication": [
          "message.get",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "QualityResult",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "task_router",
        "typing"
      ],
      "hash": "8de034bd011f87998ab0fe3acfba6fb9fd59a210e8dad03ecdfea02c67789df2",
      "artifact_id": "4edb1efc-9f9b-4cee-af7f-73b5fef49a29"
    },
    {
      "module_id": "core.llmgenie.cli.handoff_cli",
      "path": "core/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "module_doc": "CLI tool for handoff validation\nCan be used in CI/CD pipelines and workflows",
      "functions": [
        {
          "name": "load_handoff_config",
          "docstring": "Load handoff configuration from JSON file",
          "line_range": [
            18,
            28
          ],
          "parameters": [
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "create_handoff_package_from_config",
          "docstring": "Create HandoffPackage from configuration",
          "line_range": [
            30,
            49
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "print_validation_result",
          "docstring": "Print validation result to console",
          "line_range": [
            51,
            99
          ],
          "parameters": [
            "result",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "generate_template",
          "docstring": "Generate handoff template configuration",
          "line_range": [
            101,
            140
          ],
          "parameters": [
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI entry point",
          "line_range": [
            142,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_handoff_config": [
          "sys.exit",
          "json.load",
          "print",
          "open"
        ],
        "create_handoff_package_from_config": [
          "HandoffPackage",
          "config.get",
          "HandoffFile"
        ],
        "print_validation_result": [
          "len",
          "print"
        ],
        "generate_template": [
          "json.dump",
          "print",
          "open"
        ],
        "main": [
          "template_parser.add_argument",
          "create_handoff_package_from_config",
          "sys.exit",
          "generate_template",
          "argparse.ArgumentParser",
          "print_validation_result",
          "HandoffValidator",
          "validator.validate_package",
          "load_handoff_config",
          "print",
          "check_parser.add_argument",
          "parser.parse_args",
          "parser.add_subparsers",
          "parser.print_help",
          "subparsers.add_parser",
          "validate_parser.add_argument"
        ]
      },
      "dependencies": [
        "Dict",
        "HandoffFile",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "Path",
        "api.handoff_validator",
        "argparse",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d45d8b28e2936eac9dfcaf32ffbda0bc1dd893350c36d5b1cd213066e2615c62",
      "artifact_id": "399a3821-4bbf-4119-96c8-0868e96c228e"
    },
    {
      "module_id": "core.llmgenie.task_router.quality_intelligence",
      "path": "core/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "module_doc": "Quality Intelligence System for Smart LLM Routing\n\nProvides feedback loop mechanism for continuous improvement of routing decisions\nBased on Phase 2D architecture design - lightweight implementation for production use",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize quality intelligence with data persistence",
          "line_range": [
            68,
            80
          ],
          "parameters": [
            "self",
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "record_execution_result",
          "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
          "line_range": [
            82,
            128
          ],
          "parameters": [
            "self",
            "task_id",
            "routing_decision",
            "quality_result",
            "execution_time",
            "query",
            "task_type",
            "success",
            "user_feedback"
          ],
          "decorators": []
        },
        {
          "name": "analyze_model_performance_trends",
          "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
          "line_range": [
            130,
            197
          ],
          "parameters": [
            "self",
            "model_choice",
            "task_type",
            "days_back"
          ],
          "decorators": []
        },
        {
          "name": "suggest_routing_improvements",
          "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
          "line_range": [
            199,
            246
          ],
          "parameters": [
            "self",
            "min_confidence"
          ],
          "decorators": []
        },
        {
          "name": "update_quality_thresholds",
          "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
          "line_range": [
            248,
            298
          ],
          "parameters": [
            "self",
            "task_type",
            "performance_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_historical_data",
          "docstring": "Load historical performance data from disk",
          "line_range": [
            300,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_persist_result",
          "docstring": "Persist execution result to disk",
          "line_range": [
            316,
            332
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_trend",
          "docstring": "Calculate trend direction from list of values",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self",
            "values"
          ],
          "decorators": []
        },
        {
          "name": "get_summary_stats",
          "docstring": "Get summary statistics for monitoring dashboard",
          "line_range": [
            355,
            380
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionResult",
          "docstring": "Record of a single task execution for quality intelligence",
          "line_range": [
            20,
            30
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "PerformanceReport",
          "docstring": "Analysis report of model performance trends",
          "line_range": [
            34,
            43
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RoutingRecommendation",
          "docstring": "Recommendation for improving routing decisions",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityIntelligence",
          "docstring": "Quality Intelligence System for continuous routing improvement\n\nLightweight implementation focusing on:\n- Execution result tracking\n- Performance trend analysis  \n- Routing improvement recommendations\n- Adaptive threshold management",
          "line_range": [
            57,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize quality intelligence with data persistence",
              "line_range": [
                68,
                80
              ],
              "parameters": [
                "self",
                "data_dir"
              ]
            },
            {
              "name": "record_execution_result",
              "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
              "line_range": [
                82,
                128
              ],
              "parameters": [
                "self",
                "task_id",
                "routing_decision",
                "quality_result",
                "execution_time",
                "query",
                "task_type",
                "success",
                "user_feedback"
              ]
            },
            {
              "name": "analyze_model_performance_trends",
              "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
              "line_range": [
                130,
                197
              ],
              "parameters": [
                "self",
                "model_choice",
                "task_type",
                "days_back"
              ]
            },
            {
              "name": "suggest_routing_improvements",
              "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
              "line_range": [
                199,
                246
              ],
              "parameters": [
                "self",
                "min_confidence"
              ]
            },
            {
              "name": "update_quality_thresholds",
              "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
              "line_range": [
                248,
                298
              ],
              "parameters": [
                "self",
                "task_type",
                "performance_data"
              ]
            },
            {
              "name": "_load_historical_data",
              "docstring": "Load historical performance data from disk",
              "line_range": [
                300,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_persist_result",
              "docstring": "Persist execution result to disk",
              "line_range": [
                316,
                332
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_calculate_trend",
              "docstring": "Calculate trend direction from list of values",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self",
                "values"
              ]
            },
            {
              "name": "get_summary_stats",
              "docstring": "Get summary statistics for monitoring dashboard",
              "line_range": [
                355,
                380
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "defaultdict",
          "self._load_historical_data",
          "deque",
          "Path"
        ],
        "record_execution_result": [
          "self._persist_result",
          "ExecutionResult",
          "datetime.now"
        ],
        "analyze_model_performance_trends": [
          "list",
          "sorted",
          "timedelta",
          "datetime.now",
          "reports.append",
          "sum",
          "len",
          "self._calculate_trend",
          "PerformanceReport",
          "datetime.fromisoformat",
          "min"
        ],
        "suggest_routing_improvements": [
          "defaultdict",
          "sorted",
          "recommendations.append",
          "self.analyze_model_performance_trends",
          "reports.sort",
          "RoutingRecommendation",
          "len",
          "task_reports.items",
          "min"
        ],
        "update_quality_thresholds": [
          "max",
          "sum",
          "len",
          "min"
        ],
        "_load_historical_data": [
          "open",
          "json.load",
          "data.get",
          "data_file.exists",
          "TaskType",
          "print",
          "task_data.items"
        ],
        "_persist_result": [
          "json.dumps",
          "open",
          "datetime.now",
          "print",
          "f.write",
          "asdict"
        ],
        "_calculate_trend": [
          "range",
          "sum",
          "len"
        ],
        "get_summary_stats": [
          "defaultdict",
          "datetime.now",
          "sum",
          "len",
          "dict"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "QualityResult",
        "TaskType",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "defaultdict",
        "deque",
        "json",
        "pathlib",
        "quality_validator",
        "task_classifier",
        "timedelta",
        "typing"
      ],
      "hash": "c5c8788dcc50b90151676974f682e30850cb91b3a3941f1a4296497da0c98091",
      "artifact_id": "6e522ccc-04e8-49c2-85fd-b5080adfa9ea"
    },
    {
      "module_id": "core.llmgenie.task_router.task_classifier",
      "path": "core/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "module_doc": "Task Classification Engine for Smart LLM Routing\n\nBased on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference\n- Mixed complexity handling \u2192 Smart routing",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize classifier with Epic 5 research patterns",
          "line_range": [
            55,
            78
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "classify_task",
          "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
          "line_range": [
            80,
            115
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_determine_task_type",
          "docstring": "Determine primary task type from query content",
          "line_range": [
            117,
            146
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity",
          "docstring": "Calculate task complexity based on content analysis",
          "line_range": [
            148,
            191
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_routing_preferences",
          "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
          "line_range": [
            193,
            219
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_confidence",
          "docstring": "Calculate confidence score for classification",
          "line_range": [
            221,
            241
          ],
          "parameters": [
            "self",
            "query",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_generate_reasoning",
          "docstring": "Generate human-readable reasoning for classification",
          "line_range": [
            243,
            258
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity",
            "ollama_pref",
            "claude_pref"
          ],
          "decorators": []
        },
        {
          "name": "get_complexity_score",
          "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
          "line_range": [
            260,
            270
          ],
          "parameters": [
            "self",
            "task_dict"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskType",
          "docstring": "Task classification types based on Epic 5 research",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ComplexityLevel",
          "docstring": "Task complexity levels for routing decisions",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ClassificationResult",
          "docstring": "Result of task classification analysis",
          "line_range": [
            38,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskClassifier",
          "docstring": "Smart Task Classifier for LLM routing decisions\n\nIntegrates with existing AgentRequest pattern from main.py:98-112",
          "line_range": [
            48,
            270
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize classifier with Epic 5 research patterns",
              "line_range": [
                55,
                78
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "classify_task",
              "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
              "line_range": [
                80,
                115
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_determine_task_type",
              "docstring": "Determine primary task type from query content",
              "line_range": [
                117,
                146
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_calculate_complexity",
              "docstring": "Calculate task complexity based on content analysis",
              "line_range": [
                148,
                191
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_routing_preferences",
              "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
              "line_range": [
                193,
                219
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_calculate_confidence",
              "docstring": "Calculate confidence score for classification",
              "line_range": [
                221,
                241
              ],
              "parameters": [
                "self",
                "query",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_generate_reasoning",
              "docstring": "Generate human-readable reasoning for classification",
              "line_range": [
                243,
                258
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity",
                "ollama_pref",
                "claude_pref"
              ]
            },
            {
              "name": "get_complexity_score",
              "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
              "line_range": [
                260,
                270
              ],
              "parameters": [
                "self",
                "task_dict"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "classify_task": [
          "self._get_routing_preferences",
          "ClassificationResult",
          "self._calculate_confidence",
          "query.lower",
          "self._calculate_complexity",
          "self._determine_task_type",
          "self._generate_reasoning"
        ],
        "_determine_task_type": [
          "re.search",
          "context.get",
          "any"
        ],
        "_calculate_complexity": [
          "query.split",
          "context.get",
          "any",
          "sum",
          "len"
        ],
        "_get_routing_preferences": [],
        "_calculate_confidence": [
          "query.split",
          "re.search",
          "query.lower",
          "any",
          "len",
          "min"
        ],
        "_generate_reasoning": [
          "reasoning_parts.append"
        ],
        "get_complexity_score": [
          "self.classify_task",
          "task_dict.get"
        ]
      },
      "dependencies": [
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Tuple",
        "dataclass",
        "dataclasses",
        "enum",
        "re",
        "typing"
      ],
      "hash": "1524140f92d8dcaea7be637e602972fcb202050baa85e53f8ee8501d8ad33988",
      "artifact_id": "202c0a1c-631b-4b3f-8c03-85e2d3e134e7"
    },
    {
      "module_id": "core.llmgenie.task_router.model_router",
      "path": "core/llmgenie/task_router/model_router.py",
      "category": "core",
      "module_doc": "Model Router for Smart LLM Selection\n\nIntegrates with existing FastAPI infrastructure (main.py:98-112)\nExtends AgentRequest/AgentResponse pattern with Ollama backend",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
          "line_range": [
            58,
            87
          ],
          "parameters": [
            "self",
            "classifier",
            "quality_validator",
            "quality_intelligence",
            "rag_enhancer"
          ],
          "decorators": []
        },
        {
          "name": "route_task",
          "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
          "line_range": [
            89,
            148
          ],
          "parameters": [
            "self",
            "query",
            "context",
            "model_preference"
          ],
          "decorators": []
        },
        {
          "name": "_select_quality_aware_model",
          "docstring": "Select optimal model based on task classification AND quality requirements",
          "line_range": [
            150,
            177
          ],
          "parameters": [
            "self",
            "classification",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_candidate_models",
          "docstring": "Get candidate models based on task classification preferences",
          "line_range": [
            179,
            204
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_select_optimal_model_legacy",
          "docstring": "Legacy model selection logic (fallback)",
          "line_range": [
            206,
            227
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_model",
          "docstring": "Execute task with specified model",
          "line_range": [
            229,
            262
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_ollama_task",
          "docstring": "Execute task using Ollama API",
          "line_range": [
            264,
            288
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_claude_task",
          "docstring": "Execute task using Claude API - placeholder for integration",
          "line_range": [
            290,
            292
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_adaptive_fallback",
          "docstring": "Determine adaptive fallback model based on quality requirements",
          "line_range": [
            294,
            311
          ],
          "parameters": [
            "self",
            "primary_model",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_fallback_model_legacy",
          "docstring": "Legacy fallback model mapping",
          "line_range": [
            313,
            323
          ],
          "parameters": [
            "self",
            "primary_model"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_threshold",
          "docstring": "Calculate minimum quality threshold based on task complexity",
          "line_range": [
            325,
            335
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_create_preference_decision",
          "docstring": "Create routing decision for user-specified model preference",
          "line_range": [
            337,
            350
          ],
          "parameters": [
            "self",
            "model_preference",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_generate_routing_reasoning",
          "docstring": "Generate human-readable reasoning for routing decision",
          "line_range": [
            352,
            363
          ],
          "parameters": [
            "self",
            "classification",
            "selected_model"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_quality_tracking",
          "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
          "line_range": [
            365,
            452
          ],
          "parameters": [
            "self",
            "query",
            "task_id",
            "model_preference",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ModelChoice",
          "docstring": "Available LLM backends for task execution",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RoutingDecision",
          "docstring": "Result of routing decision process",
          "line_range": [
            40,
            47
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelRouter",
          "docstring": "Smart Model Router for LLM task execution\n\nExtends existing FastAPI agent pattern from main.py:98-112\nIntegrates with AgentRequest/AgentResponse models",
          "line_range": [
            50,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
              "line_range": [
                58,
                87
              ],
              "parameters": [
                "self",
                "classifier",
                "quality_validator",
                "quality_intelligence",
                "rag_enhancer"
              ]
            },
            {
              "name": "route_task",
              "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
              "line_range": [
                89,
                148
              ],
              "parameters": [
                "self",
                "query",
                "context",
                "model_preference"
              ]
            },
            {
              "name": "_select_quality_aware_model",
              "docstring": "Select optimal model based on task classification AND quality requirements",
              "line_range": [
                150,
                177
              ],
              "parameters": [
                "self",
                "classification",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_candidate_models",
              "docstring": "Get candidate models based on task classification preferences",
              "line_range": [
                179,
                204
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_select_optimal_model_legacy",
              "docstring": "Legacy model selection logic (fallback)",
              "line_range": [
                206,
                227
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "execute_with_model",
              "docstring": "Execute task with specified model",
              "line_range": [
                229,
                262
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_ollama_task",
              "docstring": "Execute task using Ollama API",
              "line_range": [
                264,
                288
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_claude_task",
              "docstring": "Execute task using Claude API - placeholder for integration",
              "line_range": [
                290,
                292
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_adaptive_fallback",
              "docstring": "Determine adaptive fallback model based on quality requirements",
              "line_range": [
                294,
                311
              ],
              "parameters": [
                "self",
                "primary_model",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_fallback_model_legacy",
              "docstring": "Legacy fallback model mapping",
              "line_range": [
                313,
                323
              ],
              "parameters": [
                "self",
                "primary_model"
              ]
            },
            {
              "name": "_calculate_quality_threshold",
              "docstring": "Calculate minimum quality threshold based on task complexity",
              "line_range": [
                325,
                335
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_create_preference_decision",
              "docstring": "Create routing decision for user-specified model preference",
              "line_range": [
                337,
                350
              ],
              "parameters": [
                "self",
                "model_preference",
                "query"
              ]
            },
            {
              "name": "_generate_routing_reasoning",
              "docstring": "Generate human-readable reasoning for routing decision",
              "line_range": [
                352,
                363
              ],
              "parameters": [
                "self",
                "classification",
                "selected_model"
              ]
            },
            {
              "name": "execute_with_quality_tracking",
              "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
              "line_range": [
                365,
                452
              ],
              "parameters": [
                "self",
                "query",
                "task_id",
                "model_preference",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskClassifier",
          "QualityValidator",
          "PromptEnhancer",
          "print",
          "QualityIntelligence",
          "RAGConfig"
        ],
        "route_task": [
          "self._select_quality_aware_model",
          "self._get_adaptive_fallback",
          "self._generate_routing_reasoning",
          "self._calculate_quality_threshold",
          "len",
          "print",
          "RoutingDecision",
          "self._create_preference_decision"
        ],
        "_select_quality_aware_model": [
          "self._select_optimal_model_legacy",
          "max",
          "model_scores.values",
          "model_scores.items",
          "self._get_candidate_models"
        ],
        "_get_candidate_models": [
          "candidates.append",
          "list",
          "set",
          "candidates.extend"
        ],
        "_select_optimal_model_legacy": [],
        "execute_with_model": [
          "self._execute_ollama_task",
          "str",
          "ValueError",
          "datetime.now",
          "self._execute_claude_task"
        ],
        "_execute_ollama_task": [
          "response.raise_for_status",
          "httpx.AsyncClient",
          "response.json",
          "client.post"
        ],
        "_execute_claude_task": [],
        "_get_adaptive_fallback": [
          "high_quality_fallback.get",
          "self._get_fallback_model_legacy",
          "quality_requirements.get"
        ],
        "_get_fallback_model_legacy": [
          "fallback_map.get"
        ],
        "_calculate_quality_threshold": [
          "base_thresholds.get"
        ],
        "_create_preference_decision": [
          "RoutingDecision",
          "self._get_fallback_model_legacy"
        ],
        "_generate_routing_reasoning": [],
        "execute_with_quality_tracking": [
          "self.route_task",
          "self.execute_with_model",
          "execution_result.get",
          "QualityResult"
        ]
      },
      "dependencies": [
        "Any",
        "ClassificationResult",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "PromptEnhancer",
        "QualityIntelligence",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RAGConfig",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "httpx",
        "quality_intelligence",
        "quality_validator",
        "rag_context",
        "task_classifier",
        "typing"
      ],
      "hash": "e55b69a4b4fd52267048ee3bd10a6675d836ea13d7446809934890ad3ec21b10",
      "artifact_id": "afb21b5e-da8e-4229-b140-8278c2d943f4"
    },
    {
      "module_id": "core.llmgenie.task_router.__init__",
      "path": "core/llmgenie/task_router/__init__.py",
      "category": "cli",
      "module_doc": "Task Router Module for LLMGenie\n\nIntelligent task routing between Claude and Ollama based on:\n- Task complexity analysis\n- Model capability matching  \n- Performance optimization\n- Quality requirements\n\nIntegrates with existing FastAPI agent infrastructure.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "ComplexityLevel",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "model_router",
        "quality_validator",
        "task_classifier"
      ],
      "hash": "4d7f0b94bbf729690622d92f329ef04a66e4caa3a3cf3f874e745945b155d75a",
      "artifact_id": "688f941b-49f9-4be7-8349-a082d8591272"
    },
    {
      "module_id": "core.llmgenie.task_router.quality_validator",
      "path": "core/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "module_doc": "Quality Validator for LLM Output Assessment\n\nEnhanced implementation for Epic 5 Phase 2: Quality Validation Pipeline\nProvides comprehensive validation for code and text outputs with automatic fallback",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize validator with quality rules and thresholds",
          "line_range": [
            48,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_code_output",
          "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            76,
            107
          ],
          "parameters": [
            "self",
            "code",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "_validate_python_code",
          "docstring": "Validate Python code specifically",
          "line_range": [
            109,
            167
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_javascript_code",
          "docstring": "Basic JavaScript validation",
          "line_range": [
            169,
            207
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_generic_code",
          "docstring": "Generic code validation for unknown languages",
          "line_range": [
            209,
            239
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "validate_text_output",
          "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            241,
            320
          ],
          "parameters": [
            "self",
            "text",
            "expected_type"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_coherence_score",
          "docstring": "Calculate text coherence based on transition words and structure",
          "line_range": [
            322,
            337
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate text completeness based on structure and content indicators",
          "line_range": [
            339,
            356
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "should_fallback",
          "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
          "line_range": [
            358,
            373
          ],
          "parameters": [
            "self",
            "result",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "get_quality_metrics",
          "docstring": "Extract standardized quality metrics for monitoring",
          "line_range": [
            375,
            383
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "predict_quality_requirements",
          "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
          "line_range": [
            385,
            415
          ],
          "parameters": [
            "self",
            "task_description",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "assess_model_capability",
          "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
          "line_range": [
            417,
            446
          ],
          "parameters": [
            "self",
            "model_choice",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "integrate_deepeval_metrics",
          "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
          "line_range": [
            448,
            482
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "integrate_trulens_monitoring",
          "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
          "line_range": [
            484,
            530
          ],
          "parameters": [
            "self",
            "task_id",
            "result"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "QualityScore",
          "docstring": "Quality assessment levels",
          "line_range": [
            17,
            23
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "QualityResult",
          "docstring": "Result of quality validation",
          "line_range": [
            27,
            34
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityValidator",
          "docstring": "Quality Validator for LLM outputs\n\nEnhanced implementation with real validation logic:\n- Code syntax and structure validation\n- Text coherence and completeness analysis\n- Automatic fallback decision making\n- Quality thresholds based on task type",
          "line_range": [
            37,
            530
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize validator with quality rules and thresholds",
              "line_range": [
                48,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_code_output",
              "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                76,
                107
              ],
              "parameters": [
                "self",
                "code",
                "language"
              ]
            },
            {
              "name": "_validate_python_code",
              "docstring": "Validate Python code specifically",
              "line_range": [
                109,
                167
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_javascript_code",
              "docstring": "Basic JavaScript validation",
              "line_range": [
                169,
                207
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_generic_code",
              "docstring": "Generic code validation for unknown languages",
              "line_range": [
                209,
                239
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "validate_text_output",
              "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                241,
                320
              ],
              "parameters": [
                "self",
                "text",
                "expected_type"
              ]
            },
            {
              "name": "_calculate_coherence_score",
              "docstring": "Calculate text coherence based on transition words and structure",
              "line_range": [
                322,
                337
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate text completeness based on structure and content indicators",
              "line_range": [
                339,
                356
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "should_fallback",
              "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
              "line_range": [
                358,
                373
              ],
              "parameters": [
                "self",
                "result",
                "task_type"
              ]
            },
            {
              "name": "get_quality_metrics",
              "docstring": "Extract standardized quality metrics for monitoring",
              "line_range": [
                375,
                383
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "predict_quality_requirements",
              "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
              "line_range": [
                385,
                415
              ],
              "parameters": [
                "self",
                "task_description",
                "task_type"
              ]
            },
            {
              "name": "assess_model_capability",
              "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
              "line_range": [
                417,
                446
              ],
              "parameters": [
                "self",
                "model_choice",
                "quality_requirements"
              ]
            },
            {
              "name": "integrate_deepeval_metrics",
              "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
              "line_range": [
                448,
                482
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "integrate_trulens_monitoring",
              "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
              "line_range": [
                484,
                530
              ],
              "parameters": [
                "self",
                "task_id",
                "result"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "validate_code_output": [
          "QualityResult",
          "self._validate_python_code",
          "language.lower",
          "self._validate_generic_code",
          "self._validate_javascript_code",
          "code.strip"
        ],
        "_validate_python_code": [
          "re.findall",
          "round",
          "code.split",
          "ast.parse",
          "bool",
          "str",
          "re.search",
          "max",
          "QualityScore",
          "QualityResult",
          "len",
          "line.strip",
          "issues.append",
          "min"
        ],
        "_validate_javascript_code": [
          "round",
          "code.split",
          "bool",
          "code.count",
          "re.search",
          "max",
          "QualityScore",
          "QualityResult",
          "len",
          "line.strip",
          "issues.append",
          "min"
        ],
        "_validate_generic_code": [
          "round",
          "code.split",
          "bool",
          "max",
          "re.search",
          "QualityScore",
          "QualityResult",
          "len",
          "line.strip",
          "issues.append",
          "code.strip",
          "min"
        ],
        "validate_text_output": [
          "round",
          "text.lower",
          "bool",
          "max",
          "re.search",
          "QualityScore",
          "QualityResult",
          "min",
          "issues.append",
          "s.strip",
          "len",
          "self._calculate_coherence_score",
          "p.strip",
          "self._calculate_completeness_score",
          "text.strip",
          "text.split"
        ],
        "_calculate_coherence_score": [
          "re.search",
          "set",
          "len",
          "min",
          "text.split"
        ],
        "_calculate_completeness_score": [
          "min",
          "re.search",
          "text.strip"
        ],
        "should_fallback": [],
        "get_quality_metrics": [
          "len"
        ],
        "predict_quality_requirements": [
          "max"
        ],
        "assess_model_capability": [
          "max",
          "model_performance_data.get",
          "min",
          "quality_requirements.get"
        ],
        "integrate_deepeval_metrics": [
          "coherence_metric.measure",
          "RelevancyMetric",
          "relevancy_metric.measure",
          "CoherenceMetric",
          "print",
          "LLMTestCase"
        ],
        "integrate_trulens_monitoring": [
          "recording.record_metrics",
          "Feedback",
          "TruLlama",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "App",
        "CoherenceMetric",
        "Dict",
        "Enum",
        "Feedback",
        "LLMTestCase",
        "List",
        "Optional",
        "RelevancyMetric",
        "TaskType",
        "TruLlama",
        "Tuple",
        "ast",
        "dataclass",
        "dataclasses",
        "deepeval.metrics",
        "deepeval.test_case",
        "enum",
        "json",
        "re",
        "task_router.task_classifier",
        "trulens_eval",
        "trulens_eval.app",
        "typing"
      ],
      "hash": "4fde90c0beab73512575c35fa58af6d39c56c997788e84539b664ff144dfe176",
      "artifact_id": "db73e962-d0a1-4961-b05a-378ed6c8939d"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.execution_modes",
      "path": "core/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "module_doc": "Execution modes for multi-agent orchestration\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration patterns\nSingle responsibility: Define execution mode types and behavior",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of execution mode",
          "line_range": [
            48,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_use_cases",
          "docstring": "Get typical use cases for this execution mode",
          "line_range": [
            57,
            76
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_mode",
          "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
          "line_range": [
            79,
            100
          ],
          "parameters": [
            "cls",
            "task_description"
          ],
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist\n\nBased on Epic 5 research findings and checklist requirements:\n- Parallel task execution (documentation + code generation)\n- Sequential handoffs (design \u2192 implementation \u2192 review)  \n- Collaborative problem solving (multiple models, best result)",
          "line_range": [
            11,
            100
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of execution mode",
              "line_range": [
                48,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_use_cases",
              "docstring": "Get typical use cases for this execution mode",
              "line_range": [
                57,
                76
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_mode",
              "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
              "line_range": [
                79,
                100
              ],
              "parameters": [
                "cls",
                "task_description"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_use_cases": [
          "use_cases.get"
        ],
        "suggest_mode": [
          "task_description.lower",
          "any"
        ]
      },
      "dependencies": [
        "Enum",
        "enum"
      ],
      "hash": "9ac851f29c2f57f7816c66f9f7e952c7e747f1880994cd99c42ab2135bc1a329",
      "artifact_id": "082be011-389d-490c-964c-06140d4d5c07"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.__init__",
      "path": "core/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "module_doc": "Core types and models for Agent Orchestration\n\nEpic 5 Phase 3.1: Modular orchestration architecture\nSingle responsibility: Define core types and data models",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "coordination_types",
        "execution_modes",
        "task_models"
      ],
      "hash": "8304eeadcb25757d10007da0558bd44a097fa0d3a5c33b628f15392e17f797bf",
      "artifact_id": "3be7a584-e315-4d08-ba5e-c61c6e786251"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.coordination_types",
      "path": "core/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "module_doc": "Agent coordination types for orchestration\n\nEpic 5 Phase 3.1: Agent coordination strategies  \nSingle responsibility: Define coordination behavior types",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of coordination type",
          "line_range": [
            45,
            52
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_overhead",
          "docstring": "Get expected coordination overhead level",
          "line_range": [
            54,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_suitable_for_mode",
          "docstring": "Check if coordination type is suitable for execution mode",
          "line_range": [
            63,
            82
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies for multi-agent systems\n\nDefines how agents coordinate and synchronize during task execution",
          "line_range": [
            11,
            82
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of coordination type",
              "line_range": [
                45,
                52
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_coordination_overhead",
              "docstring": "Get expected coordination overhead level",
              "line_range": [
                54,
                61
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_suitable_for_mode",
              "docstring": "Check if coordination type is suitable for execution mode",
              "line_range": [
                63,
                82
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_coordination_overhead": [
          "overhead.get"
        ],
        "is_suitable_for_mode": [
          "compatibility.get"
        ]
      },
      "dependencies": [
        "Enum",
        "ExecutionMode",
        "enum",
        "execution_modes"
      ],
      "hash": "4cff4ef946fc869a8a7824f878513933490778e73880cd2e0bd921972dc0eb1f",
      "artifact_id": "a281a38a-c36a-47f8-ae1b-8988b41003c0"
    },
    {
      "module_id": "core.llmgenie.orchestration.core.task_models",
      "path": "core/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "module_doc": "Task data models for orchestration\n\nEpic 5 Phase 3.1: Orchestration task modeling\nSingle responsibility: Define task and result data structures",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "Validate task configuration after initialization",
          "line_range": [
            53,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_agents_needed",
          "docstring": "Estimate number of agents needed for this task",
          "line_range": [
            66,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_duration",
          "docstring": "Estimate task duration in seconds",
          "line_range": [
            76,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_successful",
          "docstring": "Check if the orchestration was successful",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_summary",
          "docstring": "Get a human-readable summary of the result",
          "line_range": [
            132,
            139
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_performance_metrics",
          "docstring": "Get performance metrics for analysis",
          "line_range": [
            141,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration\n\nEncapsulates all information needed for multi-agent task execution",
          "line_range": [
            17,
            88
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Validate task configuration after initialization",
              "line_range": [
                53,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_agents_needed",
              "docstring": "Estimate number of agents needed for this task",
              "line_range": [
                66,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_duration",
              "docstring": "Estimate task duration in seconds",
              "line_range": [
                76,
                88
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration\n\nContains execution results and performance metrics",
          "line_range": [
            92,
            149
          ],
          "methods": [
            {
              "name": "is_successful",
              "docstring": "Check if the orchestration was successful",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_summary",
              "docstring": "Get a human-readable summary of the result",
              "line_range": [
                132,
                139
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_performance_metrics",
              "docstring": "Get performance metrics for analysis",
              "line_range": [
                141,
                149
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "ValueError",
          "datetime.now"
        ],
        "get_estimated_agents_needed": [
          "len"
        ],
        "get_estimated_duration": [
          "len"
        ],
        "is_successful": [],
        "get_summary": [],
        "get_performance_metrics": [
          "self.is_successful",
          "len"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "Dict",
        "ExecutionMode",
        "List",
        "Optional",
        "coordination_types",
        "dataclass",
        "dataclasses",
        "datetime",
        "execution_modes",
        "field",
        "typing"
      ],
      "hash": "fb639631d019c43ec74c72cf47ad23aa4f9a5330458d0e80afa075b6e00dfa3b",
      "artifact_id": "67a2bf38-d34a-43ba-8a37-7b2c6e3b5b43"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.collaborative_executor",
      "path": "core/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "module_doc": "Collaborative execution strategy\n\nEpic 5 Phase 3.1: Collaborative problem solving\nSingle responsibility: Multiple agents solve same problem, best result selected",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
          "line_range": [
            28,
            119
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_with_agent",
          "docstring": "Execute task with single agent",
          "line_range": [
            121,
            154
          ],
          "parameters": [
            "self",
            "router_name",
            "router",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_assess_result_quality",
          "docstring": "Assess quality of agent result using QualityValidator",
          "line_range": [
            156,
            175
          ],
          "parameters": [
            "self",
            "agent_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_basic_quality_assessment",
          "docstring": "Basic quality assessment fallback",
          "line_range": [
            177,
            206
          ],
          "parameters": [
            "self",
            "content",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_consensus",
          "docstring": "Analyze consensus between agent results",
          "line_range": [
            208,
            245
          ],
          "parameters": [
            "self",
            "collaborative_results"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_variance",
          "docstring": "Calculate variance in quality scores across agents",
          "line_range": [
            247,
            258
          ],
          "parameters": [
            "self",
            "quality_scores"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CollaborativeExecutor",
          "docstring": "Collaborative problem solving execution strategy\n\nEpic 5 example: Multiple models generate solution, highest quality chosen\nBenefit: Quality optimization, redundancy, multiple perspectives",
          "line_range": [
            15,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
              "line_range": [
                28,
                119
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_with_agent",
              "docstring": "Execute task with single agent",
              "line_range": [
                121,
                154
              ],
              "parameters": [
                "self",
                "router_name",
                "router",
                "task"
              ]
            },
            {
              "name": "_assess_result_quality",
              "docstring": "Assess quality of agent result using QualityValidator",
              "line_range": [
                156,
                175
              ],
              "parameters": [
                "self",
                "agent_result",
                "task"
              ]
            },
            {
              "name": "_basic_quality_assessment",
              "docstring": "Basic quality assessment fallback",
              "line_range": [
                177,
                206
              ],
              "parameters": [
                "self",
                "content",
                "task"
              ]
            },
            {
              "name": "_analyze_consensus",
              "docstring": "Analyze consensus between agent results",
              "line_range": [
                208,
                245
              ],
              "parameters": [
                "self",
                "collaborative_results"
              ]
            },
            {
              "name": "_calculate_quality_variance",
              "docstring": "Calculate variance in quality scores across agents",
              "line_range": [
                247,
                258
              ],
              "parameters": [
                "self",
                "quality_scores"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityValidator"
        ],
        "execute": [
          "list",
          "self._analyze_consensus",
          "len",
          "agents_used.append",
          "collaborative_results.get",
          "r.get",
          "collaborative_results.items",
          "self._assess_result_quality",
          "any",
          "self._execute_with_agent",
          "best_result.get",
          "result.get",
          "datetime.now",
          "collaborative_results.keys",
          "OrchestrationResult",
          "quality_scores.items",
          "str",
          "max",
          "collaborative_results.values",
          "self._calculate_quality_variance"
        ],
        "_execute_with_agent": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_assess_result_quality": [
          "float",
          "agent_result.get",
          "isinstance",
          "result_data.get",
          "str",
          "hasattr",
          "self._basic_quality_assessment"
        ],
        "_basic_quality_assessment": [
          "content_lower.split",
          "task_lower.split",
          "isinstance",
          "content.strip",
          "set",
          "any",
          "len",
          "content.lower",
          "min"
        ],
        "_analyze_consensus": [
          "isinstance",
          "result_data.get",
          "str",
          "result.get",
          "content.split",
          "set.union",
          "set",
          "contents.append",
          "len",
          "collaborative_results.values",
          "set.intersection",
          "content.lower",
          "locals"
        ],
        "_calculate_quality_variance": [
          "list",
          "quality_scores.values",
          "sum",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "QualityResult",
        "QualityValidator",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "a0c80095b946b77b07b6dbb347d34a9b0e63f3572770dc82de92477fc6282f46",
      "artifact_id": "396c085d-188e-4536-a6ef-051cb8c94191"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.parallel_executor",
      "path": "core/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "module_doc": "Parallel execution strategy\n\nEpic 5 Phase 3.1: Parallel task execution \nSingle responsibility: Execute multiple subtasks simultaneously",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
          "line_range": [
            28,
            90
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_subtask",
          "docstring": "Execute single subtask with specified router",
          "line_range": [
            92,
            129
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
          "line_range": [
            131,
            161
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ParallelExecutor",
          "docstring": "Parallel task execution strategy\n\nEpic 5 example: documentation + code generation simultaneously\nBenefit: Maximum speed, resource utilization",
          "line_range": [
            16,
            161
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
              "line_range": [
                28,
                90
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_subtask",
              "docstring": "Execute single subtask with specified router",
              "line_range": [
                92,
                129
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
              "line_range": [
                131,
                161
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "list",
          "OrchestrationResult",
          "isinstance",
          "enumerate",
          "str",
          "result.get",
          "self._decompose_task",
          "asyncio.gather",
          "datetime.now",
          "set",
          "parallel_tasks.append",
          "len",
          "self._execute_subtask",
          "agents_used.append"
        ],
        "_execute_subtask": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_decompose_task": [
          "query.lower",
          "any"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "asyncio",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "2c482ec2f4d28a3d8502ea47101d535569a8959edf61524d38fd5eda4a5ef938",
      "artifact_id": "0d2b4a2b-2429-4696-bdb0-84010334b6ff"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.sequential_executor",
      "path": "core/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "module_doc": "Sequential execution strategy\n\nEpic 5 Phase 3.1: Sequential handoffs execution\nSingle responsibility: Execute tasks in sequence with context handoffs",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            25
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
          "line_range": [
            27,
            104
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_step",
          "docstring": "Execute single sequential step with context",
          "line_range": [
            106,
            148
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_query_with_context",
          "docstring": "Enhance query with context from previous steps for better handoff",
          "line_range": [
            150,
            167
          ],
          "parameters": [
            "self",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary from step result for context handoff",
          "line_range": [
            169,
            183
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_extract_key_outputs",
          "docstring": "Extract key outputs for next step context",
          "line_range": [
            185,
            196
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_sequential_task",
          "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
          "line_range": [
            198,
            236
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SequentialExecutor",
          "docstring": "Sequential handoffs execution strategy\n\nEpic 5 example: design \u2192 implementation \u2192 review\nBenefit: Context preservation, logical workflow",
          "line_range": [
            15,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                25
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
              "line_range": [
                27,
                104
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_step",
              "docstring": "Execute single sequential step with context",
              "line_range": [
                106,
                148
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_enhance_query_with_context",
              "docstring": "Enhance query with context from previous steps for better handoff",
              "line_range": [
                150,
                167
              ],
              "parameters": [
                "self",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary from step result for context handoff",
              "line_range": [
                169,
                183
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_extract_key_outputs",
              "docstring": "Extract key outputs for next step context",
              "line_range": [
                185,
                196
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_decompose_sequential_task",
              "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
              "line_range": [
                198,
                236
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "list",
          "OrchestrationResult",
          "self._extract_key_outputs",
          "step_result.get",
          "enumerate",
          "str",
          "self._execute_step",
          "datetime.now",
          "self._decompose_sequential_task",
          "len",
          "agents_used.append",
          "self._extract_summary"
        ],
        "_execute_step": [
          "list",
          "self._enhance_query_with_context",
          "str",
          "router.route_task",
          "context.keys",
          "router.execute_with_model"
        ],
        "_enhance_query_with_context": [
          "context.items",
          "previous_outputs.append",
          "value.get",
          "key.startswith"
        ],
        "_extract_summary": [
          "str",
          "len",
          "isinstance",
          "step_result.get"
        ],
        "_extract_key_outputs": [
          "key_outputs.append",
          "isinstance",
          "step_result.get"
        ],
        "_decompose_sequential_task": [
          "query.lower",
          "any"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "eed9a52c092a9869150c9740578d82836d45b6f78691fceef7487f9a43018ecd",
      "artifact_id": "916353b3-34cd-4ea0-b07e-417d59e199bc"
    },
    {
      "module_id": "core.llmgenie.orchestration.executors.__init__",
      "path": "core/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "module_doc": "Execution strategies for multi-agent orchestration\n\nEpic 5 Phase 3.1: All execution modes\n- ParallelExecutor: Independent parallel execution\n- SequentialExecutor: Sequential handoffs with context\n- CollaborativeExecutor: Competitive quality optimization",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CollaborativeExecutor",
        "ParallelExecutor",
        "SequentialExecutor",
        "collaborative_executor",
        "parallel_executor",
        "sequential_executor"
      ],
      "hash": "9eb357fce290bb15766ae4f824cfe940887df5e2fa98a08ae50fa72e8d0ac401",
      "artifact_id": "54936c61-8200-40ca-b0c1-0a9d0884a9d9"
    },
    {
      "module_id": "core.llmgenie.modules.commands.metrics",
      "path": "core/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "print"
        ],
        "metrics_summary": [
          "max",
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "print"
        ],
        "metrics_analytics": [
          "writer.writerow",
          "json.dumps",
          "open",
          "enumerate",
          "time.strftime",
          "json.dump",
          "get_metrics_tracker",
          "tracker.get_analytics_data",
          "print",
          "tracker.get_session_summary",
          "csv.writer"
        ],
        "metrics_report": [
          "open",
          "analytics.get",
          "time.strftime",
          "get_metrics_tracker",
          "tracker.get_analytics_data",
          "print",
          "len",
          "sum",
          "f.write",
          "min"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "enumerate",
          "get_token_summary",
          "interaction.get",
          "get_metrics_tracker",
          "print",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_summary",
          "metrics_tokens",
          "metrics_status",
          "metrics_report",
          "metrics_track",
          "print",
          "metrics_analytics"
        ]
      },
      "dependencies": [
        "core.llmgenie.metrics_tracker",
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "time",
        "track_workflow_event"
      ],
      "hash": "f4e9ffafe6b4a528960643400c0049482e633cd146d3230a1f8f80ab30b8a3dd",
      "artifact_id": "eebb7716-b1d2-454d-a547-2e79bc8351f3"
    },
    {
      "module_id": "core.llmgenie.modules.commands.services",
      "path": "core/llmgenie/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "metrics_report.add_argument",
          "api_parser.add_subparsers",
          "bot_parser.add_subparsers",
          "services_subparsers.add_parser",
          "api_subparsers.add_parser",
          "metrics_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "api_start.add_argument",
          "bot_start.add_argument",
          "metrics_track.add_argument",
          "metrics_subparsers.add_parser",
          "bot_subparsers.add_parser",
          "subparsers.add_parser",
          "services_parser.add_subparsers"
        ],
        "cmd_api_management": [
          "requests.post",
          "process.wait",
          "int",
          "pid_file.exists",
          "open",
          "str",
          "process.terminate",
          "f.read",
          "psutil.Process",
          "subprocess.Popen",
          "data.get",
          "pid_file.unlink",
          "print",
          "response.json",
          "venv_path.exists",
          "f.write",
          "Path",
          "requests.get"
        ],
        "cmd_bot_management": [
          "process.wait",
          "int",
          "pid_file.exists",
          "open",
          "str",
          "f.read",
          "psutil.Process",
          "active_bots.append",
          "process.is_running",
          "os.getenv",
          "subprocess.Popen",
          "pid_file.unlink",
          "bot_scripts.get",
          "print",
          "f.write",
          "Path",
          "process.terminate"
        ],
        "cmd_services": [
          "time.sleep",
          "cmd_bot_management",
          "cmd_api_management",
          "print",
          "type"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "artifact_id": "bf51c3b0-6e73-4274-88af-65a5aff64cf2"
    },
    {
      "module_id": "core.llmgenie.modules.commands.__init__",
      "path": "core/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "5f264c06-dc62-4023-80ca-4a7a3138f485"
    },
    {
      "module_id": "core.llmgenie.modules.commands.queue",
      "path": "core/llmgenie/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "logging.error",
          "load_gitignore",
          "isinstance",
          "write_to_file",
          "open",
          "workflow.get",
          "enumerate",
          "options.get",
          "attach_to_llm_request",
          "logging.info",
          "json.load",
          "client.query",
          "item.get",
          "print",
          "len",
          "get_folder_structure",
          "time.time",
          "read_file_content"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "get_folder_structure",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3a70eff4f7e5843b751690556afc4895f66aec81012715a060d1e2ed24daf722",
      "artifact_id": "2b1dcbcf-f590-40e0-84cf-0d33811f4783"
    },
    {
      "module_id": "core.llmgenie.modules.cli.audit",
      "path": "core/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "hasattr",
          "print",
          "file_path.exists",
          "Path",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "core.llmgenie.cli",
        "os",
        "pathlib"
      ],
      "hash": "debd01c866c298dd83797c012c8b2443affc5becd6dca75e702282c7b54058e7",
      "artifact_id": "54707fbb-9bcc-40cf-a5ac-40fd0465506f"
    },
    {
      "module_id": "core.llmgenie.modules.cli.utils",
      "path": "core/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from core.llmgenie.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.error",
          "line.startswith",
          "gitignore_path.open",
          "line.strip",
          "gitignore_path.exists",
          "Path"
        ],
        "load_config": [
          "logging.error",
          "config_path.open",
          "config_path.exists",
          "toml.load",
          "Path"
        ],
        "read_file_content": [
          "logging.error",
          "path.is_file",
          "f.read",
          "path.open",
          "Path"
        ],
        "write_to_file": [
          "logging.error",
          "base_path.mkdir",
          "str",
          "file_path.open",
          "logging.info",
          "logging.warning",
          "re.sub",
          "file_path.exists",
          "f.write",
          "Path"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "filename.strip",
          "files.append"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "list",
          "parsing_config.get",
          "cli_config.get",
          "set",
          "config.get"
        ],
        "get_include_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "logging.error",
          "toml.dump",
          "config_path.open",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "2af9c4d39b5839e6d9ccb00fc9c93bbb5d6936765b7763474e5dc9c24800e628",
      "artifact_id": "92ffc8ca-0b3d-4aa7-910f-3c25836a4a6b"
    },
    {
      "module_id": "core.llmgenie.modules.cli.dogfood",
      "path": "core/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "artifact_id": "ad3e86cd-0536-49ad-87c2-042b6deedd82"
    },
    {
      "module_id": "core.llmgenie.modules.cli.handlers_legacy",
      "path": "core/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "cache.close",
          "attach_to_llm_request",
          "user_input.lower",
          "logging.error",
          "load_gitignore",
          "JSONCache",
          "write_to_file",
          "client.query",
          "logging.warning",
          "LLMClient",
          "input",
          "Path",
          "read_file_content",
          "json.dumps",
          "parse",
          "args_str.strip",
          "print",
          "re.match",
          "os.listdir",
          "sorted",
          "user_input.startswith",
          "get_folder_structure",
          "m.group"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.cli",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "get_folder_structure",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "d7480d621e41d40722fac2f1c85ae74a1307cb45818a7cdc01fc388082ed587b",
      "artifact_id": "57e6ee1e-a0f9-470a-addf-a42e1c5d75dc"
    },
    {
      "module_id": "core.llmgenie.modules.cli.analyze_duplicates",
      "path": "core/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "sorted",
          "json.dumps",
          "rec.get",
          "analysis.get",
          "r.get",
          "filtered_duplicates.items",
          "duplicates.items",
          "open",
          "enumerate",
          "traceback.print_exc",
          "getattr",
          "json.dump",
          "hasattr",
          "duplication_data.get",
          "print",
          "len",
          "WorkflowOrchestrator",
          "orchestrator.analyze_codebase_for_duplicates"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "core.llmgenie.workflow_orchestrator",
        "json",
        "traceback"
      ],
      "hash": "5d5429cec0926cad57bd7013a0dd05ce6c9aac09503ddd86314c73d2f4fcd38a",
      "artifact_id": "3dcc1cb7-07e2-42e1-9ccb-02a249aa4000"
    },
    {
      "module_id": "core.llmgenie.modules.cli.__init__",
      "path": "core/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "edf8d5e0-3275-4ab5-9628-c3f7643cee19"
    },
    {
      "module_id": "core.llmgenie.modules.cli.review",
      "path": "core/llmgenie/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "artifact_id": "2bc24bff-0dd8-40db-853e-a581e3d600fc"
    },
    {
      "module_id": "core.llmgenie.modules.cli.context",
      "path": "core/llmgenie/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "artifact_id": "404c30d3-83a7-41b3-9699-d9887d3365ce"
    },
    {
      "module_id": "core.llmgenie.modules.cli.query",
      "path": "core/llmgenie/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "logging.error",
          "JSONCache",
          "orchestrator.get_context_for_scenario",
          "cache.close",
          "logging.info",
          "client.query",
          "logging.warning",
          "hasattr",
          "client.query_with_context",
          "json.dump",
          "LLMClient",
          "create_context_orchestrator",
          "Path"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.context_orchestrator",
        "create_context_orchestrator",
        "json",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "0b553c169688521511caaf77bbfe644dfbc069acb2cb724d62d1d29b754799ca",
      "artifact_id": "d0e8e6b1-f10e-45ee-94ed-19a2f318e548"
    },
    {
      "module_id": "core.llmgenie.modules.cli.copilot",
      "path": "core/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "enumerate",
          "logging.info",
          "initialize_copilot",
          "hasattr",
          "logging.error",
          "manager.refresh_all_contexts",
          "manager.export_context",
          "config_path.exists",
          "Path",
          "manager.unload_context_layer",
          "manager.get_context_status",
          "getattr",
          "shutil.copy",
          "smart_suggest",
          "print",
          "manager.close",
          "manager.load_context_layer",
          "open",
          "template_path.exists",
          "f.write",
          "manager.validate_change",
          "layers.split"
        ]
      },
      "dependencies": [
        "Path",
        "core.llmgenie.copilot",
        "initialize_copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "87b3028495cb05fc38eca77649022a488eff1f25da8260c72d9a3de36113d47d",
      "artifact_id": "b42586a4-0858-42a6-a2b2-95e69bd7b392"
    },
    {
      "module_id": "core.llmgenie.modules.cli.parse",
      "path": "core/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "cache.close",
          "logging.info",
          "cli_config.get",
          "struct_data.get",
          "ast_path.open",
          "logging.error",
          "JSONCache",
          "logging.warning",
          "json.dump",
          "config.get",
          "Path",
          "cache.cache_json",
          "parsing_config.get",
          "load_config",
          "getattr",
          "struct_path.open",
          "generate_json",
          "module.get",
          "mod_dir.mkdir",
          "func.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "core.llmgenie.cache",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "generate_json",
        "json",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "96d71f8af8ca41ceb22c3f49d46725defd7587080734c9f38b8227171bf3181f",
      "artifact_id": "5d8a7aa7-8fa0-48f6-9262-cfc5d6e4a276"
    },
    {
      "module_id": "core.llmgenie.modules.cli.epic",
      "path": "core/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "show_links": [
          "load_json",
          "json.dumps",
          "str",
          "epic_path.exists",
          "t.upper",
          "item.get",
          "epic.get",
          "data.get",
          "status_filter.lower",
          "print",
          "results.items",
          "link_map.items",
          "Path"
        ],
        "add_epic_cli_subparser": [
          "show_links_parser.add_argument",
          "show_links_parser.set_defaults",
          "epic_sub.add_parser",
          "subparsers.add_parser",
          "epic_parser.add_subparsers"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "artifact_id": "06fc318e-0018-4c8d-9aa0-8aaaadd5d768"
    },
    {
      "module_id": "core.llmgenie.modules.cli.handlers",
      "path": "core/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_modular",
          "logging.warning",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "hasattr",
          "create_cli_core",
          "logging.info",
          "cli_core.run_interactive_mode"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.cli_core",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.handlers_legacy",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "82122b314d669ac5441c47b249b658f803a0ede9eceba8da1392ed98e1301030",
      "artifact_id": "eecdfbd7-a9e2-4131-8692-d71deb019bf8"
    },
    {
      "module_id": "tests.orchestration.__init__",
      "path": "tests/orchestration/__init__.py",
      "category": "test",
      "module_doc": "Modular tests for Multi-Agent Orchestration\n\nEpic 5 Phase 3.2: Beautiful modular test structure\nFollowing same patterns as orchestration implementation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "create_mock_classification",
        "create_mock_router",
        "fixtures"
      ],
      "hash": "e5cd8b226d3d4505ef637758defdd16b2aca91d7cd2ed38360feac8add3c5e8a",
      "artifact_id": "f468376b-f73a-4bc9-8d8c-4d3f0fdc7c50"
    },
    {
      "module_id": "tests.orchestration.fixtures",
      "path": "tests/orchestration/fixtures.py",
      "category": "test",
      "module_doc": "Shared test fixtures for orchestration testing\n\nEpic 5 Phase 3.2: Modular test utilities\nSingle responsibility: Common test setup utilities",
      "functions": [
        {
          "name": "create_mock_router",
          "docstring": "Create standardized mock ModelRouter for testing",
          "line_range": [
            15,
            39
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "create_mock_classification",
          "docstring": "Create standardized mock classification for testing",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "task_type",
            "confidence"
          ],
          "decorators": []
        },
        {
          "name": "mock_agent_routers",
          "docstring": "Standard set of mock agent routers for testing",
          "line_range": [
            60,
            66
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_task",
          "docstring": "Standard orchestration task for testing",
          "line_range": [
            70,
            79
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        }
      ],
      "classes": [
        {
          "name": "MockClassification",
          "docstring": "Mock classification result for testing",
          "line_range": [
            43,
            47
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "create_mock_router": [
          "AsyncMock",
          "Mock",
          "RoutingDecision"
        ],
        "create_mock_classification": [
          "MockClassification"
        ],
        "mock_agent_routers": [
          "create_mock_router"
        ],
        "sample_task": [
          "OrchestrationTask"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationTask",
        "RoutingDecision",
        "dataclass",
        "dataclasses",
        "pytest",
        "src.llmgenie.orchestration.core",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "336e9732d4a736487f06c17e382e2a4c901a3c91d1832fa7cdfa1275d305a844",
      "artifact_id": "aa0020f8-3971-4501-baa2-304ba38b3d7e"
    },
    {
      "module_id": "tests.orchestration.integration.__init__",
      "path": "tests/orchestration/integration/__init__.py",
      "category": "test",
      "module_doc": "Integration tests\n\nEpic 5 Phase 3.2: Modular integration tests\n- Epic 5 component integration\n- Quality pipeline integration\n- Performance validation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "f6395a280dab5eed75eab816a2952b83e20a8cbc99d7bb71f286bee531d1b946",
      "artifact_id": "ccb68eb0-bc43-44aa-8a75-f734057512b5"
    },
    {
      "module_id": "tests.orchestration.integration.test_epic5_components",
      "path": "tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "module_doc": "Test integration with Epic 5 components\n\nEpic 5 Phase 3.2: Modular integration tests\nSingle responsibility: Test Epic 5 TaskRouter/ModelRouter integration only",
      "functions": [
        {
          "name": "orchestrator_with_classifier",
          "docstring": "Create orchestrator with TaskClassifier integration",
          "line_range": [
            20,
            32
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_auto_mode_selection",
          "docstring": "Test automatic mode selection using TaskClassifier",
          "line_range": [
            35,
            47
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_model_router_interface_compliance",
          "docstring": "Test that orchestration correctly uses ModelRouter interface",
          "line_range": [
            50,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_orchestrator_stats_with_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is available",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestrator_stats_without_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is not available",
          "line_range": [
            81,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEpic5Integration",
          "docstring": "Test integration with Epic 5 TaskRouter components",
          "line_range": [
            16,
            90
          ],
          "methods": [
            {
              "name": "orchestrator_with_classifier",
              "docstring": "Create orchestrator with TaskClassifier integration",
              "line_range": [
                20,
                32
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_auto_mode_selection",
              "docstring": "Test automatic mode selection using TaskClassifier",
              "line_range": [
                35,
                47
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_model_router_interface_compliance",
              "docstring": "Test that orchestration correctly uses ModelRouter interface",
              "line_range": [
                50,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestrator_stats_with_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is available",
              "line_range": [
                72,
                79
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_orchestrator_stats_without_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is not available",
              "line_range": [
                81,
                90
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "orchestrator_with_classifier": [
          "Mock",
          "AsyncMock",
          "create_mock_classification",
          "AgentOrchestrator",
          "create_mock_router"
        ],
        "test_auto_mode_selection": [
          "orchestrator_with_classifier.orchestrate",
          "create_mock_classification"
        ],
        "test_model_router_interface_compliance": [
          "create_mock_router",
          "orchestrator.orchestrate",
          "AgentOrchestrator"
        ],
        "test_orchestrator_stats_with_classifier": [
          "orchestrator_with_classifier.get_orchestration_stats",
          "len"
        ],
        "test_orchestrator_stats_without_classifier": [
          "orchestrator.get_orchestration_stats",
          "create_mock_router",
          "AgentOrchestrator"
        ]
      },
      "dependencies": [
        "AgentOrchestrator",
        "AsyncMock",
        "ExecutionMode",
        "Mock",
        "TaskClassifier",
        "create_mock_classification",
        "create_mock_router",
        "fixtures",
        "pytest",
        "src.llmgenie.orchestration",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "6edc2562c8a82e152096729256d57da4f3c2ec9bd2172eab691f18e5b87ba0fe",
      "artifact_id": "1c4e9c4d-22b5-44e8-9f87-2f2828a2c2a3"
    },
    {
      "module_id": "tests.orchestration.core.test_task_models",
      "path": "tests/orchestration/core/test_task_models.py",
      "category": "test",
      "module_doc": "Test OrchestrationTask and OrchestrationResult models\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test task dataclass models only",
      "functions": [
        {
          "name": "test_orchestration_task_creation",
          "docstring": "Test basic task creation",
          "line_range": [
            21,
            37
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_context",
          "docstring": "Test task creation with context",
          "line_range": [
            39,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_subtasks",
          "docstring": "Test task creation with predefined subtasks",
          "line_range": [
            51,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_creation",
          "docstring": "Test basic result creation",
          "line_range": [
            67,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_with_quality_score",
          "docstring": "Test result creation with quality metrics",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_metadata",
          "docstring": "Test result with comprehensive metadata",
          "line_range": [
            99,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_status_values",
          "docstring": "Test valid status values",
          "line_range": [
            121,
            134
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_efficiency_bounds",
          "docstring": "Test coordination efficiency is properly bounded",
          "line_range": [
            136,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestOrchestrationTask",
          "docstring": "Test OrchestrationTask dataclass",
          "line_range": [
            18,
            61
          ],
          "methods": [
            {
              "name": "test_orchestration_task_creation",
              "docstring": "Test basic task creation",
              "line_range": [
                21,
                37
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_context",
              "docstring": "Test task creation with context",
              "line_range": [
                39,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_subtasks",
              "docstring": "Test task creation with predefined subtasks",
              "line_range": [
                51,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestOrchestrationResult",
          "docstring": "Test OrchestrationResult dataclass",
          "line_range": [
            64,
            150
          ],
          "methods": [
            {
              "name": "test_orchestration_result_creation",
              "docstring": "Test basic result creation",
              "line_range": [
                67,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_with_quality_score",
              "docstring": "Test result creation with quality metrics",
              "line_range": [
                84,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_metadata",
              "docstring": "Test result with comprehensive metadata",
              "line_range": [
                99,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_status_values",
              "docstring": "Test valid status values",
              "line_range": [
                121,
                134
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_efficiency_bounds",
              "docstring": "Test coordination efficiency is properly bounded",
              "line_range": [
                136,
                150
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_orchestration_task_creation": [
          "isinstance",
          "OrchestrationTask"
        ],
        "test_orchestration_task_with_context": [
          "OrchestrationTask"
        ],
        "test_orchestration_task_with_subtasks": [
          "OrchestrationTask",
          "len"
        ],
        "test_orchestration_result_creation": [
          "OrchestrationResult",
          "len"
        ],
        "test_orchestration_result_with_quality_score": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_metadata": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_status_values": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_efficiency_bounds": [
          "OrchestrationResult"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "datetime",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "a2fcc262d9288f06079ee513b812befe385aaef043e85f7e014c1b1dd722c9cb",
      "artifact_id": "2ea5e53d-a48b-41da-9f4b-7d3c8dc7d0ff"
    },
    {
      "module_id": "tests.orchestration.core.__init__",
      "path": "tests/orchestration/core/__init__.py",
      "category": "test",
      "module_doc": "Core orchestration component tests\n\nEpic 5 Phase 3.2: Modular core tests\n- ExecutionMode functionality\n- AgentCoordination types  \n- Task/Result dataclasses",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "8d4d25334b396f653cd7e2e27e12e65f8c6a9c11e31de4f9388e7fb8a33630f5",
      "artifact_id": "920f84ff-2222-4d6f-9676-c9de2b182c0b"
    },
    {
      "module_id": "tests.orchestration.core.test_execution_modes",
      "path": "tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "module_doc": "Test ExecutionMode enum and smart suggestions\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test ExecutionMode functionality only",
      "functions": [
        {
          "name": "test_execution_mode_values",
          "docstring": "Test that all execution modes have correct values",
          "line_range": [
            15,
            19
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_collaborative_tasks",
          "docstring": "Test mode suggestion for collaborative tasks",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_sequential_tasks",
          "docstring": "Test mode suggestion for sequential tasks",
          "line_range": [
            33,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_parallel_tasks",
          "docstring": "Test mode suggestion for parallel tasks",
          "line_range": [
            45,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_descriptions",
          "docstring": "Test mode descriptions are available",
          "line_range": [
            57,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_use_cases",
          "docstring": "Test use cases are available for each mode",
          "line_range": [
            64,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_enum_completeness",
          "docstring": "Test that we have expected number of execution modes",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestExecutionMode",
          "docstring": "Test ExecutionMode enum functionality",
          "line_range": [
            12,
            77
          ],
          "methods": [
            {
              "name": "test_execution_mode_values",
              "docstring": "Test that all execution modes have correct values",
              "line_range": [
                15,
                19
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_collaborative_tasks",
              "docstring": "Test mode suggestion for collaborative tasks",
              "line_range": [
                21,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_sequential_tasks",
              "docstring": "Test mode suggestion for sequential tasks",
              "line_range": [
                33,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_parallel_tasks",
              "docstring": "Test mode suggestion for parallel tasks",
              "line_range": [
                45,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_descriptions",
              "docstring": "Test mode descriptions are available",
              "line_range": [
                57,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_use_cases",
              "docstring": "Test use cases are available for each mode",
              "line_range": [
                64,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_enum_completeness",
              "docstring": "Test that we have expected number of execution modes",
              "line_range": [
                71,
                77
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_execution_mode_values": [],
        "test_suggest_mode_for_collaborative_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_sequential_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_parallel_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_mode_descriptions": [
          "mode.get_description",
          "isinstance",
          "len"
        ],
        "test_mode_use_cases": [
          "isinstance",
          "len",
          "mode.get_use_cases"
        ],
        "test_mode_enum_completeness": [
          "list",
          "len"
        ]
      },
      "dependencies": [
        "ExecutionMode",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "c0e34fcebe8e3ba2587f21831cb05149040ff783b53e99d7d2ed01d67b328794",
      "artifact_id": "9d9b7fee-e6bb-4e9a-8029-9cd18568ed6e"
    },
    {
      "module_id": "tests.orchestration.executors.test_parallel_executor",
      "path": "tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "module_doc": "Test ParallelExecutor implementation\n\nEpic 5 Phase 3.2: Modular executor tests\nSingle responsibility: Test ParallelExecutor only",
      "functions": [
        {
          "name": "parallel_executor",
          "docstring": "Create ParallelExecutor with mock routers",
          "line_range": [
            20,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_parallel_execution_success",
          "docstring": "Test successful parallel execution",
          "line_range": [
            29,
            37
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_parallel_execution_partial_failure",
          "docstring": "Test parallel execution with one agent failing",
          "line_range": [
            40,
            55
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_subtask_decomposition",
          "docstring": "Test automatic subtask decomposition",
          "line_range": [
            58,
            65
          ],
          "parameters": [
            "self",
            "parallel_executor"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_timing_efficiency",
          "docstring": "Test that parallel execution is actually parallel",
          "line_range": [
            68,
            85
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "delayed_execute",
          "docstring": "",
          "line_range": [
            71,
            73
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestParallelExecutor",
          "docstring": "Test parallel execution strategy",
          "line_range": [
            16,
            85
          ],
          "methods": [
            {
              "name": "parallel_executor",
              "docstring": "Create ParallelExecutor with mock routers",
              "line_range": [
                20,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_parallel_execution_success",
              "docstring": "Test successful parallel execution",
              "line_range": [
                29,
                37
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_parallel_execution_partial_failure",
              "docstring": "Test parallel execution with one agent failing",
              "line_range": [
                40,
                55
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_subtask_decomposition",
              "docstring": "Test automatic subtask decomposition",
              "line_range": [
                58,
                65
              ],
              "parameters": [
                "self",
                "parallel_executor"
              ]
            },
            {
              "name": "test_timing_efficiency",
              "docstring": "Test that parallel execution is actually parallel",
              "line_range": [
                68,
                85
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parallel_executor": [
          "ParallelExecutor",
          "create_mock_router"
        ],
        "test_parallel_execution_success": [
          "parallel_executor.execute",
          "len"
        ],
        "test_parallel_execution_partial_failure": [
          "parallel_executor.execute",
          "Exception",
          "len"
        ],
        "test_subtask_decomposition": [
          "subtask.lower",
          "any",
          "parallel_executor._decompose_task",
          "len"
        ],
        "test_timing_efficiency": [],
        "delayed_execute": [
          "asyncio.sleep"
        ]
      },
      "dependencies": [
        "Mock",
        "ParallelExecutor",
        "asyncio",
        "create_mock_router",
        "fixtures",
        "pytest",
        "sample_task",
        "src.llmgenie.orchestration.executors",
        "time",
        "unittest.mock"
      ],
      "hash": "ddcd4b096d4dc729b3e684bba692064d2767fe18826b66775122089d1140c562",
      "artifact_id": "6e725272-6629-42a5-bdbe-f5b1bfb12778"
    },
    {
      "module_id": "tests.orchestration.executors.__init__",
      "path": "tests/orchestration/executors/__init__.py",
      "category": "test",
      "module_doc": "Executor strategy tests\n\nEpic 5 Phase 3.2: Modular executor tests\n- ParallelExecutor tests\n- SequentialExecutor tests  \n- CollaborativeExecutor tests",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "d878102fd65f0224ee4e226de4fb6ffeaf2f4628b87f0d92753e3585ac2aa9dc",
      "artifact_id": "265962ee-1e45-421d-8095-95764d494663"
    }
  ]
}