{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-12T12:09:30.650678Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 173,
      "functions_count": 1057,
      "classes_count": 204,
      "call_edges_count": 2870
    },
    "artifact_id": "5ba56e61-d637-4ecf-a0fb-dc8111d811c8",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "723a4eb3-4e57-4332-8da6-2c2c5eaf4ce0",
        "metadata": {}
      },
      {
        "path": ".cache",
        "type": "directory",
        "artifact_id": "e806febe-a6d3-4ac8-825c-62019857808f",
        "metadata": {}
      },
      {
        "path": ".cache/rag_embeddings",
        "type": "directory",
        "artifact_id": "cfa8a753-1481-4a60-9b98-322b02545202",
        "metadata": {}
      },
      {
        "path": ".cursor",
        "type": "directory",
        "artifact_id": "5251aee4-1645-4200-816b-3c437ec6277e",
        "metadata": {}
      },
      {
        "path": ".cursor/rules",
        "type": "directory",
        "artifact_id": "c633b396-e123-4077-b7f0-a7ec5d7ef53b",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/core",
        "type": "directory",
        "artifact_id": "f82c7106-5d59-4104-8325-9c278469d6ee",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/core-rules",
        "type": "directory",
        "artifact_id": "a16869ae-d5e7-45b6-b997-6e1cc24da843",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles",
        "type": "directory",
        "artifact_id": "c19d1724-aa5f-42cd-b57a-9272c7a05ad9",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/roles/220_rules_engineer",
        "type": "directory",
        "artifact_id": "4ed22b82-477b-420e-bf6a-15bd1480689e",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/security",
        "type": "directory",
        "artifact_id": "8a40aaec-f5c6-48c0-a7c9-a36d1fce83dc",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/templates",
        "type": "directory",
        "artifact_id": "b887177a-3e4d-40d2-ac3d-2a7faa3a8d00",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/tools",
        "type": "directory",
        "artifact_id": "dc520f3c-6943-4f82-95eb-2239e062b123",
        "metadata": {}
      },
      {
        "path": ".cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "1eddedb4-9ef6-4fa8-a5a6-d3e49471942b",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "cd10d26c-09d8-4a1f-864d-bb57ab8e7754",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "e7c844f1-f8bc-4bea-8a3d-ec9db88e525c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index",
        "type": "directory",
        "artifact_id": "a78d8906-eead-4100-8450-371e412be319",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/data",
        "type": "directory",
        "artifact_id": "c78c612c-8c91-4e61-8ad4-ad23fa6993e7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/data/audit",
        "type": "directory",
        "artifact_id": "b4142e36-c650-43c9-abeb-b33a99fbeb2a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/data/audit/audit_2025-06-12",
        "type": "directory",
        "artifact_id": "64862422-cb91-4b80-99c4-af60dd5d9160",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/data/audit/audit_2025-06-12/workfiles",
        "type": "directory",
        "artifact_id": "d166409f-2f47-47c7-8615-04871477250e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/demos",
        "type": "directory",
        "artifact_id": "013db6cc-a34c-4be8-b80a-51e3a694fb87",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure",
        "type": "directory",
        "artifact_id": "5b1061c6-3e03-420e-a18e-5a57111331df",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core",
        "type": "directory",
        "artifact_id": "29a388f2-e881-4a6f-b684-670a733991b5",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie",
        "type": "directory",
        "artifact_id": "79f25ccc-5887-4b27-87d6-59056a68940f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/api",
        "type": "directory",
        "artifact_id": "eda92d1d-27ea-44f7-8ae0-711bc661f9dd",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/cli",
        "type": "directory",
        "artifact_id": "ef390b77-5941-49f2-a429-dc977baaad52",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "e49aea3b-c692-4efc-942d-b497d954fa18",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/modules",
        "type": "directory",
        "artifact_id": "5d85d2c8-aff3-466e-9325-6e4558e313ee",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "e829ffb8-927e-4291-b47c-148b1207df3d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "1cf436b1-233e-462d-b15f-801acb326362",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "995415d4-0d2f-4ba8-be4a-d22f3614a408",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "7575b7ad-f947-42f5-9911-cb008d0d4f5d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "6416ffdc-e6b1-4a43-9f3f-5daa46b1f903",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "72991558-7b36-46ea-8208-61e8a4d66a45",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/rag_context",
        "type": "directory",
        "artifact_id": "b1e314c5-e5f7-483c-9329-a40c258c5459",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "8e025346-d2e2-474e-b813-3a461aa294d9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/core/struct_tools",
        "type": "directory",
        "artifact_id": "97b99bd4-578e-4efd-93b3-8a66c67a7c57",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/tests",
        "type": "directory",
        "artifact_id": "4fa51ed6-ae9a-49e0-a1ed-50c6802966ac",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/tests/orchestration",
        "type": "directory",
        "artifact_id": "b2c563d3-a88e-432b-a24a-e6ed4d98efe8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/tests/orchestration/core",
        "type": "directory",
        "artifact_id": "c9bb3fd0-c52f-424c-b1d8-755e10fa7ee1",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/tests/orchestration/executors",
        "type": "directory",
        "artifact_id": "93914dcd-ceea-4de8-ba7b-02c6de76728c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/restructure/tests/orchestration/integration",
        "type": "directory",
        "artifact_id": "6fe5cbf2-8a77-4d1d-8494-dc961dc32e77",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/scripts",
        "type": "directory",
        "artifact_id": "98e74776-8890-44c1-82af-638a1564f5c4",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/scripts/tools",
        "type": "directory",
        "artifact_id": "fd68ee53-c2b4-4e18-aa11-564c9387c99d",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src",
        "type": "directory",
        "artifact_id": "58106b19-9932-43ef-95a1-3353cf47fea6",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie",
        "type": "directory",
        "artifact_id": "1cac42f2-8462-41cf-8cab-31e4b8525ebc",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/api",
        "type": "directory",
        "artifact_id": "24444178-0272-44b8-9388-03417ee226de",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/cli",
        "type": "directory",
        "artifact_id": "f4ab4488-c9cb-4c91-be30-b8d574bac844",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "42f55c26-9f47-45a2-bb09-487ca64d50bb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules",
        "type": "directory",
        "artifact_id": "3374f7bb-9a93-487a-a55d-7f53ccf71236",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "d6020dc1-9c6d-41c2-a123-17130f31bf15",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "c38b8282-2b06-4da4-80fd-ddbd2fbb9e1c",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "c609e8ac-d934-4a4f-ad2f-e19e2654b574",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "81dffea9-3032-4ba5-a69f-dac49e52e401",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "136d08a1-bdc2-4159-a648-88017ad564d0",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "5c87fa8a-6dfb-48da-bb33-42c28d4585ed",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/rag_context",
        "type": "directory",
        "artifact_id": "b67f2634-6447-4e11-88fd-ccd0125c241f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "11c4d40d-65c3-49e0-aa4d-3f3b4cf397e9",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/src/struct_tools",
        "type": "directory",
        "artifact_id": "86a6f8d1-b4f9-44b5-ae89-a6c8cd9089bf",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests",
        "type": "directory",
        "artifact_id": "0d2a5463-223e-4710-9d09-a2487e498648",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/orchestration",
        "type": "directory",
        "artifact_id": "3273bb46-8706-4ef0-a304-7fcecaf8bc95",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/orchestration/core",
        "type": "directory",
        "artifact_id": "2b76476b-2333-47a4-9611-f7b6d5f1422e",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/orchestration/executors",
        "type": "directory",
        "artifact_id": "4b7af82b-6aec-45fe-ac30-efa4e4f9b6e8",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tests/orchestration/integration",
        "type": "directory",
        "artifact_id": "5bf1d3ab-3eec-4dff-a038-8fc9611c091f",
        "metadata": {}
      },
      {
        "path": ".llmstruct_index/tools",
        "type": "directory",
        "artifact_id": "0bdfeafc-6b22-4a14-bc33-ceb8b298cdeb",
        "metadata": {}
      },
      {
        "path": "analysis",
        "type": "directory",
        "artifact_id": "b6886e8a-c7db-4c75-8786-32e43dc3bf2b",
        "metadata": {}
      },
      {
        "path": "analysis/epic-review-v3",
        "type": "directory",
        "artifact_id": "d510b6c8-dfde-43a1-82f7-a082366744dc",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "30cd976f-373e-489a-8e80-eb20191517a0",
        "metadata": {}
      },
      {
        "path": "bak/bak",
        "type": "directory",
        "artifact_id": "a1cb512b-6a1d-43e2-acdb-5b7e300b3698",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor",
        "type": "directory",
        "artifact_id": "cfbbfb30-b4c1-490f-ab96-9e526ecaf99a",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "417c4f72-cf5e-422d-80b0-7953790ae394",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/bak",
        "type": "directory",
        "artifact_id": "7c11d907-cc36-4c43-9493-9991ed7f2369",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/bak/.cursor",
        "type": "directory",
        "artifact_id": "56e740c7-2f9b-404f-9784-1d8ff1c6bdce",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "a46831d5-f3ce-461a-a1ac-9055a9b362fa",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "c9970a3b-9b5d-4c62-aeb1-ad610ed37613",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "8ac354a2-756d-4a1e-9c1b-3e9eedf05839",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/core",
        "type": "directory",
        "artifact_id": "1ffb9785-e939-4a7c-8a26-3e61cba8520a",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/roles",
        "type": "directory",
        "artifact_id": "974c72cb-31fc-4f1b-a4c4-d493c348395c",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "8e280c50-6f71-43da-8de4-72cc83f8e6d9",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/templates",
        "type": "directory",
        "artifact_id": "d7a13c1a-7f3a-42df-aeb9-a851b4c77166",
        "metadata": {}
      },
      {
        "path": "bak/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "62121d5e-0fa8-4ef7-9f93-62121f04e5cd",
        "metadata": {}
      },
      {
        "path": "bak/rules",
        "type": "directory",
        "artifact_id": "1828f4e3-b783-4099-a932-951e76bcd239",
        "metadata": {}
      },
      {
        "path": "bak/rules/core",
        "type": "directory",
        "artifact_id": "02ed3880-7f98-4bd3-92f2-e17bea5ad5ac",
        "metadata": {}
      },
      {
        "path": "bak/rules/languages",
        "type": "directory",
        "artifact_id": "8cda1cca-8cc3-4bd9-9503-d40862a67ebc",
        "metadata": {}
      },
      {
        "path": "bak/rules/roles",
        "type": "directory",
        "artifact_id": "45ff4370-6b96-4b08-8604-c044734fe3a6",
        "metadata": {}
      },
      {
        "path": "bak/rules/security",
        "type": "directory",
        "artifact_id": "47a101fd-9f89-4122-a998-b6030aacb727",
        "metadata": {}
      },
      {
        "path": "bak/rules/templates",
        "type": "directory",
        "artifact_id": "9d36622e-ed07-4cb9-a8de-755f7fd4c647",
        "metadata": {}
      },
      {
        "path": "bak/rules/workflows",
        "type": "directory",
        "artifact_id": "bb32fd76-9cdd-49e4-b8e6-c15359cdd1d0",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "7c3ee720-53c1-41b2-9177-9cc359529f97",
        "metadata": {}
      },
      {
        "path": "data/audit",
        "type": "directory",
        "artifact_id": "fa2ff010-1f3d-44cf-ba0d-107b722f874a",
        "metadata": {}
      },
      {
        "path": "data/audit/audit_2025-06-12",
        "type": "directory",
        "artifact_id": "14db1ab0-6ba4-4e0e-8a12-b7025cc34441",
        "metadata": {}
      },
      {
        "path": "data/audit/audit_2025-06-12/workfiles",
        "type": "directory",
        "artifact_id": "b6f8d689-9da8-470c-8bcc-4638267105f2",
        "metadata": {}
      },
      {
        "path": "data/audit/audit_2025-06-12/workfiles/gen_audit_structure_img.py",
        "type": "file",
        "artifact_id": "e3077da4-1a6e-4b3f-910f-0c25d0b2a99d",
        "metadata": {}
      },
      {
        "path": "data/audit/audit_2025-06-12/workfiles/gen_project_structure_img.py",
        "type": "file",
        "artifact_id": "bdf016b3-d2bc-4519-b7b6-f0ca1a614214",
        "metadata": {}
      },
      {
        "path": "data/cursor_history_analysis",
        "type": "directory",
        "artifact_id": "57217637-d738-4290-8fbf-c7838b43f526",
        "metadata": {}
      },
      {
        "path": "data/cursor_history_analysis/intelligence_synthesis",
        "type": "directory",
        "artifact_id": "aa9c61d0-f84a-4926-8b12-12d0ef80abfe",
        "metadata": {}
      },
      {
        "path": "data/cursor_history_analysis/pattern_analysis",
        "type": "directory",
        "artifact_id": "648f44ef-79e9-451c-b309-7931ffb41007",
        "metadata": {}
      },
      {
        "path": "data/cursor_history_analysis/structured_data",
        "type": "directory",
        "artifact_id": "7c095e70-1251-4949-a323-26ecb5c8fe60",
        "metadata": {}
      },
      {
        "path": "data/epic_logs",
        "type": "directory",
        "artifact_id": "26ef39ec-52b4-4323-b70f-89012ecf7b68",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_ai_workflow_rules_2024",
        "type": "directory",
        "artifact_id": "3d11786a-6179-4b8b-9300-917fbdd9a9c3",
        "metadata": {}
      },
      {
        "path": "data/epic_logs/epic_session_control_2024",
        "type": "directory",
        "artifact_id": "797fe9d0-0c09-4e1f-b611-3cf10f4b89e7",
        "metadata": {}
      },
      {
        "path": "data/handoff",
        "type": "directory",
        "artifact_id": "256d67ca-f90a-463f-be75-7fbef73afc20",
        "metadata": {}
      },
      {
        "path": "data/knowledge",
        "type": "directory",
        "artifact_id": "55b14f40-4074-43c3-9fef-b07378cc154a",
        "metadata": {}
      },
      {
        "path": "data/knowledge/capabilities",
        "type": "directory",
        "artifact_id": "1d6b8ac2-51d7-4701-b321-20a8200ed8c2",
        "metadata": {}
      },
      {
        "path": "data/knowledge/envs",
        "type": "directory",
        "artifact_id": "07725e62-eff3-46dc-8a49-24da408af483",
        "metadata": {}
      },
      {
        "path": "data/knowledge/integration",
        "type": "directory",
        "artifact_id": "cd804870-9241-4358-b39c-b951df75ece9",
        "metadata": {}
      },
      {
        "path": "data/knowledge/models",
        "type": "directory",
        "artifact_id": "f08ec77a-90b6-482f-b912-3b83a78c2cc8",
        "metadata": {}
      },
      {
        "path": "data/knowledge/projects",
        "type": "directory",
        "artifact_id": "07be3f76-b55b-4a32-8eb1-7f659571a26e",
        "metadata": {}
      },
      {
        "path": "data/knowledge/projects/commercial",
        "type": "directory",
        "artifact_id": "54724dea-b103-4f15-8a94-d3fa8813c706",
        "metadata": {}
      },
      {
        "path": "data/knowledge/projects/internal",
        "type": "directory",
        "artifact_id": "a22ec663-6320-4830-895c-a215fcd9d725",
        "metadata": {}
      },
      {
        "path": "data/knowledge/techs",
        "type": "directory",
        "artifact_id": "8316ce53-10c3-47b8-956f-47a7a48411f9",
        "metadata": {}
      },
      {
        "path": "data/knowledge/templates",
        "type": "directory",
        "artifact_id": "bd51e50c-a6bd-4054-8262-3326a4cfc043",
        "metadata": {}
      },
      {
        "path": "data/logs",
        "type": "directory",
        "artifact_id": "5e0a4cf6-7bed-4158-9878-cebdd58057a2",
        "metadata": {}
      },
      {
        "path": "data/logs/sessions",
        "type": "directory",
        "artifact_id": "d5f2bbb4-aa9d-4ecb-b256-623d1f3e3925",
        "metadata": {}
      },
      {
        "path": "data/plans",
        "type": "directory",
        "artifact_id": "6a40ed1d-45bc-4b3f-8fed-e6593bcb1933",
        "metadata": {}
      },
      {
        "path": "data/quality_intelligence",
        "type": "directory",
        "artifact_id": "bd9b60d9-3e96-4796-921d-62eb9e27ce65",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "7c38d6db-861d-4a5b-aeb5-acd84ee3b1c4",
        "metadata": {}
      },
      {
        "path": "data/sessions/context_snapshots",
        "type": "directory",
        "artifact_id": "812c99e5-dd7c-4df8-a679-71f0ae40c277",
        "metadata": {}
      },
      {
        "path": "decision_memos",
        "type": "directory",
        "artifact_id": "c09d2da4-a9ec-444e-9ee6-64df508c7155",
        "metadata": {}
      },
      {
        "path": "demos",
        "type": "directory",
        "artifact_id": "f4607ae3-b5ed-41b6-9b5a-202d20ea38b2",
        "metadata": {}
      },
      {
        "path": "demos/self_refine_cli_demo.py",
        "type": "file",
        "artifact_id": "1fb36c65-efbd-4f1b-80b4-1b32f1178b89",
        "metadata": {}
      },
      {
        "path": "demos/self_refine_pipeline_demo.py",
        "type": "file",
        "artifact_id": "e3f28349-3ac5-4c90-b48e-e57e28c32c55",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "be535f63-d9a5-4ee6-a188-f831c56fac36",
        "metadata": {}
      },
      {
        "path": "docs/architecture",
        "type": "directory",
        "artifact_id": "614d3204-3df0-4f84-9dc8-dfc262530005",
        "metadata": {}
      },
      {
        "path": "docs/archive",
        "type": "directory",
        "artifact_id": "ff81d84c-1880-4e0a-b3b8-6f2c3f666abc",
        "metadata": {}
      },
      {
        "path": "docs/archive_analysis",
        "type": "directory",
        "artifact_id": "c217cc5c-9e16-4133-b8b7-b9503e7095d8",
        "metadata": {}
      },
      {
        "path": "docs/archive_analysis/01_architecture_patterns",
        "type": "directory",
        "artifact_id": "50a95010-f0d3-472c-ac49-ef2face53ff6",
        "metadata": {}
      },
      {
        "path": "docs/decision_memos",
        "type": "directory",
        "artifact_id": "6c046902-bd58-460d-8a86-ce05a977cf25",
        "metadata": {}
      },
      {
        "path": "docs/decisions",
        "type": "directory",
        "artifact_id": "3a2a2022-182d-4e3a-bdf8-05ce9dc22d37",
        "metadata": {}
      },
      {
        "path": "docs/epics",
        "type": "directory",
        "artifact_id": "42bb907c-7ba8-40d0-b909-c05f834ea6bb",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "ef77a86d-2f07-48ff-891e-d157550a93fe",
        "metadata": {}
      },
      {
        "path": "docs/guides",
        "type": "directory",
        "artifact_id": "3a31f51d-5a82-463f-be27-90737cf485be",
        "metadata": {}
      },
      {
        "path": "docs/index",
        "type": "directory",
        "artifact_id": "4475afe4-b9a3-4d0c-9e33-146d516ed7b7",
        "metadata": {}
      },
      {
        "path": "docs/knowledge",
        "type": "directory",
        "artifact_id": "07a95098-146d-48ff-9bd8-9aceb8895170",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/models",
        "type": "directory",
        "artifact_id": "7a1b78cd-c3dd-4aeb-a397-564352591536",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/techs",
        "type": "directory",
        "artifact_id": "d9e34a2f-7282-43cc-b983-1d437e6d3eb1",
        "metadata": {}
      },
      {
        "path": "docs/knowledge/templates",
        "type": "directory",
        "artifact_id": "0359711d-f714-4c9a-bf61-dd3c9ce18a3e",
        "metadata": {}
      },
      {
        "path": "docs/mamay_onboarding",
        "type": "directory",
        "artifact_id": "3f439e2e-4df0-4fb5-aa62-416c8ff4d470",
        "metadata": {}
      },
      {
        "path": "docs/memos",
        "type": "directory",
        "artifact_id": "a58e03a3-a068-46bb-80e0-05fdb2e13dce",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic1",
        "type": "directory",
        "artifact_id": "932adcfd-a42f-4e3e-aaab-2c67a62b44a5",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic2",
        "type": "directory",
        "artifact_id": "0322f389-6459-4d31-9e1e-ac7e241632b2",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic3",
        "type": "directory",
        "artifact_id": "9c7b3b16-bd79-4384-aeb9-8d4cd6da904e",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic4",
        "type": "directory",
        "artifact_id": "28915491-bfd3-4762-9962-4e867114fd4d",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic5",
        "type": "directory",
        "artifact_id": "4d61dac1-08ee-4d4b-bcaa-b9cc30383d4b",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic6",
        "type": "directory",
        "artifact_id": "5589d720-2f74-453b-bf33-aeecb1f5aac1",
        "metadata": {}
      },
      {
        "path": "docs/memos/epic7",
        "type": "directory",
        "artifact_id": "a9a12f50-ddf8-4d01-880f-c671c5bb379e",
        "metadata": {}
      },
      {
        "path": "docs/memos/master",
        "type": "directory",
        "artifact_id": "3d762669-7791-4ad9-9c90-c4ce983af76a",
        "metadata": {}
      },
      {
        "path": "docs/notes",
        "type": "directory",
        "artifact_id": "a451dcc5-1403-4eae-9e16-405ea54aac70",
        "metadata": {}
      },
      {
        "path": "docs/notes/llm_analisys",
        "type": "directory",
        "artifact_id": "114764c4-d304-4c4e-a127-a2c48566497d",
        "metadata": {}
      },
      {
        "path": "docs/orchestration",
        "type": "directory",
        "artifact_id": "be4be614-5787-4478-b279-e58540553cdb",
        "metadata": {}
      },
      {
        "path": "docs/phase_4A2_architecture",
        "type": "directory",
        "artifact_id": "bd947908-1960-4bb7-8123-fe438e404fa9",
        "metadata": {}
      },
      {
        "path": "docs/plans",
        "type": "directory",
        "artifact_id": "d43259ce-3fbf-400d-ae1d-47e54d1aacac",
        "metadata": {}
      },
      {
        "path": "docs/solutions",
        "type": "directory",
        "artifact_id": "242d66ee-f4a9-4e59-8da8-4c0ff2a29088",
        "metadata": {}
      },
      {
        "path": "docs/standards",
        "type": "directory",
        "artifact_id": "2fc2f857-3b1f-4bcc-a642-df2847fcdc4d",
        "metadata": {}
      },
      {
        "path": "docs/taskrouter",
        "type": "directory",
        "artifact_id": "d983f3c9-6cdb-4647-b70b-653fc75cd611",
        "metadata": {}
      },
      {
        "path": "docs/to_sort",
        "type": "directory",
        "artifact_id": "3e6121d0-b5b3-43ba-b83c-6e5e2228e191",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/examples",
        "type": "directory",
        "artifact_id": "a30ad488-dc2c-499b-93ba-dd37f0f5c3b3",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/internal",
        "type": "directory",
        "artifact_id": "b367d1da-baae-4b16-b745-99ab18b9e3f2",
        "metadata": {}
      },
      {
        "path": "docs/to_sort/internal/memos",
        "type": "directory",
        "artifact_id": "78127db6-cc79-4e57-9d11-7f8149eaf6fe",
        "metadata": {}
      },
      {
        "path": "docs/workflows",
        "type": "directory",
        "artifact_id": "468f6f18-86bc-40f5-8ba3-72904b96f832",
        "metadata": {}
      },
      {
        "path": "event_log",
        "type": "directory",
        "artifact_id": "fbb44f45-d6ea-4995-a370-f8dac3f9e888",
        "metadata": {}
      },
      {
        "path": "restructure",
        "type": "directory",
        "artifact_id": "d6d76822-470a-41fc-9a54-48072cb59ff5",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor",
        "type": "directory",
        "artifact_id": "d54bea6f-beb7-4663-a461-c12436ef018a",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules",
        "type": "directory",
        "artifact_id": "0bff8f39-e513-4984-bb61-189632ccf8fe",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/core",
        "type": "directory",
        "artifact_id": "234b20bb-e1d9-42de-84f5-021dd6f8cc9c",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/core-rules",
        "type": "directory",
        "artifact_id": "285caddc-aa5a-4729-8426-433f1c584f6d",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/roles",
        "type": "directory",
        "artifact_id": "8bb22252-4346-4c9e-ac4f-8ef0455d44a5",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/roles/220_rules_engineer",
        "type": "directory",
        "artifact_id": "b1fc0550-c7c3-43e0-becd-8f997b2cc483",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "9ef777d7-b011-4f1a-964c-ff9aa154f996",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/templates",
        "type": "directory",
        "artifact_id": "d22d76b9-ed0f-4f60-9ee0-49232576299c",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/tools",
        "type": "directory",
        "artifact_id": "ab7063db-561d-414b-8c0d-c240728d08ee",
        "metadata": {}
      },
      {
        "path": "restructure/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "7048f22e-2da5-4ce3-bd6e-46750815fd7b",
        "metadata": {}
      },
      {
        "path": "restructure/archive",
        "type": "directory",
        "artifact_id": "c4ee6e2f-07e4-4256-a3d1-c0b84576a41b",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak",
        "type": "directory",
        "artifact_id": "ca23a2a6-6d60-4c91-b040-39c8751b75f2",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak",
        "type": "directory",
        "artifact_id": "be428f65-e164-42bf-8b97-5078e382da8b",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor",
        "type": "directory",
        "artifact_id": "2e35aadd-1c6b-4813-b123-81cbdfbf4ad8",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "e53daecf-fdcc-4262-a4b0-5e9fcc3e46aa",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/bak",
        "type": "directory",
        "artifact_id": "94a3881e-7269-455d-a082-b21a759bfa2d",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/bak/.cursor",
        "type": "directory",
        "artifact_id": "eedb527f-7b04-42ce-9ddb-5f5eb3051580",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/bak/.cursor/rules",
        "type": "directory",
        "artifact_id": "1ad8a263-0404-4f8e-956f-b98225a9e6da",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "21b00fb2-c469-4248-be76-84811ade2d96",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "6af8a269-e294-40e4-a0b3-f5378cbcf72f",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/core",
        "type": "directory",
        "artifact_id": "78916a1c-a7cf-419f-9461-5138872cf9d9",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/roles",
        "type": "directory",
        "artifact_id": "7cdf45e3-a838-4b11-b622-b1b00bb0c196",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/security",
        "type": "directory",
        "artifact_id": "e0608a8b-05b4-4fd9-8f47-f6eb87f618b2",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/templates",
        "type": "directory",
        "artifact_id": "d61b45ce-482e-49bf-a711-ca7227870784",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/bak/.cursor/rules/workflows",
        "type": "directory",
        "artifact_id": "67853b81-df1d-4fe3-9df9-b34687038c25",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules",
        "type": "directory",
        "artifact_id": "17125b16-b3b2-4403-bb86-8130252961a5",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/core",
        "type": "directory",
        "artifact_id": "3746e8ed-870a-49e2-a7c3-590e0a871f09",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/languages",
        "type": "directory",
        "artifact_id": "5c818494-76a3-4534-b58a-7c011ce2d0e7",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/roles",
        "type": "directory",
        "artifact_id": "aa094333-89d7-4a47-8d5f-2e9a492d7cc5",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/security",
        "type": "directory",
        "artifact_id": "e0545f68-b19e-47bd-aea8-cefb71169a62",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/templates",
        "type": "directory",
        "artifact_id": "088656ff-fd1e-47bb-bd97-4907ac90144d",
        "metadata": {}
      },
      {
        "path": "restructure/archive/bak/rules/workflows",
        "type": "directory",
        "artifact_id": "20f144c4-6940-4c6a-a202-937252e4caac",
        "metadata": {}
      },
      {
        "path": "restructure/archive/temp_files",
        "type": "directory",
        "artifact_id": "c34f536e-da42-43ac-bef4-79a76e1f653f",
        "metadata": {}
      },
      {
        "path": "restructure/archive/tmp",
        "type": "directory",
        "artifact_id": "11fd919c-402f-49fa-8cb0-b2a7f81cb19f",
        "metadata": {}
      },
      {
        "path": "restructure/core",
        "type": "directory",
        "artifact_id": "42ce8a34-f756-47e8-acd4-650e41d17cbc",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie",
        "type": "directory",
        "artifact_id": "b1c49774-d90b-4f74-808a-30d6ccf4de45",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/api",
        "type": "directory",
        "artifact_id": "1c2aa104-111c-4ec0-bb83-e2db45e0bfb3",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/api/__init__.py",
        "type": "file",
        "artifact_id": "e67f5906-cf40-4a85-aec9-38a642eb8153",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/api/handoff_validator.py",
        "type": "file",
        "artifact_id": "fa768128-7b94-41a0-b443-fe72dd3aa8a9",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/api/main.py",
        "type": "file",
        "artifact_id": "42903b60-fd30-4bf0-ba11-2d09684562b8",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/api/simple_mcp_server.py",
        "type": "file",
        "artifact_id": "12cb1316-be40-4f3b-bf53-48f65b9b8766",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/cli",
        "type": "directory",
        "artifact_id": "e7ee913d-d3de-469c-b7ac-e3469cd8b7f8",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/cli.py",
        "type": "file",
        "artifact_id": "e7e29e8e-ef84-4d14-8349-7b4a960d819d",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/cli/handoff_cli.py",
        "type": "file",
        "artifact_id": "c5d4d5b0-e573-40d3-b15d-767076ff9e65",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/llm_client.py",
        "type": "file",
        "artifact_id": "d8ea485a-dc37-4d1a-8caa-303a17f6dfdc",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "7022dd5e-9685-4877-937a-ca7334ff9fce",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/mcp/__init__.py",
        "type": "file",
        "artifact_id": "a3a6b955-216b-49a2-b640-f0dd4ac4d59e",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/mcp/server.py",
        "type": "file",
        "artifact_id": "e243aa7c-132c-494d-997c-dbd12dc1342b",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/mcp/tools.py",
        "type": "file",
        "artifact_id": "26264a90-d31d-4223-9a6f-491e0554c155",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules",
        "type": "directory",
        "artifact_id": "ed7822de-1398-46d6-9115-68d0f04687a6",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "65919e79-f711-46bd-aead-fb0b255c1022",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "5d70bcd4-c7d2-4ede-9fa2-34bf914b7ab9",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "4de75a21-97c9-4f95-8b28-4bb136c0ac78",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "584ef091-bbee-4309-9487-77b481cc4737",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/context.py",
        "type": "file",
        "artifact_id": "70aa5e84-4704-4c6e-8fb5-d126a164e03d",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "c515c42c-a8d9-4e7e-8687-e49cd5e63b5c",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "709a8da7-722e-495a-898b-95082e6d0a97",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "188377bd-c2e0-4447-9659-7a3d07796c90",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "71925220-2a84-45ff-8301-fdfcac513790",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "df77a14a-1605-4224-a1ec-1b286accb695",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "20c9ff8e-3c0d-4fe1-9188-ff856fe3cd93",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/query.py",
        "type": "file",
        "artifact_id": "42d61109-4f7c-4f89-aff1-b9a8005ccbcf",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/review.py",
        "type": "file",
        "artifact_id": "d5aa648e-3429-4de3-8a0b-b520cd8639b0",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "c17e3fe5-73ad-4a7f-98b5-469b981892b1",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "b6324323-8883-440c-a959-b63aca923c72",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "4862f3dc-229f-4a63-a37c-9eafb297b49b",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "76060e43-01a6-4990-8b8a-4b2b41016004",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "2e215207-09b4-450c-9dc3-c249ab34b087",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/modules/commands/services.py",
        "type": "file",
        "artifact_id": "0c34aab3-14e4-4924-8e7a-fefdcb932612",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "b7d977fa-666c-4657-913d-93b021bfa62c",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "c70c38ee-aee7-4ebe-b9bf-8417fa95ecb9",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/agent_orchestrator.py",
        "type": "file",
        "artifact_id": "14c94318-acb4-4eb2-983a-03221817cd7a",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "81de6a43-8b3f-46ee-ae6c-d44e145b3048",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "e6e14664-2d7d-47d6-b1c2-80f834b282bd",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/core/coordination_types.py",
        "type": "file",
        "artifact_id": "e5548e5a-ce7e-4fdd-b7f9-824a13f81ec7",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/core/execution_modes.py",
        "type": "file",
        "artifact_id": "0a5f99de-d0d4-4aee-8ac6-4011a30bff84",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/core/task_models.py",
        "type": "file",
        "artifact_id": "80e62ba0-c34f-4260-9e96-309656fd2e0e",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "a6b5f38e-dd72-4dc9-b9cf-f0a3362a7fa2",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "e3d91545-8c76-4989-9e73-cc88c7e83eff",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/executors/collaborative_executor.py",
        "type": "file",
        "artifact_id": "ceeefb53-4f01-4132-b853-4b29b77c2a72",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/executors/parallel_executor.py",
        "type": "file",
        "artifact_id": "a4bb2ef4-857b-44a3-9ca7-cf2592626b6e",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/executors/sequential_executor.py",
        "type": "file",
        "artifact_id": "99b0dbdb-3510-4d00-bb31-d551c328ed61",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/orchestration/orchestrator.py",
        "type": "file",
        "artifact_id": "c30ae63b-6ab2-4774-9dbb-f38a9deabc53",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "2cdf31f1-0929-4857-a733-b09c4efc6876",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router/__init__.py",
        "type": "file",
        "artifact_id": "6cf73bb2-3a40-4e72-9656-e91d8487cc73",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router/model_router.py",
        "type": "file",
        "artifact_id": "58764fc0-d5f1-4d60-9bab-56e421c67fee",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router/quality_intelligence.py",
        "type": "file",
        "artifact_id": "48d4c5bc-cfe4-4c85-83f3-1311596fc7be",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router/quality_validator.py",
        "type": "file",
        "artifact_id": "af02da83-8b48-4f4f-929a-0060ae710e6a",
        "metadata": {}
      },
      {
        "path": "restructure/core/llmgenie/task_router/task_classifier.py",
        "type": "file",
        "artifact_id": "198c4fd5-d630-4aa5-97e0-3fcaef600f10",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context",
        "type": "directory",
        "artifact_id": "f596a5fd-a15d-4b75-94b6-12e9e8ef3507",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/__init__.py",
        "type": "file",
        "artifact_id": "b80867c7-326b-493c-8b29-cb5985dcf20a",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/active_knowledge_integration.py",
        "type": "file",
        "artifact_id": "2cffe20a-2020-4a57-9f9b-f01cc7c2151a",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/cli_interface.py",
        "type": "file",
        "artifact_id": "6ce68d22-1e70-4b7e-9197-e5a44ce3f6b4",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/code_discovery.py",
        "type": "file",
        "artifact_id": "aea08b7e-944e-47f5-9d0d-e4763d220751",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/config.py",
        "type": "file",
        "artifact_id": "0de9ac98-6a39-4714-b8d3-be749e6e29bc",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/cursor_intelligence.py",
        "type": "file",
        "artifact_id": "5571b6b9-0be1-4c19-866e-3b97f4d87472",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/data",
        "type": "directory",
        "artifact_id": "e334372a-3aea-4c6d-a177-4b8935ffc228",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/data/analytics",
        "type": "directory",
        "artifact_id": "63391db8-64e8-440b-892e-ae3fcce25086",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/embedder.py",
        "type": "file",
        "artifact_id": "130bbf48-7547-4c20-a670-93ee2875d165",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/enhanced_logging_intelligence.py",
        "type": "file",
        "artifact_id": "92afa355-3956-4a26-86aa-7bf548cac41d",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/enhancer.py",
        "type": "file",
        "artifact_id": "1fc4417c-ef79-4a3d-92ee-331b61d020fb",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "2af16c1a-2a5a-41b4-adfa-539900a048bc",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/__init__.py",
        "type": "file",
        "artifact_id": "47dc3e9a-b725-4391-ad18-f2e9a1bfd521",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/auto_logger.py",
        "type": "file",
        "artifact_id": "ab703cbb-1eef-41bf-93e4-1ea1983954f7",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/cli_tool.py",
        "type": "file",
        "artifact_id": "7c2077ce-f728-4c72-9001-29a01ae686fd",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/http_api.py",
        "type": "file",
        "artifact_id": "5efc9b8f-9edd-4df0-9775-66386124f667",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/mcp_server.py",
        "type": "file",
        "artifact_id": "3a356ceb-759c-497c-a08c-3f3e42257814",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "d5312ab9-0d08-463f-8004-5699ea0d60ef",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/interfaces/websocket_server.py",
        "type": "file",
        "artifact_id": "6c2afb53-0cc0-4b1d-84c4-318499d705d7",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/knowledge_extractor.py",
        "type": "file",
        "artifact_id": "3e1931db-0cc9-4b3f-91fc-529620667541",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/loader.py",
        "type": "file",
        "artifact_id": "44f4ce76-492c-47e7-a4b2-16ee169e911f",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/retriever.py",
        "type": "file",
        "artifact_id": "2ab4417a-b41a-405a-b81d-20d13f5fe09c",
        "metadata": {}
      },
      {
        "path": "restructure/core/rag_context/session_context_manager.py",
        "type": "file",
        "artifact_id": "fe9e2dca-0fad-4b53-b35a-53faa7f4f9db",
        "metadata": {}
      },
      {
        "path": "restructure/core/struct_tools",
        "type": "directory",
        "artifact_id": "b94b5158-c30c-40ca-b641-d55521d59f77",
        "metadata": {}
      },
      {
        "path": "restructure/core/struct_tools/__init__.py",
        "type": "file",
        "artifact_id": "0ccc2784-4ff5-4360-b28b-65b1d1e6e38d",
        "metadata": {}
      },
      {
        "path": "restructure/core/struct_tools/cli_interface.py",
        "type": "file",
        "artifact_id": "e9bace50-4030-4e44-98fe-55ccc6dd3146",
        "metadata": {}
      },
      {
        "path": "restructure/core/struct_tools/mcp_interface.py",
        "type": "file",
        "artifact_id": "c58282ec-c04f-48c1-a90f-b5fd8c946462",
        "metadata": {}
      },
      {
        "path": "restructure/core/struct_tools/structure_analyzer.py",
        "type": "file",
        "artifact_id": "0ec0b67a-7a88-457a-8421-cdce4c6827f1",
        "metadata": {}
      },
      {
        "path": "restructure/docs",
        "type": "directory",
        "artifact_id": "cd6800df-0830-4781-ba6e-a9533bded120",
        "metadata": {}
      },
      {
        "path": "restructure/docs/architecture",
        "type": "directory",
        "artifact_id": "ad0ee3ae-140e-4d25-a882-0cd5834fd576",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive",
        "type": "directory",
        "artifact_id": "25f19d13-eb87-478d-94dd-7e75a480f8f1",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive/examples",
        "type": "directory",
        "artifact_id": "ccbc847a-8cae-4239-bcad-1fbe619f1095",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive/internal",
        "type": "directory",
        "artifact_id": "e4803b13-4475-45db-adca-47dd707fad13",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive/internal/memos",
        "type": "directory",
        "artifact_id": "462fab45-f54a-4b61-a267-d504e109de50",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive_analysis",
        "type": "directory",
        "artifact_id": "cfdddc6e-2e5f-4b01-9f27-34fd699b2557",
        "metadata": {}
      },
      {
        "path": "restructure/docs/archive_analysis/01_architecture_patterns",
        "type": "directory",
        "artifact_id": "246efba2-7351-4e0b-aee4-f451e8d3dac7",
        "metadata": {}
      },
      {
        "path": "restructure/docs/decision_memos",
        "type": "directory",
        "artifact_id": "e8366975-1335-4d54-9e6a-6c2c268f447d",
        "metadata": {}
      },
      {
        "path": "restructure/docs/decisions",
        "type": "directory",
        "artifact_id": "3adbd25f-fee9-40f8-8849-fce4eba5223c",
        "metadata": {}
      },
      {
        "path": "restructure/docs/epics",
        "type": "directory",
        "artifact_id": "d01df5c6-e11e-43b5-a50e-97193339dd68",
        "metadata": {}
      },
      {
        "path": "restructure/docs/examples",
        "type": "directory",
        "artifact_id": "ac1af40c-885b-424d-be21-b05f5eb6aa06",
        "metadata": {}
      },
      {
        "path": "restructure/docs/guides",
        "type": "directory",
        "artifact_id": "3cc4b808-4140-4285-9c15-f576cbc3b8da",
        "metadata": {}
      },
      {
        "path": "restructure/docs/index",
        "type": "directory",
        "artifact_id": "7adb59b2-775c-4e5c-b193-326e8f3827ed",
        "metadata": {}
      },
      {
        "path": "restructure/docs/knowledge",
        "type": "directory",
        "artifact_id": "68fc9613-2bd9-4cb4-8d01-26f63ab42a9d",
        "metadata": {}
      },
      {
        "path": "restructure/docs/knowledge/models",
        "type": "directory",
        "artifact_id": "6fb0abcc-56a8-438d-ae20-7fc91f439a00",
        "metadata": {}
      },
      {
        "path": "restructure/docs/knowledge/techs",
        "type": "directory",
        "artifact_id": "efb131e9-3f54-4008-a7c5-b3d4a90e90af",
        "metadata": {}
      },
      {
        "path": "restructure/docs/knowledge/templates",
        "type": "directory",
        "artifact_id": "62addce0-81d8-451d-8620-4b1337db595b",
        "metadata": {}
      },
      {
        "path": "restructure/docs/mamay_onboarding",
        "type": "directory",
        "artifact_id": "51e0846b-68bb-4d66-9e44-29ad6bf3f4b5",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos",
        "type": "directory",
        "artifact_id": "25ac8f18-3c85-4eda-a100-5aaea4c97d9d",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic1",
        "type": "directory",
        "artifact_id": "4401ddf1-ca59-4470-bbbd-ff0202964d4f",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic2",
        "type": "directory",
        "artifact_id": "95e8e3e1-6093-4cb8-a4fa-26e6bd70637f",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic3",
        "type": "directory",
        "artifact_id": "a30d7ab3-07e0-4eaa-b01a-b1642b9ee76d",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic4",
        "type": "directory",
        "artifact_id": "a5de5293-0502-437b-86a1-12bead5e2df9",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic5",
        "type": "directory",
        "artifact_id": "5b0c402e-1fcb-478b-a04f-18207d262779",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic6",
        "type": "directory",
        "artifact_id": "9a6a1067-8a69-4d8f-a623-ecedebbe2e78",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/epic7",
        "type": "directory",
        "artifact_id": "796437cc-4c24-48a5-a281-16c40da3a489",
        "metadata": {}
      },
      {
        "path": "restructure/docs/memos/master",
        "type": "directory",
        "artifact_id": "f5e9adae-e0c3-40b6-968c-04e265dd1fae",
        "metadata": {}
      },
      {
        "path": "restructure/docs/notes",
        "type": "directory",
        "artifact_id": "ba38da38-9972-49cc-9e73-e99713c07af3",
        "metadata": {}
      },
      {
        "path": "restructure/docs/notes/llm_analisys",
        "type": "directory",
        "artifact_id": "33f34c90-da8a-482f-a540-26c5f29c2187",
        "metadata": {}
      },
      {
        "path": "restructure/docs/orchestration",
        "type": "directory",
        "artifact_id": "9b41d4d9-b4d6-405e-8135-617fae07e043",
        "metadata": {}
      },
      {
        "path": "restructure/docs/phase_4A2_architecture",
        "type": "directory",
        "artifact_id": "9c7308e1-97fc-4fb4-a495-4f08f30dc5c5",
        "metadata": {}
      },
      {
        "path": "restructure/docs/plans",
        "type": "directory",
        "artifact_id": "fc5bc393-4d2c-4e21-a7a9-1f803f039d7a",
        "metadata": {}
      },
      {
        "path": "restructure/docs/solutions",
        "type": "directory",
        "artifact_id": "a9a9ac88-edc8-424c-a07c-45b7e84cf43d",
        "metadata": {}
      },
      {
        "path": "restructure/docs/standards",
        "type": "directory",
        "artifact_id": "ebe548be-c5a7-4a17-a4fd-b1e8c35ae603",
        "metadata": {}
      },
      {
        "path": "restructure/docs/taskrouter",
        "type": "directory",
        "artifact_id": "71e2f4dc-aae0-4769-8fef-b0907fe0f020",
        "metadata": {}
      },
      {
        "path": "restructure/docs/workflows",
        "type": "directory",
        "artifact_id": "c5366843-3fd6-4d26-b473-d35e77562881",
        "metadata": {}
      },
      {
        "path": "restructure/logs",
        "type": "directory",
        "artifact_id": "4c026cf1-b0d5-45f9-a859-e897edab21f9",
        "metadata": {}
      },
      {
        "path": "restructure/logs/cursor_agent",
        "type": "directory",
        "artifact_id": "923b40e1-0fc1-4e30-a16c-e15fef2ce227",
        "metadata": {}
      },
      {
        "path": "restructure/tests",
        "type": "directory",
        "artifact_id": "f285a806-4262-42d8-a518-2b457c145b24",
        "metadata": {}
      },
      {
        "path": "restructure/tests/.llmstruct_index",
        "type": "directory",
        "artifact_id": "753733f0-ee6a-4b00-8345-7f942769281e",
        "metadata": {}
      },
      {
        "path": "restructure/tests/.llmstruct_index/orchestration",
        "type": "directory",
        "artifact_id": "79353041-c5d7-49e1-80bc-cc4ccd42fa4c",
        "metadata": {}
      },
      {
        "path": "restructure/tests/.llmstruct_index/orchestration/core",
        "type": "directory",
        "artifact_id": "5c01ffc2-4812-430c-bdce-56cb0a64572a",
        "metadata": {}
      },
      {
        "path": "restructure/tests/.llmstruct_index/orchestration/executors",
        "type": "directory",
        "artifact_id": "61e2277b-f9f8-454c-8589-607767fee877",
        "metadata": {}
      },
      {
        "path": "restructure/tests/.llmstruct_index/orchestration/integration",
        "type": "directory",
        "artifact_id": "35180e24-d1c7-45b8-a72b-a08e1920a48f",
        "metadata": {}
      },
      {
        "path": "restructure/tests/integration",
        "type": "directory",
        "artifact_id": "165e078f-a336-4a9e-acce-d5bf4c7bdc5d",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration",
        "type": "directory",
        "artifact_id": "1c0cff95-988c-4667-a766-33e61139f9d9",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "4cf93f46-c147-4ec6-b325-0040aad5b621",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/core",
        "type": "directory",
        "artifact_id": "cc0d83d1-6cb4-4a79-b60c-fdbec73be789",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "6c9a348c-9eea-4584-b8ed-9286010d0967",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/core/test_execution_modes.py",
        "type": "file",
        "artifact_id": "295480b3-3d02-41aa-99d4-e9339439f5de",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/core/test_task_models.py",
        "type": "file",
        "artifact_id": "3d044f3d-e206-4aeb-979a-4c2b731a1dcf",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/executors",
        "type": "directory",
        "artifact_id": "0eda1f98-1bf0-4733-b57b-44a60e282f59",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "9f106943-cd86-4db0-9146-2383344fd076",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/executors/test_parallel_executor.py",
        "type": "file",
        "artifact_id": "280934c4-ab83-4287-8b4b-a6e9cf6f69a2",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/fixtures.py",
        "type": "file",
        "artifact_id": "1c0bb577-c992-4587-b08d-a1ca1d109f4b",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/integration",
        "type": "directory",
        "artifact_id": "8716b59a-3d3d-4429-95bc-253a2fe4b2b8",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/integration/__init__.py",
        "type": "file",
        "artifact_id": "72a0f1b5-db6a-4986-939a-66b78bd6a8d9",
        "metadata": {}
      },
      {
        "path": "restructure/tests/orchestration/integration/test_epic5_components.py",
        "type": "file",
        "artifact_id": "113a8acb-7e7a-4b5c-95f5-25d615477e7c",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_api.py",
        "type": "file",
        "artifact_id": "85387fac-67cc-4ea4-ba57-44b25a7a10fb",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_cli.py",
        "type": "file",
        "artifact_id": "bcc47415-5352-497c-9f7d-606bfb145175",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_ollama_function_calling.py",
        "type": "file",
        "artifact_id": "01160da5-c3bc-42d5-9dd5-c6f385988240",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "fc66bc17-5eb7-47e0-96f6-cdd89fc3de22",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_smoke.py",
        "type": "file",
        "artifact_id": "db5e1114-9c36-48dc-908f-117b3b985209",
        "metadata": {}
      },
      {
        "path": "restructure/tests/test_task_router.py",
        "type": "file",
        "artifact_id": "5a846cd0-5443-4a66-aa78-22bd7677605f",
        "metadata": {}
      },
      {
        "path": "restructure/unused",
        "type": "directory",
        "artifact_id": "ffd69110-e19d-465d-8616-04c87c477a43",
        "metadata": {}
      },
      {
        "path": "restructure/unused/.cache",
        "type": "directory",
        "artifact_id": "ad4f3454-902a-4fa5-9a8d-146e46ba0418",
        "metadata": {}
      },
      {
        "path": "restructure/unused/.cache/rag_embeddings",
        "type": "directory",
        "artifact_id": "0e32175d-9cf2-4ab9-b8d7-1213a2cab53a",
        "metadata": {}
      },
      {
        "path": "results",
        "type": "directory",
        "artifact_id": "5eb783e0-77ef-4462-b743-e407fdf619f4",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "6d5c8160-02fb-40cf-a229-67b4a31e6eec",
        "metadata": {}
      },
      {
        "path": "scripts/test_fastmcp.py",
        "type": "file",
        "artifact_id": "14a9a691-8dec-49b3-a373-9e3150fab93d",
        "metadata": {}
      },
      {
        "path": "scripts/tools",
        "type": "directory",
        "artifact_id": "d95a6697-4c92-42bb-8c45-921c2518380f",
        "metadata": {}
      },
      {
        "path": "scripts/tools/ollama_queue.py",
        "type": "file",
        "artifact_id": "5543626a-9f6f-45d3-b4f2-b0095ec481d3",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "33a1dd28-3a71-4bdc-a41e-a643584cf1cf",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index",
        "type": "directory",
        "artifact_id": "673028cc-bb70-4fc7-9f98-a9b4de6d7e6a",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie",
        "type": "directory",
        "artifact_id": "64fea0c1-e428-4dcd-823a-a68f7f8dfccc",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/api",
        "type": "directory",
        "artifact_id": "cd5452ba-adc0-4013-8011-4a724b1a6c81",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/cli",
        "type": "directory",
        "artifact_id": "f605a69f-41ec-4816-9460-37f2679cde6e",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "da97cbfd-3ea0-4af5-a374-677f3a70af8d",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/modules",
        "type": "directory",
        "artifact_id": "e506baa6-410d-4911-83f6-9fd40aa682d0",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "0cd5c7d4-681b-44c1-a736-90fb13f57e84",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "eb986f13-26fa-4c38-8e46-f565a1baa1c9",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "5c113e9d-5fb3-4d8c-bd79-a0d35cd7bef1",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "a1bb7153-1d6a-45d4-9c1f-56e69bd1909b",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "35319c08-0c9b-4b26-9f4f-ee9b012a6c29",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "ea448065-912d-41ce-8f29-f499ad349151",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/rag_context",
        "type": "directory",
        "artifact_id": "18682c58-948b-47f6-a31f-3b3e618715fc",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "d598b26f-c4fd-4670-8b79-a8729d63050c",
        "metadata": {}
      },
      {
        "path": "src/.llmstruct_index/struct_tools",
        "type": "directory",
        "artifact_id": "cedbf01b-b641-4cc6-9b8e-5bda0e5f0508",
        "metadata": {}
      },
      {
        "path": "src/llmgenie",
        "type": "directory",
        "artifact_id": "1452390d-9591-4a7c-8e2e-0cce54268ff8",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api",
        "type": "directory",
        "artifact_id": "ffcb4f64-b94f-424a-bb38-a0ac155d9464",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/__init__.py",
        "type": "file",
        "artifact_id": "24f31fe2-37b7-4b5e-92f6-badf46369e3a",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/handoff_validator.py",
        "type": "file",
        "artifact_id": "5514eede-4004-4d43-87e3-4f727f6482a9",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/main.py",
        "type": "file",
        "artifact_id": "6ebef1cf-d18d-4384-b230-7709936dee94",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/api/simple_mcp_server.py",
        "type": "file",
        "artifact_id": "031b7aad-6dc5-46f0-a7d8-32e8b44357ca",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/cli",
        "type": "directory",
        "artifact_id": "77ae552a-063d-4495-b211-c78a665b2611",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/cli.py",
        "type": "file",
        "artifact_id": "ef4e4e4b-20ff-46a5-bab6-7f32ecf6cab6",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/cli/handoff_cli.py",
        "type": "file",
        "artifact_id": "85f6afea-6ad4-43e0-922f-fa509892c320",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/llm_client.py",
        "type": "file",
        "artifact_id": "5ddf0e71-2532-4cff-9d14-fbf9eaea6949",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/mcp",
        "type": "directory",
        "artifact_id": "2b110cc4-dda8-4004-bcf4-0a07df68885c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/mcp/__init__.py",
        "type": "file",
        "artifact_id": "98d84b42-c382-4e37-8a43-655275bdc94d",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/mcp/server.py",
        "type": "file",
        "artifact_id": "0d17242b-fdba-4c54-83b5-f805a2729ef8",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/mcp/tools.py",
        "type": "file",
        "artifact_id": "d2b2ea1f-89a5-4e8f-a3a0-04098c9e237f",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules",
        "type": "directory",
        "artifact_id": "da9f87c7-7f23-4491-84ff-6ccc3698622c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli",
        "type": "directory",
        "artifact_id": "115e05a3-ee07-4a8b-b77b-1f74017bafc8",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "2b5a2859-7233-46b0-8a33-c06b26d86c45",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "a0f812e8-ef69-4ddd-9981-197589740981",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "05a6b67d-146a-4178-93c1-cbe549338ae7",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/context.py",
        "type": "file",
        "artifact_id": "186b6a9c-9a84-4b6a-80f4-a00f3058d8f7",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "e611f708-6055-454f-ad59-05356ee8da35",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "4a85d0ee-9d56-43e7-b62b-af69b297a799",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "668f9a80-e472-43ff-b569-7e5e15e4ce6c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "e9e68f16-6de7-4f58-b0a1-86735a893f68",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "ab3d45cf-df94-4c6d-bfaf-46cda1608e9c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "379a0768-f18f-4337-927b-fb561fb37107",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/query.py",
        "type": "file",
        "artifact_id": "9d19e54b-634d-4d52-b7e7-30c6ad4e652f",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/review.py",
        "type": "file",
        "artifact_id": "e82b25b1-e96c-4f9a-adc0-5e4d2d26a0e4",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "14162d2f-da34-4609-845e-e93272fcabd5",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands",
        "type": "directory",
        "artifact_id": "a48636e2-1c63-46f6-b0bd-8b79cbfda31c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "8dc72c67-d9d2-453f-809b-e39dfbf81872",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "76678ed3-aa16-4a4a-924c-840605419452",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "9e98a9ec-d82f-4c69-a7da-6792b8c552e3",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/modules/commands/services.py",
        "type": "file",
        "artifact_id": "d87f6f3b-cde3-49d6-a458-c6f7541c495a",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration",
        "type": "directory",
        "artifact_id": "16657ba5-0109-441a-a3bd-4b0d235143fe",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "44646959-3dce-4dc8-a5c5-b386f0d3b739",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/agent_orchestrator.py",
        "type": "file",
        "artifact_id": "c75d8e2e-0b87-42dc-b91f-674d084b4436",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/core",
        "type": "directory",
        "artifact_id": "381ec3b7-e9d4-4ef6-8211-4e3f1cb3727f",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "17021f61-8f08-4ed1-87ba-75d2c55f14cc",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/core/coordination_types.py",
        "type": "file",
        "artifact_id": "80597e10-4ae8-484c-a846-fdcc4daa9e2c",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/core/execution_modes.py",
        "type": "file",
        "artifact_id": "9e687332-ca61-4a32-9750-f92bbe10d819",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/core/task_models.py",
        "type": "file",
        "artifact_id": "f58d9a46-c07b-4939-bb75-2d3755effef1",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/executors",
        "type": "directory",
        "artifact_id": "00356e97-f5cc-4bd6-a72e-005832bbff76",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "8e3f1bf6-6bd9-4006-83e1-d66761778aec",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/executors/collaborative_executor.py",
        "type": "file",
        "artifact_id": "7376c96b-5ec9-4f43-b932-deab5273fc60",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/executors/parallel_executor.py",
        "type": "file",
        "artifact_id": "8e48efa5-ea72-4e85-9723-081701d7fe74",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/executors/sequential_executor.py",
        "type": "file",
        "artifact_id": "ac575114-808a-46bb-8fbd-3074300654b3",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/orchestration/orchestrator.py",
        "type": "file",
        "artifact_id": "9ad6f254-702e-495f-96bd-ff610f082b8f",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router",
        "type": "directory",
        "artifact_id": "01525222-9d37-4676-acf5-2a1be4110d49",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router/__init__.py",
        "type": "file",
        "artifact_id": "e09f0bd5-87d1-45c6-a97c-ec0cc5be1031",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router/model_router.py",
        "type": "file",
        "artifact_id": "cd12e7a1-9e7e-42d2-b7db-e02b6de03266",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router/quality_intelligence.py",
        "type": "file",
        "artifact_id": "d60b3b30-024b-4afd-ae81-2dd8b11b2d7d",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router/quality_validator.py",
        "type": "file",
        "artifact_id": "b0587a24-b422-43f5-93ce-a95f6ead07c7",
        "metadata": {}
      },
      {
        "path": "src/llmgenie/task_router/task_classifier.py",
        "type": "file",
        "artifact_id": "613af406-20ca-40a3-8143-15d4a92d4990",
        "metadata": {}
      },
      {
        "path": "src/rag_context",
        "type": "directory",
        "artifact_id": "394bfc30-0006-4804-b0b0-fa4252e47859",
        "metadata": {}
      },
      {
        "path": "src/rag_context/__init__.py",
        "type": "file",
        "artifact_id": "ae53c5a8-93dd-405e-99fa-5ef37bec2382",
        "metadata": {}
      },
      {
        "path": "src/rag_context/active_knowledge_integration.py",
        "type": "file",
        "artifact_id": "35881aad-f0a2-4c51-b0fd-ab99727425d1",
        "metadata": {}
      },
      {
        "path": "src/rag_context/cli_interface.py",
        "type": "file",
        "artifact_id": "4cd05f32-5fdb-4ea5-9fe0-89caa9eeda80",
        "metadata": {}
      },
      {
        "path": "src/rag_context/code_discovery.py",
        "type": "file",
        "artifact_id": "fad2bb5c-907c-4891-bdd8-d489f38bcc71",
        "metadata": {}
      },
      {
        "path": "src/rag_context/config.py",
        "type": "file",
        "artifact_id": "6f017f15-ff3b-479d-b0d7-c4c7e3188bd9",
        "metadata": {}
      },
      {
        "path": "src/rag_context/cursor_intelligence.py",
        "type": "file",
        "artifact_id": "c5917b98-f49d-4ad9-bd7d-b93bfc495a1b",
        "metadata": {}
      },
      {
        "path": "src/rag_context/data",
        "type": "directory",
        "artifact_id": "52c8612c-e8df-4347-9f22-8a78480098e6",
        "metadata": {}
      },
      {
        "path": "src/rag_context/data/analytics",
        "type": "directory",
        "artifact_id": "825ffd91-48c3-4099-b5db-160e84cd2b7e",
        "metadata": {}
      },
      {
        "path": "src/rag_context/embedder.py",
        "type": "file",
        "artifact_id": "88eb1a0f-9318-4b21-8323-80b13adaf20e",
        "metadata": {}
      },
      {
        "path": "src/rag_context/enhanced_logging_intelligence.py",
        "type": "file",
        "artifact_id": "d4952402-24d1-4733-b9bd-41a7b9868ace",
        "metadata": {}
      },
      {
        "path": "src/rag_context/enhancer.py",
        "type": "file",
        "artifact_id": "36dd9e0d-4eef-41e9-b51c-cd14387331b8",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces",
        "type": "directory",
        "artifact_id": "3b16a43f-1562-4b7f-984a-372fb579227d",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/__init__.py",
        "type": "file",
        "artifact_id": "18b5a1ce-db68-4d0c-9d1e-e668662e2dbc",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/auto_logger.py",
        "type": "file",
        "artifact_id": "d4f62f60-aa8e-4434-a936-bfadb9b8cad8",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/cli_tool.py",
        "type": "file",
        "artifact_id": "6b7f6a88-f825-45cc-af77-1961ae7c982d",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/http_api.py",
        "type": "file",
        "artifact_id": "61e02d6d-77b2-48e2-974f-f7714cd0261b",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/mcp_server.py",
        "type": "file",
        "artifact_id": "429907d0-f81e-4ea2-b1d1-18432a322281",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "33bdcd34-1052-4068-b2e7-af45a9f81846",
        "metadata": {}
      },
      {
        "path": "src/rag_context/interfaces/websocket_server.py",
        "type": "file",
        "artifact_id": "cc2c0320-ec53-4f2d-88b0-da7db7753475",
        "metadata": {}
      },
      {
        "path": "src/rag_context/knowledge_extractor.py",
        "type": "file",
        "artifact_id": "ad522206-cce2-44a6-953e-6c5dc0fa9d02",
        "metadata": {}
      },
      {
        "path": "src/rag_context/loader.py",
        "type": "file",
        "artifact_id": "ab19ef1a-802d-4af0-93ec-1364f540aac1",
        "metadata": {}
      },
      {
        "path": "src/rag_context/retriever.py",
        "type": "file",
        "artifact_id": "f87d7173-aa35-4ed7-85c4-a521fc7ab0eb",
        "metadata": {}
      },
      {
        "path": "src/rag_context/session_context_manager.py",
        "type": "file",
        "artifact_id": "34769b77-b680-4e8a-b99f-61486708340a",
        "metadata": {}
      },
      {
        "path": "src/struct_tools",
        "type": "directory",
        "artifact_id": "91c35c6d-2829-4c02-ab71-842b24f992ff",
        "metadata": {}
      },
      {
        "path": "src/struct_tools/__init__.py",
        "type": "file",
        "artifact_id": "e7ec7e64-e7ea-41fd-b005-ec0e029ca687",
        "metadata": {}
      },
      {
        "path": "src/struct_tools/cli_interface.py",
        "type": "file",
        "artifact_id": "ef540153-e02b-40d1-a5a7-fcda9f450752",
        "metadata": {}
      },
      {
        "path": "src/struct_tools/mcp_interface.py",
        "type": "file",
        "artifact_id": "a128edcc-43ca-4866-8e37-54b6daff998e",
        "metadata": {}
      },
      {
        "path": "src/struct_tools/structure_analyzer.py",
        "type": "file",
        "artifact_id": "00a49b48-83be-4235-b80b-bc691f4f6301",
        "metadata": {}
      },
      {
        "path": "test_handoff_validation.py",
        "type": "file",
        "artifact_id": "e0d508dd-19a4-429d-aff4-75fa2dfd1643",
        "metadata": {}
      },
      {
        "path": "test_mcp_tools.py",
        "type": "file",
        "artifact_id": "75c93f58-642e-4a80-b451-c5714d57c131",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "c7bf2e7c-9cb6-49b6-831a-7df8c940f62f",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index",
        "type": "directory",
        "artifact_id": "1d043a80-9b74-4e2d-a3e8-2e614fb1b293",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration",
        "type": "directory",
        "artifact_id": "74f31aca-6e20-490b-a2ee-695dbba82d66",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/core",
        "type": "directory",
        "artifact_id": "b7519f47-4394-4608-a5fc-5adfc04007c2",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/executors",
        "type": "directory",
        "artifact_id": "28e825a6-7125-4cd7-9d9c-834717486016",
        "metadata": {}
      },
      {
        "path": "tests/.llmstruct_index/orchestration/integration",
        "type": "directory",
        "artifact_id": "acc11070-84f7-4385-8dc7-14bb8fbe8e5d",
        "metadata": {}
      },
      {
        "path": "tests/integration",
        "type": "directory",
        "artifact_id": "9d9d2aed-a57f-46d4-ab00-bb17bc2fc5fc",
        "metadata": {}
      },
      {
        "path": "tests/orchestration",
        "type": "directory",
        "artifact_id": "d56e9527-f361-490c-95ec-7a8cca9bb1a4",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/__init__.py",
        "type": "file",
        "artifact_id": "014d9d98-a06e-40c9-a04d-8ec4dbc14b28",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core",
        "type": "directory",
        "artifact_id": "c206afbc-3f03-4df5-a85f-f8bf652845de",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/__init__.py",
        "type": "file",
        "artifact_id": "892f14c0-35f4-4d6f-b444-9169ceab53fd",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/test_execution_modes.py",
        "type": "file",
        "artifact_id": "e945df16-0670-4398-a887-b26658314c03",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/core/test_task_models.py",
        "type": "file",
        "artifact_id": "59225a4d-9c40-4279-a3d1-f1306c6ceb3c",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors",
        "type": "directory",
        "artifact_id": "f87f3e71-e9b9-46fe-abcd-0e7219ad300f",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors/__init__.py",
        "type": "file",
        "artifact_id": "a0182da9-9ef4-4bd1-8c62-c677a70e44bf",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/executors/test_parallel_executor.py",
        "type": "file",
        "artifact_id": "eef1927d-0e60-4fb5-8439-8a09827f2e90",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/fixtures.py",
        "type": "file",
        "artifact_id": "c23fcee9-f006-4086-8ea2-9c69946cefc3",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration",
        "type": "directory",
        "artifact_id": "d980257d-331f-4b3b-bd66-33623cac597f",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration/__init__.py",
        "type": "file",
        "artifact_id": "e53c0cd7-5e9c-45a8-a617-3332a7cb188c",
        "metadata": {}
      },
      {
        "path": "tests/orchestration/integration/test_epic5_components.py",
        "type": "file",
        "artifact_id": "6387fcba-95e4-4376-80b3-3f8e606b9f58",
        "metadata": {}
      },
      {
        "path": "tests/test_api.py",
        "type": "file",
        "artifact_id": "07bf89c4-a6f1-4944-b14b-3cffa3092283",
        "metadata": {}
      },
      {
        "path": "tests/test_cli.py",
        "type": "file",
        "artifact_id": "652f1199-6fea-4b30-b44d-737cf403df65",
        "metadata": {}
      },
      {
        "path": "tests/test_ollama_function_calling.py",
        "type": "file",
        "artifact_id": "b0a7f8de-1292-4bb9-a128-63b9ea112ec9",
        "metadata": {}
      },
      {
        "path": "tests/test_self_refine_pipeline.py",
        "type": "file",
        "artifact_id": "bb4f0d8f-c98b-4bae-a4c7-806114285d17",
        "metadata": {}
      },
      {
        "path": "tests/test_smoke.py",
        "type": "file",
        "artifact_id": "ca31113c-f3d9-46ff-afc8-3508d2e7dfad",
        "metadata": {}
      },
      {
        "path": "tests/test_task_router.py",
        "type": "file",
        "artifact_id": "88cb3c92-199b-4e77-8510-ebf9874b01f5",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "88953fe1-738b-4c0a-8f28-00456c10a3c1",
        "metadata": {}
      },
      {
        "path": "tools",
        "type": "directory",
        "artifact_id": "f79fb620-9d38-4012-ace9-95c18ce0b995",
        "metadata": {}
      },
      {
        "path": "tools/atomic_rules_linter.py",
        "type": "file",
        "artifact_id": "df5ca720-1031-4cab-8355-bd0e7c2da665",
        "metadata": {}
      },
      {
        "path": "venvapt",
        "type": "directory",
        "artifact_id": "e2940a40-9fcf-467c-be40-e66c99d04b30",
        "metadata": {}
      },
      {
        "path": "venvapt/bin",
        "type": "directory",
        "artifact_id": "ef62b79d-283f-406b-af82-8166529cb8ee",
        "metadata": {}
      },
      {
        "path": "venvapt/include",
        "type": "directory",
        "artifact_id": "bce42952-ba4f-48f1-bf7b-21e72a4e7240",
        "metadata": {}
      },
      {
        "path": "venvapt/include/python3.12",
        "type": "directory",
        "artifact_id": "44decd53-f093-4d9b-89e1-ace562c9ec74",
        "metadata": {}
      },
      {
        "path": "venvapt/lib",
        "type": "directory",
        "artifact_id": "ab16f5ef-af65-459a-b175-7a1c4326cb3c",
        "metadata": {}
      },
      {
        "path": "venvapt/lib/python3.12",
        "type": "directory",
        "artifact_id": "505f77d0-5c40-4d34-8169-ad496ab33b97",
        "metadata": {}
      },
      {
        "path": "venvapt/lib/python3.12/site-packages",
        "type": "directory",
        "artifact_id": "56127a17-4340-44fb-8d72-f9bbaafad51c",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_mcp_tools",
      "path": "test_mcp_tools.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 MCP \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
      "artifact_id": "905acdb2-fdac-4195-ad7a-3ac9c4cd2816"
    },
    {
      "module_id": "test_handoff_validation",
      "path": "test_handoff_validation.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "84a89d63-8682-491c-9c01-dd1110a41780"
    },
    {
      "module_id": "demos.self_refine_pipeline_demo",
      "path": "demos/self_refine_pipeline_demo.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b Self-Refine Pipeline",
      "artifact_id": "4a3abe00-6a6e-495b-bd41-251fd875816e"
    },
    {
      "module_id": "demos.self_refine_cli_demo",
      "path": "demos/self_refine_cli_demo.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "CLI Demonstration for Self-Refine Pipeline",
      "artifact_id": "73760a48-9dc6-4769-8255-9d9a3a483a4b"
    },
    {
      "module_id": "scripts.test_fastmcp",
      "path": "scripts/test_fastmcp.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "FastMCP Server Test Script",
      "artifact_id": "413caa01-8e8e-40e6-91e1-38c56e6d32ce"
    },
    {
      "module_id": "tests.test_task_router",
      "path": "tests/test_task_router.py",
      "category": "test",
      "functions": 35,
      "classes": 5,
      "summary": "Comprehensive tests for Epic 5 TaskRouter implementation",
      "artifact_id": "9a075c04-8b51-42d5-a073-bfd7bd2410f8"
    },
    {
      "module_id": "tests.test_ollama_function_calling",
      "path": "tests/test_ollama_function_calling.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "Test script for Ollama function calling capability",
      "artifact_id": "8a45ed85-6cac-4579-8512-5e1669047014"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "Tests for llmgenie FastAPI application",
      "artifact_id": "93268be8-edf2-4d45-9a11-725861bd5e70"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Tests for llmgenie CLI module",
      "artifact_id": "102c157f-16d2-457f-9c2c-ae9368f5818a"
    },
    {
      "module_id": "tests.test_self_refine_pipeline",
      "path": "tests/test_self_refine_pipeline.py",
      "category": "test",
      "functions": 20,
      "classes": 3,
      "summary": "Tests for Self-Refine Pipeline System",
      "artifact_id": "549a8b44-bd2e-4284-84e9-fdebd7ffadcd"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "03cd62c7-3e1a-44fa-928d-1537b8d6a774"
    },
    {
      "module_id": "tools.atomic_rules_linter",
      "path": "tools/atomic_rules_linter.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e11249ac-269a-42ab-9506-8f5cfd917c6e"
    },
    {
      "module_id": "scripts.tools.ollama_queue",
      "path": "scripts/tools/ollama_queue.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4654f97c-0f9c-48fc-9ed4-a0030260ab7b"
    },
    {
      "module_id": "data.audit.audit_2025-06-12.workfiles.gen_project_structure_img",
      "path": "data/audit/audit_2025-06-12/workfiles/gen_project_structure_img.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a2d25d11-1952-4af7-8f97-7b6603fa28ca"
    },
    {
      "module_id": "data.audit.audit_2025-06-12.workfiles.gen_audit_structure_img",
      "path": "data/audit/audit_2025-06-12/workfiles/gen_audit_structure_img.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3b95286d-1116-472f-b062-fea99ae44024"
    },
    {
      "module_id": "src.struct_tools.structure_analyzer",
      "path": "src/struct_tools/structure_analyzer.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json",
      "artifact_id": "82c434d7-72ff-4650-a1ed-5ed8eeb736f5"
    },
    {
      "module_id": "src.struct_tools.mcp_interface",
      "path": "src/struct_tools/mcp_interface.py",
      "category": "core",
      "functions": 16,
      "classes": 6,
      "summary": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "79ac4412-9e44-4a70-8661-090dbe3bc160"
    },
    {
      "module_id": "src.struct_tools.__init__",
      "path": "src/struct_tools/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "2d04eff3-2d43-4f80-b36c-15e470c7e323"
    },
    {
      "module_id": "src.struct_tools.cli_interface",
      "path": "src/struct_tools/cli_interface.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "33eb4f69-a988-469b-b978-3a13932dcd01"
    },
    {
      "module_id": "src.rag_context.active_knowledge_integration",
      "path": "src/rag_context/active_knowledge_integration.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation",
      "artifact_id": "e4256d03-62ef-4c23-9c31-4f319fb2f434"
    },
    {
      "module_id": "src.rag_context.cursor_intelligence",
      "path": "src/rag_context/cursor_intelligence.py",
      "category": "core",
      "functions": 15,
      "classes": 4,
      "summary": "Cursor Intelligence System for Workflow Enhancement",
      "artifact_id": "80bced99-8f3f-4431-a607-cab33b13f3a0"
    },
    {
      "module_id": "src.rag_context.knowledge_extractor",
      "path": "src/rag_context/knowledge_extractor.py",
      "category": "core",
      "functions": 8,
      "classes": 3,
      "summary": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation",
      "artifact_id": "cbf3223b-8483-46cb-a2e8-73968bb8ab2c"
    },
    {
      "module_id": "src.rag_context.code_discovery",
      "path": "src/rag_context/code_discovery.py",
      "category": "core",
      "functions": 10,
      "classes": 2,
      "summary": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation",
      "artifact_id": "572d6e6d-16f4-4547-8a28-d3fd59490dfe"
    },
    {
      "module_id": "src.rag_context.embedder",
      "path": "src/rag_context/embedder.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "artifact_id": "1875da44-9dae-4985-9099-38f1c789f5bc"
    },
    {
      "module_id": "src.rag_context.enhanced_logging_intelligence",
      "path": "src/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "functions": 3,
      "classes": 2,
      "summary": "",
      "artifact_id": "ca6f8348-d548-4946-80db-4adb2a77b76a"
    },
    {
      "module_id": "src.rag_context.enhancer",
      "path": "src/rag_context/enhancer.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "40e40f53-b54b-4527-93f3-83ef4e70916d"
    },
    {
      "module_id": "src.rag_context.loader",
      "path": "src/rag_context/loader.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "7c05e440-1c15-4ec8-931e-7ed3e10369f9"
    },
    {
      "module_id": "src.rag_context.__init__",
      "path": "src/rag_context/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Enhancement System",
      "artifact_id": "6113742a-756c-4282-908f-04d5d7338b58"
    },
    {
      "module_id": "src.rag_context.config",
      "path": "src/rag_context/config.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "bd2f6250-e588-4228-89fe-0ae70cc5caa7"
    },
    {
      "module_id": "src.rag_context.session_context_manager",
      "path": "src/rag_context/session_context_manager.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Session Context Manager - Phase 4A.2.3 Safe Implementation",
      "artifact_id": "ce06367f-aacf-40d2-b4b4-941b8d3a420a"
    },
    {
      "module_id": "src.rag_context.retriever",
      "path": "src/rag_context/retriever.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "artifact_id": "1a5ee3e8-4994-4358-a5d5-f78f041233b2"
    },
    {
      "module_id": "src.rag_context.cli_interface",
      "path": "src/rag_context/cli_interface.py",
      "category": "core",
      "functions": 9,
      "classes": 0,
      "summary": "Enhanced CLI Interface for RAG Context Management",
      "artifact_id": "2a0efbc0-f697-4ee6-910c-6681f0a59795"
    },
    {
      "module_id": "src.llmgenie.llm_client",
      "path": "src/llmgenie/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "2773fd43-b3bf-4b3e-bbca-9b3e462ed0c2"
    },
    {
      "module_id": "src.llmgenie.cli",
      "path": "src/llmgenie/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "b717cfc6-e2f5-47ed-97f7-95ed33cbf7aa"
    },
    {
      "module_id": "src.rag_context.interfaces.self_refine_pipeline",
      "path": "src/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "functions": 12,
      "classes": 3,
      "summary": "Self-Refine Pipeline with MCP Tools Integration",
      "artifact_id": "0f377ef8-5bea-4114-9b4b-4aee5c02fd2a"
    },
    {
      "module_id": "src.rag_context.interfaces.websocket_server",
      "path": "src/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "artifact_id": "d190c1e8-2905-436d-bd3e-3b3d77486f17"
    },
    {
      "module_id": "src.rag_context.interfaces.http_api",
      "path": "src/rag_context/interfaces/http_api.py",
      "category": "core",
      "functions": 15,
      "classes": 6,
      "summary": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "artifact_id": "19031c8c-56f9-4dff-972d-d372d77071fd"
    },
    {
      "module_id": "src.rag_context.interfaces.mcp_server",
      "path": "src/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop",
      "artifact_id": "0a8f55ce-9a13-45a9-831e-d88037050400"
    },
    {
      "module_id": "src.rag_context.interfaces.__init__",
      "path": "src/rag_context/interfaces/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
      "artifact_id": "71f1c0d4-5316-4cf9-bb70-4e61d3bb7111"
    },
    {
      "module_id": "src.rag_context.interfaces.cli_tool",
      "path": "src/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "artifact_id": "564eeb18-15ce-4041-aa8f-b70b5e28851e"
    },
    {
      "module_id": "src.rag_context.interfaces.auto_logger",
      "path": "src/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "Auto Logger for MCP Server Integration",
      "artifact_id": "6a7de670-50ea-4b6e-b126-1b8670df76ae"
    },
    {
      "module_id": "src.llmgenie.mcp.tools",
      "path": "src/llmgenie/mcp/tools.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "MCP Tools Implementation",
      "artifact_id": "7509b963-2d0a-41c0-8a59-0f936b9bf2fa"
    },
    {
      "module_id": "src.llmgenie.mcp.server",
      "path": "src/llmgenie/mcp/server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "efa5fadb-e439-43b2-8867-30d71e2542c5"
    },
    {
      "module_id": "src.llmgenie.mcp.__init__",
      "path": "src/llmgenie/mcp/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "67dec7ec-36e0-45f5-8eb9-fe4f400bb357"
    },
    {
      "module_id": "src.llmgenie.api.simple_mcp_server",
      "path": "src/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Simple MCP Server for llmgenie",
      "artifact_id": "26cf6bfe-43ec-42b8-9d3a-f9a1db2c95ad"
    },
    {
      "module_id": "src.llmgenie.api.handoff_validator",
      "path": "src/llmgenie/api/handoff_validator.py",
      "category": "core",
      "functions": 9,
      "classes": 6,
      "summary": "Handoff validation module for llmgenie",
      "artifact_id": "6fb9fd6b-c4f5-415d-ad37-56095cc329ae"
    },
    {
      "module_id": "src.llmgenie.api.__init__",
      "path": "src/llmgenie/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "llmgenie API module",
      "artifact_id": "39e56187-194c-4b4a-a11d-d100993eaa55"
    },
    {
      "module_id": "src.llmgenie.api.main",
      "path": "src/llmgenie/api/main.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "FastAPI main application for llmgenie",
      "artifact_id": "10b025fa-1de4-4f9a-bdaa-bcdbfcebe6d2"
    },
    {
      "module_id": "src.llmgenie.orchestration.__init__",
      "path": "src/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Multi-Agent Orchestration Package",
      "artifact_id": "7101c09c-9e94-49a9-9e54-aa98084e1a56"
    },
    {
      "module_id": "src.llmgenie.orchestration.orchestrator",
      "path": "src/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Multi-Agent Orchestrator",
      "artifact_id": "21aefcdc-7979-4557-96ce-9574663eb375"
    },
    {
      "module_id": "src.llmgenie.orchestration.agent_orchestrator",
      "path": "src/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "functions": 14,
      "classes": 5,
      "summary": "Agent Orchestrator for Multi-Agent Task Coordination",
      "artifact_id": "d04d4496-520a-4975-ab1f-c5ee0f4df463"
    },
    {
      "module_id": "src.llmgenie.cli.handoff_cli",
      "path": "src/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "functions": 5,
      "classes": 0,
      "summary": "CLI tool for handoff validation",
      "artifact_id": "48df1a2b-259a-4754-aa98-35f56be37988"
    },
    {
      "module_id": "src.llmgenie.task_router.quality_intelligence",
      "path": "src/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "functions": 9,
      "classes": 4,
      "summary": "Quality Intelligence System for Smart LLM Routing",
      "artifact_id": "c8c7366e-ef59-4dca-9f48-efa7835fdc45"
    },
    {
      "module_id": "src.llmgenie.task_router.task_classifier",
      "path": "src/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "Task Classification Engine for Smart LLM Routing",
      "artifact_id": "1ccd834f-eccb-4544-b3fe-322f64e4623f"
    },
    {
      "module_id": "src.llmgenie.task_router.model_router",
      "path": "src/llmgenie/task_router/model_router.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Model Router for Smart LLM Selection",
      "artifact_id": "90e08b26-a139-4297-aa11-27f26d3ffd73"
    },
    {
      "module_id": "src.llmgenie.task_router.__init__",
      "path": "src/llmgenie/task_router/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Task Router Module for LLMGenie",
      "artifact_id": "39916b15-0155-457a-be66-92d3bb50f9b9"
    },
    {
      "module_id": "src.llmgenie.task_router.quality_validator",
      "path": "src/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Quality Validator for LLM Output Assessment",
      "artifact_id": "2aea726e-9f72-40d9-95c3-8920a19d5e8b"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.execution_modes",
      "path": "src/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Execution modes for multi-agent orchestration",
      "artifact_id": "d2c08011-8666-45d3-8d62-e977b1208715"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.__init__",
      "path": "src/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Core types and models for Agent Orchestration",
      "artifact_id": "3313ac3d-194d-436b-a5bd-5abd4c230c56"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.coordination_types",
      "path": "src/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Agent coordination types for orchestration",
      "artifact_id": "58edd5a2-1a47-429d-9bd1-416021a0e03a"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.task_models",
      "path": "src/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Task data models for orchestration",
      "artifact_id": "1e575320-1beb-4e65-bf8e-31e19a3b54d3"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.collaborative_executor",
      "path": "src/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Collaborative execution strategy",
      "artifact_id": "ae6fc9c4-2703-44a8-ad28-b244b3b40af3"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.parallel_executor",
      "path": "src/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "Parallel execution strategy",
      "artifact_id": "5adef7ef-cb43-41bb-afdd-b541e14541f5"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.sequential_executor",
      "path": "src/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Sequential execution strategy",
      "artifact_id": "1b52a2e8-0699-458a-bf70-fdd111c4f959"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.__init__",
      "path": "src/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Execution strategies for multi-agent orchestration",
      "artifact_id": "933bccaa-58f7-441d-81e9-6aa4bd09c031"
    },
    {
      "module_id": "src.llmgenie.modules.commands.metrics",
      "path": "src/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "c730cc6a-73a7-44c6-9b8d-a90b93566318"
    },
    {
      "module_id": "src.llmgenie.modules.commands.services",
      "path": "src/llmgenie/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "c9cf556d-75a0-41bc-aa59-e215370b8136"
    },
    {
      "module_id": "src.llmgenie.modules.commands.__init__",
      "path": "src/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "53a28321-faaa-4b1b-91de-64aab90f8814"
    },
    {
      "module_id": "src.llmgenie.modules.commands.queue",
      "path": "src/llmgenie/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "6fa9ead7-7055-4afe-8871-8f86227e71f2"
    },
    {
      "module_id": "src.llmgenie.modules.cli.audit",
      "path": "src/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "50f6b34d-ba2a-4562-84e2-993e5912ffd2"
    },
    {
      "module_id": "src.llmgenie.modules.cli.utils",
      "path": "src/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "17faeb3b-be82-4c83-8e84-42ba081513e7"
    },
    {
      "module_id": "src.llmgenie.modules.cli.dogfood",
      "path": "src/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "acbe9668-336b-4520-850e-c4733cd31339"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers_legacy",
      "path": "src/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "16900bed-4cc4-4a41-829b-63eb0f9d5825"
    },
    {
      "module_id": "src.llmgenie.modules.cli.analyze_duplicates",
      "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5bf211c-1fae-4d33-aa96-e2d61a8c77dd"
    },
    {
      "module_id": "src.llmgenie.modules.cli.__init__",
      "path": "src/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8ea517e3-7ebc-4e47-8d80-0934d72b73d4"
    },
    {
      "module_id": "src.llmgenie.modules.cli.review",
      "path": "src/llmgenie/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "57af5e0f-683b-4c69-9784-8fdb92a62514"
    },
    {
      "module_id": "src.llmgenie.modules.cli.context",
      "path": "src/llmgenie/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c72a1af-a6a9-4017-bbd7-d6b9839ebf62"
    },
    {
      "module_id": "src.llmgenie.modules.cli.query",
      "path": "src/llmgenie/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "86f3f384-68e1-4953-8031-9963dd4705dd"
    },
    {
      "module_id": "src.llmgenie.modules.cli.copilot",
      "path": "src/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "bbe6330b-6cf4-4d57-8626-12bcecc81e3b"
    },
    {
      "module_id": "src.llmgenie.modules.cli.parse",
      "path": "src/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2f163434-d9d6-45c5-8579-ba5a493b76c4"
    },
    {
      "module_id": "src.llmgenie.modules.cli.epic",
      "path": "src/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4a4c957f-d1a3-4dcb-9260-35e3cd0f41fa"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers",
      "path": "src/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "aa727337-cad1-430b-b413-9763945f038c"
    },
    {
      "module_id": "tests.orchestration.__init__",
      "path": "tests/orchestration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Modular tests for Multi-Agent Orchestration",
      "artifact_id": "67bf79d9-fc71-4f2e-9d13-ec1bb7fc3356"
    },
    {
      "module_id": "tests.orchestration.fixtures",
      "path": "tests/orchestration/fixtures.py",
      "category": "test",
      "functions": 4,
      "classes": 1,
      "summary": "Shared test fixtures for orchestration testing",
      "artifact_id": "2dff30a6-c7d8-4267-9605-8d74315253b3"
    },
    {
      "module_id": "tests.orchestration.integration.__init__",
      "path": "tests/orchestration/integration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Integration tests",
      "artifact_id": "90dfd76d-a8c0-453d-8344-c5a17baa31ba"
    },
    {
      "module_id": "tests.orchestration.integration.test_epic5_components",
      "path": "tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "functions": 5,
      "classes": 1,
      "summary": "Test integration with Epic 5 components",
      "artifact_id": "0452ccea-0afa-4ecd-8664-3991c7e5df8b"
    },
    {
      "module_id": "tests.orchestration.core.test_task_models",
      "path": "tests/orchestration/core/test_task_models.py",
      "category": "test",
      "functions": 8,
      "classes": 2,
      "summary": "Test OrchestrationTask and OrchestrationResult models",
      "artifact_id": "420e4209-f13e-46bf-b501-c85cca54400b"
    },
    {
      "module_id": "tests.orchestration.core.__init__",
      "path": "tests/orchestration/core/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Core orchestration component tests",
      "artifact_id": "91f13d72-6d0b-4993-82ee-19d6ddb93c22"
    },
    {
      "module_id": "tests.orchestration.core.test_execution_modes",
      "path": "tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "functions": 7,
      "classes": 1,
      "summary": "Test ExecutionMode enum and smart suggestions",
      "artifact_id": "db8bd2f3-b9eb-4a74-ac38-c36d01f57046"
    },
    {
      "module_id": "tests.orchestration.executors.test_parallel_executor",
      "path": "tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "functions": 6,
      "classes": 1,
      "summary": "Test ParallelExecutor implementation",
      "artifact_id": "f5d96d3b-daef-4f39-81c2-9a7dec00924e"
    },
    {
      "module_id": "tests.orchestration.executors.__init__",
      "path": "tests/orchestration/executors/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Executor strategy tests",
      "artifact_id": "7f27e094-bb73-4cd6-8bcb-8cd0e32f233a"
    },
    {
      "module_id": "restructure.tests.test_task_router",
      "path": "restructure/tests/test_task_router.py",
      "category": "test",
      "functions": 35,
      "classes": 5,
      "summary": "Comprehensive tests for Epic 5 TaskRouter implementation",
      "artifact_id": "b0e3ab0a-6644-4258-8af3-dffb646aec5e"
    },
    {
      "module_id": "restructure.tests.test_ollama_function_calling",
      "path": "restructure/tests/test_ollama_function_calling.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "Test script for Ollama function calling capability",
      "artifact_id": "0aa6b182-ed2e-4c66-9441-77b06447b88a"
    },
    {
      "module_id": "restructure.tests.test_api",
      "path": "restructure/tests/test_api.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "Tests for llmgenie FastAPI application",
      "artifact_id": "11570fb9-70b9-4011-9bb7-4954aa0db330"
    },
    {
      "module_id": "restructure.tests.test_cli",
      "path": "restructure/tests/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Tests for llmgenie CLI module",
      "artifact_id": "5190cd58-b0fa-4ed0-9b13-ee5637b65a90"
    },
    {
      "module_id": "restructure.tests.test_self_refine_pipeline",
      "path": "restructure/tests/test_self_refine_pipeline.py",
      "category": "test",
      "functions": 20,
      "classes": 3,
      "summary": "Tests for Self-Refine Pipeline System",
      "artifact_id": "83be64fe-5ee4-4d08-9f8e-5f69d6864ca0"
    },
    {
      "module_id": "restructure.tests.test_smoke",
      "path": "restructure/tests/test_smoke.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3492f65b-c75e-4c36-81a4-c5dce5c8fdbe"
    },
    {
      "module_id": "restructure.core.struct_tools.structure_analyzer",
      "path": "restructure/core/struct_tools/structure_analyzer.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json",
      "artifact_id": "dfdc5d4b-ffc1-4d22-bb2d-7cc3f761a5fb"
    },
    {
      "module_id": "restructure.core.struct_tools.mcp_interface",
      "path": "restructure/core/struct_tools/mcp_interface.py",
      "category": "core",
      "functions": 16,
      "classes": 6,
      "summary": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "c4a4c0a0-df2b-452a-a10c-0780c5e6956c"
    },
    {
      "module_id": "restructure.core.struct_tools.__init__",
      "path": "restructure/core/struct_tools/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "6c4fbe45-86c7-49e9-aaad-9731a51628d4"
    },
    {
      "module_id": "restructure.core.struct_tools.cli_interface",
      "path": "restructure/core/struct_tools/cli_interface.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "a07d9e52-89c2-40a5-a15b-8f2bfdf45946"
    },
    {
      "module_id": "restructure.core.rag_context.active_knowledge_integration",
      "path": "restructure/core/rag_context/active_knowledge_integration.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation",
      "artifact_id": "e8f69cf1-247b-4ad2-a12d-7c6267fccb86"
    },
    {
      "module_id": "restructure.core.rag_context.cursor_intelligence",
      "path": "restructure/core/rag_context/cursor_intelligence.py",
      "category": "core",
      "functions": 15,
      "classes": 4,
      "summary": "Cursor Intelligence System for Workflow Enhancement",
      "artifact_id": "a992eeaf-3449-4d25-9396-09f85c5ba50a"
    },
    {
      "module_id": "restructure.core.rag_context.knowledge_extractor",
      "path": "restructure/core/rag_context/knowledge_extractor.py",
      "category": "core",
      "functions": 8,
      "classes": 3,
      "summary": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation",
      "artifact_id": "258cdfc1-efaa-493a-9223-ef79fc4cc3b0"
    },
    {
      "module_id": "restructure.core.rag_context.code_discovery",
      "path": "restructure/core/rag_context/code_discovery.py",
      "category": "core",
      "functions": 10,
      "classes": 2,
      "summary": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation",
      "artifact_id": "ff2a56a7-e258-450a-9cac-4bbcc29a853e"
    },
    {
      "module_id": "restructure.core.rag_context.embedder",
      "path": "restructure/core/rag_context/embedder.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "artifact_id": "868b6372-8b34-45eb-81b2-29165cc79d30"
    },
    {
      "module_id": "restructure.core.rag_context.enhanced_logging_intelligence",
      "path": "restructure/core/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "functions": 3,
      "classes": 2,
      "summary": "",
      "artifact_id": "0815d501-74dd-4b75-aed2-5d10e6b774cc"
    },
    {
      "module_id": "restructure.core.rag_context.enhancer",
      "path": "restructure/core/rag_context/enhancer.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "fb37b5d4-b960-47b1-b67f-d521ba8d09a2"
    },
    {
      "module_id": "restructure.core.rag_context.loader",
      "path": "restructure/core/rag_context/loader.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "5c46ef0f-083c-41fb-aab2-4f71c7deb5bb"
    },
    {
      "module_id": "restructure.core.rag_context.__init__",
      "path": "restructure/core/rag_context/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Enhancement System",
      "artifact_id": "6bc68cd2-ad20-4000-a1a2-9ac7ffe7faee"
    },
    {
      "module_id": "restructure.core.rag_context.config",
      "path": "restructure/core/rag_context/config.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "6a01d4ee-1687-40be-87b9-4e0e4d38c319"
    },
    {
      "module_id": "restructure.core.rag_context.session_context_manager",
      "path": "restructure/core/rag_context/session_context_manager.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Session Context Manager - Phase 4A.2.3 Safe Implementation",
      "artifact_id": "62ade6d3-07d5-4f1b-a9ba-d6ecccc2aa79"
    },
    {
      "module_id": "restructure.core.rag_context.retriever",
      "path": "restructure/core/rag_context/retriever.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "artifact_id": "9d9c36d1-f773-4864-baab-5efa47ab4a96"
    },
    {
      "module_id": "restructure.core.rag_context.cli_interface",
      "path": "restructure/core/rag_context/cli_interface.py",
      "category": "core",
      "functions": 9,
      "classes": 0,
      "summary": "Enhanced CLI Interface for RAG Context Management",
      "artifact_id": "192da1ae-97ca-4389-b1a0-5600874b2bb3"
    },
    {
      "module_id": "restructure.core.llmgenie.llm_client",
      "path": "restructure/core/llmgenie/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "b5ec002e-6c1a-468a-98b9-52f428ef55e2"
    },
    {
      "module_id": "restructure.core.llmgenie.cli",
      "path": "restructure/core/llmgenie/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "d89c2510-7501-4b54-8c94-df236ae56a97"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.self_refine_pipeline",
      "path": "restructure/core/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "functions": 12,
      "classes": 3,
      "summary": "Self-Refine Pipeline with MCP Tools Integration",
      "artifact_id": "0ff140a4-5e36-4416-9867-942a0932d8ac"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.websocket_server",
      "path": "restructure/core/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "artifact_id": "bb3be11f-e21e-41e6-895c-51d2090688b3"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.http_api",
      "path": "restructure/core/rag_context/interfaces/http_api.py",
      "category": "core",
      "functions": 15,
      "classes": 6,
      "summary": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "artifact_id": "e1882a9f-7269-402b-901f-a36439efcbdc"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.mcp_server",
      "path": "restructure/core/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop",
      "artifact_id": "0dda6acc-040e-49ca-afeb-bb69e7db12e0"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.__init__",
      "path": "restructure/core/rag_context/interfaces/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
      "artifact_id": "a8416c68-a7dd-4411-9984-5448e5b356d9"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.cli_tool",
      "path": "restructure/core/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "artifact_id": "094f63b4-7e8f-42b2-b0b2-c2a92bdc8150"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.auto_logger",
      "path": "restructure/core/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "Auto Logger for MCP Server Integration",
      "artifact_id": "c2f18f28-3c73-45eb-b18f-a6c154a9d83b"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.tools",
      "path": "restructure/core/llmgenie/mcp/tools.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "MCP Tools Implementation",
      "artifact_id": "426afe2f-6aaa-4cb2-a70b-db4547906b5d"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.server",
      "path": "restructure/core/llmgenie/mcp/server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "8c2b17a5-9d55-4982-bf31-5323205bc01d"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.__init__",
      "path": "restructure/core/llmgenie/mcp/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "FastMCP Server Implementation",
      "artifact_id": "a9e59ba0-46a2-4282-ad1e-d82bd4c046de"
    },
    {
      "module_id": "restructure.core.llmgenie.api.simple_mcp_server",
      "path": "restructure/core/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Simple MCP Server for llmgenie",
      "artifact_id": "9aa727df-884f-41ce-a918-3082005d7b9a"
    },
    {
      "module_id": "restructure.core.llmgenie.api.handoff_validator",
      "path": "restructure/core/llmgenie/api/handoff_validator.py",
      "category": "core",
      "functions": 9,
      "classes": 6,
      "summary": "Handoff validation module for llmgenie",
      "artifact_id": "b909891c-e298-4362-8b3c-32f5d1d1748e"
    },
    {
      "module_id": "restructure.core.llmgenie.api.__init__",
      "path": "restructure/core/llmgenie/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "llmgenie API module",
      "artifact_id": "9d0e01e4-14f0-4e7c-8109-85b61028d35a"
    },
    {
      "module_id": "restructure.core.llmgenie.api.main",
      "path": "restructure/core/llmgenie/api/main.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "FastAPI main application for llmgenie",
      "artifact_id": "36b5fe01-d62b-4a04-8f98-629f8ea4523d"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.__init__",
      "path": "restructure/core/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Multi-Agent Orchestration Package",
      "artifact_id": "d59813b1-2dcc-4217-b41e-ba855c3fdf5f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.orchestrator",
      "path": "restructure/core/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Multi-Agent Orchestrator",
      "artifact_id": "52860b84-6279-4f97-affe-2f84fc0a3622"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.agent_orchestrator",
      "path": "restructure/core/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "functions": 14,
      "classes": 5,
      "summary": "Agent Orchestrator for Multi-Agent Task Coordination",
      "artifact_id": "37c7a6fd-49b9-4aa4-83be-89f891e1e845"
    },
    {
      "module_id": "restructure.core.llmgenie.cli.handoff_cli",
      "path": "restructure/core/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "functions": 5,
      "classes": 0,
      "summary": "CLI tool for handoff validation",
      "artifact_id": "1fc3fe09-b4aa-46e8-b97a-ea9702c0deed"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.quality_intelligence",
      "path": "restructure/core/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "functions": 9,
      "classes": 4,
      "summary": "Quality Intelligence System for Smart LLM Routing",
      "artifact_id": "116b0929-217c-4835-9066-39c02ddda1f8"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.task_classifier",
      "path": "restructure/core/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "functions": 8,
      "classes": 4,
      "summary": "Task Classification Engine for Smart LLM Routing",
      "artifact_id": "433c8fdc-ec65-4fd1-b6b3-680eaafee510"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.model_router",
      "path": "restructure/core/llmgenie/task_router/model_router.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Model Router for Smart LLM Selection",
      "artifact_id": "8d84ac6f-4e68-4a0f-961d-628fdd105914"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.__init__",
      "path": "restructure/core/llmgenie/task_router/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Task Router Module for LLMGenie",
      "artifact_id": "b5f0c543-e45d-47e6-a2e3-db9d6198aebf"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.quality_validator",
      "path": "restructure/core/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Quality Validator for LLM Output Assessment",
      "artifact_id": "a606e9ca-f8cb-4aeb-b8cb-bbdb55435be9"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.execution_modes",
      "path": "restructure/core/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Execution modes for multi-agent orchestration",
      "artifact_id": "33e09e05-7493-45ff-83fb-82c26982d9f4"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.__init__",
      "path": "restructure/core/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Core types and models for Agent Orchestration",
      "artifact_id": "cd745654-7e76-4a09-b1f5-c4253a899d0f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.coordination_types",
      "path": "restructure/core/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Agent coordination types for orchestration",
      "artifact_id": "abcce15d-c03d-4878-b280-acafb3aa66c5"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.task_models",
      "path": "restructure/core/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "Task data models for orchestration",
      "artifact_id": "e356d843-9ccc-4431-be2d-1894ebd051ed"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.collaborative_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Collaborative execution strategy",
      "artifact_id": "dda590b2-759a-4c08-98ea-9fd4cc5ccd7c"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.parallel_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "Parallel execution strategy",
      "artifact_id": "07d4bd71-a104-40d6-9b4a-e1321f48d421"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.sequential_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Sequential execution strategy",
      "artifact_id": "e973e3fc-642c-4d8e-b87b-ee8d1ee60d4f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.__init__",
      "path": "restructure/core/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Execution strategies for multi-agent orchestration",
      "artifact_id": "c1339d02-2f11-481a-94bd-bd887930b60d"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.metrics",
      "path": "restructure/core/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "0baab1df-709e-4222-98a9-422a6f487e82"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.services",
      "path": "restructure/core/llmgenie/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "138be854-cc3c-4ba6-8dda-77aa6a00d04d"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.__init__",
      "path": "restructure/core/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f8a10ff9-eab4-4be3-af55-6f156f79a6e3"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.queue",
      "path": "restructure/core/llmgenie/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a003b663-5b69-413f-8f43-e45839f43820"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.audit",
      "path": "restructure/core/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "fd1cd903-7b77-46b0-bc92-ece059cb3a1c"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.utils",
      "path": "restructure/core/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "01bb7619-fd20-4fcf-b93e-5bc053bcdf61"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.dogfood",
      "path": "restructure/core/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d3bac63-0230-4d4f-a2ae-5076ea56e0a0"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.handlers_legacy",
      "path": "restructure/core/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "84d46635-8a56-4b9b-820b-5331a8f938cb"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.analyze_duplicates",
      "path": "restructure/core/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "98f8b59b-5c7e-4e35-a8be-fe38fc33296c"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.__init__",
      "path": "restructure/core/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "00ac8020-aa31-4fc3-a865-39139a3f6bf2"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.review",
      "path": "restructure/core/llmgenie/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "36143c15-dc02-4dbf-bd21-c2719bbb26ba"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.context",
      "path": "restructure/core/llmgenie/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "f8551c22-4efe-4d4a-8901-b49a17079a15"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.query",
      "path": "restructure/core/llmgenie/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "78a9f849-ac12-493a-bf73-c69f5fb8650f"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.copilot",
      "path": "restructure/core/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "8875f162-fb43-467f-9108-dc996efc544f"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.parse",
      "path": "restructure/core/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5f89be70-64cd-4e76-9ff8-1195234e8936"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.epic",
      "path": "restructure/core/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "ff634e94-b0b6-4aed-a47c-7b70be3856be"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.handlers",
      "path": "restructure/core/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "96c63532-4aa2-476a-8ea8-092110321bb8"
    },
    {
      "module_id": "restructure.tests.orchestration.__init__",
      "path": "restructure/tests/orchestration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Modular tests for Multi-Agent Orchestration",
      "artifact_id": "def0f8fd-e346-48b0-b5ff-6ce0fcd0094d"
    },
    {
      "module_id": "restructure.tests.orchestration.fixtures",
      "path": "restructure/tests/orchestration/fixtures.py",
      "category": "test",
      "functions": 4,
      "classes": 1,
      "summary": "Shared test fixtures for orchestration testing",
      "artifact_id": "b8100f10-fca1-4452-b06d-d860264fc975"
    },
    {
      "module_id": "restructure.tests.orchestration.integration.__init__",
      "path": "restructure/tests/orchestration/integration/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Integration tests",
      "artifact_id": "810428a4-b880-4eff-9c22-052f1ee4915d"
    },
    {
      "module_id": "restructure.tests.orchestration.integration.test_epic5_components",
      "path": "restructure/tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "functions": 5,
      "classes": 1,
      "summary": "Test integration with Epic 5 components",
      "artifact_id": "85f8ebef-1119-4150-95f9-96b4d8500f73"
    },
    {
      "module_id": "restructure.tests.orchestration.core.test_task_models",
      "path": "restructure/tests/orchestration/core/test_task_models.py",
      "category": "test",
      "functions": 8,
      "classes": 2,
      "summary": "Test OrchestrationTask and OrchestrationResult models",
      "artifact_id": "e44fc981-0ebd-465d-8b71-6a00a79b56b8"
    },
    {
      "module_id": "restructure.tests.orchestration.core.__init__",
      "path": "restructure/tests/orchestration/core/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Core orchestration component tests",
      "artifact_id": "8bd977b5-c3df-49f4-80de-e9b0bb36ab0e"
    },
    {
      "module_id": "restructure.tests.orchestration.core.test_execution_modes",
      "path": "restructure/tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "functions": 7,
      "classes": 1,
      "summary": "Test ExecutionMode enum and smart suggestions",
      "artifact_id": "cba5f866-9de5-49bf-b45a-acc354eeee28"
    },
    {
      "module_id": "restructure.tests.orchestration.executors.test_parallel_executor",
      "path": "restructure/tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "functions": 6,
      "classes": 1,
      "summary": "Test ParallelExecutor implementation",
      "artifact_id": "12c5d621-a46e-4cbe-a8fd-1ff4edab486a"
    },
    {
      "module_id": "restructure.tests.orchestration.executors.__init__",
      "path": "restructure/tests/orchestration/executors/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Executor strategy tests",
      "artifact_id": "e44e52c6-3163-440b-aa8a-1b57489ff4b5"
    }
  ],
  "modules": [
    {
      "module_id": "test_mcp_tools",
      "path": "test_mcp_tools.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 MCP \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
      "functions": [
        {
          "name": "test_mcp_tools",
          "docstring": "\u0422\u0435\u0441\u0442 \u0432\u0441\u0435\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
          "line_range": [
            11,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_mcp_tools": [
          "len",
          "MCPServer",
          "print"
        ]
      },
      "dependencies": [
        "MCPServer",
        "asyncio",
        "json",
        "mcp",
        "src.rag_context.interfaces.mcp_server",
        "types"
      ],
      "hash": "88101208d0ad6b543494d08ea2df5cb8a942aa2755655878fd18b0ec3d913c84",
      "artifact_id": "905acdb2-fdac-4195-ad7a-3ac9c4cd2816"
    },
    {
      "module_id": "test_handoff_validation",
      "path": "test_handoff_validation.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "HandoffFile",
        "HandoffPackage",
        "HandoffValidator",
        "llmgenie.api.handoff_validator",
        "sys"
      ],
      "hash": "73f23cc4fb5bd815a41be988ae5fdd22508789da8b8d325d0fd5d819f604cb39",
      "artifact_id": "84a89d63-8682-491c-9c01-dd1110a41780"
    },
    {
      "module_id": "demos.self_refine_pipeline_demo",
      "path": "demos/self_refine_pipeline_demo.py",
      "category": "core",
      "module_doc": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b Self-Refine Pipeline\nDemo script for onboarding and pitching",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            13,
            84
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "pipeline.refine",
          "print",
          "pipeline.generate_refinement_report",
          "SelfRefinePipeline"
        ]
      },
      "dependencies": [
        "RefinementType",
        "SelfRefinePipeline",
        "os",
        "rag_context.interfaces.self_refine_pipeline",
        "sys"
      ],
      "hash": "d22033822a808651ee43a774b2aba7bd3f98bb263b48e62cdb07472aef5c81ea",
      "artifact_id": "4a3abe00-6a6e-495b-bd41-251fd875816e"
    },
    {
      "module_id": "demos.self_refine_cli_demo",
      "path": "demos/self_refine_cli_demo.py",
      "category": "core",
      "module_doc": "CLI Demonstration for Self-Refine Pipeline\nInteractive demo for onboarding and pitching",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            22,
            75
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "handle_code_refinement",
          "docstring": "Handle code refinement",
          "line_range": [
            77,
            129
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_text_refinement",
          "docstring": "Handle text refinement",
          "line_range": [
            131,
            161
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_quick_refinement",
          "docstring": "Handle quick refinement",
          "line_range": [
            163,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_demo_mode",
          "docstring": "Handle interactive demo mode",
          "line_range": [
            177,
            216
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "demo_parser.add_argument",
          "quick_parser.add_argument",
          "handle_demo_mode",
          "print",
          "parser.parse_args",
          "handle_text_refinement",
          "argparse.ArgumentParser",
          "parser.print_help",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "code_parser.add_argument",
          "text_parser.add_argument",
          "handle_quick_refinement",
          "handle_code_refinement"
        ],
        "handle_code_refinement": [
          "Path",
          "len",
          "pipeline.refine",
          "print",
          "SelfRefinePipeline"
        ],
        "handle_text_refinement": [
          "Path",
          "print",
          "pipeline.refine",
          "SelfRefinePipeline"
        ],
        "handle_quick_refinement": [
          "quick_refine_text",
          "print",
          "quick_refine_code"
        ],
        "handle_demo_mode": [
          "quick_refine_text",
          "quick_refine_code",
          "print",
          "enumerate"
        ]
      },
      "dependencies": [
        "Path",
        "RefinementType",
        "SelfRefinePipeline",
        "argparse",
        "os",
        "pathlib",
        "quick_refine_code",
        "quick_refine_text",
        "rag_context.interfaces.self_refine_pipeline",
        "sys"
      ],
      "hash": "46d6bf0f0ec84f6f7fb43595c5cb0dff3710ec660953467f3733ef9d63067210",
      "artifact_id": "73760a48-9dc6-4769-8255-9d9a3a483a4b"
    },
    {
      "module_id": "scripts.test_fastmcp",
      "path": "scripts/test_fastmcp.py",
      "category": "test",
      "module_doc": "FastMCP Server Test Script\n\nTest new FastMCP implementation independently of the main API",
      "functions": [
        {
          "name": "main",
          "docstring": "Run FastMCP server on port 8001 for testing",
          "line_range": [
            18,
            27
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "run_server"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "llmgenie.mcp.server",
        "pathlib",
        "run_server",
        "sys"
      ],
      "hash": "6e3609760c751775429b4932af9233e32beda9c5a8a35c9538e41a4bc773ed07",
      "artifact_id": "413caa01-8e8e-40e6-91e1-38c56e6d32ce"
    },
    {
      "module_id": "tests.test_task_router",
      "path": "tests/test_task_router.py",
      "category": "test",
      "module_doc": "Comprehensive tests for Epic 5 TaskRouter implementation\n\nTests task classification, model routing, and integration with FastAPI",
      "functions": [
        {
          "name": "setup_method",
          "docstring": "Setup classifier for each test",
          "line_range": [
            20,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_code_generation_classification",
          "docstring": "Test code generation task classification",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_classification",
          "docstring": "Test documentation task classification",
          "line_range": [
            33,
            39
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complex_reasoning_classification",
          "docstring": "Test complex reasoning task classification",
          "line_range": [
            41,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_debugging_classification",
          "docstring": "Test debugging task classification",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complexity_scoring",
          "docstring": "Test complexity level calculation",
          "line_range": [
            58,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_based_classification",
          "docstring": "Test classification with context information",
          "line_range": [
            75,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_method",
          "docstring": "Setup router for each test",
          "line_range": [
            92,
            95
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ollama_routing_preference",
          "docstring": "Test routing to Ollama for code generation",
          "line_range": [
            98,
            106
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_claude_routing_preference",
          "docstring": "Test routing to Claude for complex reasoning",
          "line_range": [
            109,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_user_model_preference",
          "docstring": "Test user model preference override",
          "line_range": [
            119,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_fallback_model_selection",
          "docstring": "Test fallback model logic",
          "line_range": [
            133,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_ollama_execution",
          "docstring": "Test actual Ollama execution",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "test_claude_execution_placeholder",
          "docstring": "Test Claude execution (placeholder implementation)",
          "line_range": [
            165,
            174
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_error_handling",
          "docstring": "Test error handling in execution",
          "line_range": [
            178,
            190
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for performance tests",
          "line_range": [
            196,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_model_performance_baselines",
          "docstring": "Test that performance baselines match Epic 5 findings",
          "line_range": [
            200,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_optimization",
          "docstring": "Test routing optimization for performance",
          "line_range": [
            213,
            221
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_quality_threshold_calculation",
          "docstring": "Test quality threshold based on task complexity",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_agent_request_compatibility",
          "docstring": "Test compatibility with existing AgentRequest model",
          "line_range": [
            240,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_serialization",
          "docstring": "Test that RoutingDecision can be serialized for API responses",
          "line_range": [
            263,
            279
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for quality validator tests",
          "line_range": [
            285,
            287
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_success",
          "docstring": "Test successful Python code validation",
          "line_range": [
            289,
            311
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_syntax_error",
          "docstring": "Test Python code with syntax errors",
          "line_range": [
            313,
            326
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_javascript_code_validation",
          "docstring": "Test JavaScript code validation",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_high_quality",
          "docstring": "Test high-quality text validation",
          "line_range": [
            351,
            374
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_poor_quality",
          "docstring": "Test poor quality text validation",
          "line_range": [
            376,
            385
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_specific_validation",
          "docstring": "Test documentation-specific validation",
          "line_range": [
            387,
            411
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_fallback_decision_making",
          "docstring": "Test fallback decision based on task type and quality",
          "line_range": [
            413,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_thresholds_by_task_type",
          "docstring": "Test different quality thresholds for different task types",
          "line_range": [
            457,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_coherence_score_calculation",
          "docstring": "Test text coherence scoring",
          "line_range": [
            468,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_completeness_score_calculation",
          "docstring": "Test text completeness scoring",
          "line_range": [
            483,
            499
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_input_handling",
          "docstring": "Test handling of empty inputs",
          "line_range": [
            501,
            513
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_metrics_extraction",
          "docstring": "Test quality metrics extraction for monitoring",
          "line_range": [
            515,
            532
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_generic_code_validation",
          "docstring": "Test generic code validation for unknown languages",
          "line_range": [
            534,
            547
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestTaskClassifier",
          "docstring": "Test TaskClassifier with Epic 5 research patterns",
          "line_range": [
            17,
            86
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup classifier for each test",
              "line_range": [
                20,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_code_generation_classification",
              "docstring": "Test code generation task classification",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_classification",
              "docstring": "Test documentation task classification",
              "line_range": [
                33,
                39
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complex_reasoning_classification",
              "docstring": "Test complex reasoning task classification",
              "line_range": [
                41,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_debugging_classification",
              "docstring": "Test debugging task classification",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complexity_scoring",
              "docstring": "Test complexity level calculation",
              "line_range": [
                58,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_based_classification",
              "docstring": "Test classification with context information",
              "line_range": [
                75,
                86
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestModelRouter",
          "docstring": "Test ModelRouter with Epic 5 integration patterns",
          "line_range": [
            89,
            190
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup router for each test",
              "line_range": [
                92,
                95
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_routing_preference",
              "docstring": "Test routing to Ollama for code generation",
              "line_range": [
                98,
                106
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_claude_routing_preference",
              "docstring": "Test routing to Claude for complex reasoning",
              "line_range": [
                109,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_user_model_preference",
              "docstring": "Test user model preference override",
              "line_range": [
                119,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_model_selection",
              "docstring": "Test fallback model logic",
              "line_range": [
                133,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_execution",
              "docstring": "Test actual Ollama execution",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            },
            {
              "name": "test_claude_execution_placeholder",
              "docstring": "Test Claude execution (placeholder implementation)",
              "line_range": [
                165,
                174
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_error_handling",
              "docstring": "Test error handling in execution",
              "line_range": [
                178,
                190
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestPerformanceOptimization",
          "docstring": "Test performance optimization based on Epic 5 baselines",
          "line_range": [
            193,
            234
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for performance tests",
              "line_range": [
                196,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_model_performance_baselines",
              "docstring": "Test that performance baselines match Epic 5 findings",
              "line_range": [
                200,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_optimization",
              "docstring": "Test routing optimization for performance",
              "line_range": [
                213,
                221
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_threshold_calculation",
              "docstring": "Test quality threshold based on task complexity",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestIntegrationWithFastAPI",
          "docstring": "Test integration with existing FastAPI infrastructure",
          "line_range": [
            237,
            279
          ],
          "methods": [
            {
              "name": "test_agent_request_compatibility",
              "docstring": "Test compatibility with existing AgentRequest model",
              "line_range": [
                240,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_serialization",
              "docstring": "Test that RoutingDecision can be serialized for API responses",
              "line_range": [
                263,
                279
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestQualityValidator",
          "docstring": "Test enhanced Quality Validator with real validation logic",
          "line_range": [
            282,
            547
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for quality validator tests",
              "line_range": [
                285,
                287
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_success",
              "docstring": "Test successful Python code validation",
              "line_range": [
                289,
                311
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_syntax_error",
              "docstring": "Test Python code with syntax errors",
              "line_range": [
                313,
                326
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_javascript_code_validation",
              "docstring": "Test JavaScript code validation",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_high_quality",
              "docstring": "Test high-quality text validation",
              "line_range": [
                351,
                374
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_poor_quality",
              "docstring": "Test poor quality text validation",
              "line_range": [
                376,
                385
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_specific_validation",
              "docstring": "Test documentation-specific validation",
              "line_range": [
                387,
                411
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_decision_making",
              "docstring": "Test fallback decision based on task type and quality",
              "line_range": [
                413,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_thresholds_by_task_type",
              "docstring": "Test different quality thresholds for different task types",
              "line_range": [
                457,
                466
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_coherence_score_calculation",
              "docstring": "Test text coherence scoring",
              "line_range": [
                468,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_completeness_score_calculation",
              "docstring": "Test text completeness scoring",
              "line_range": [
                483,
                499
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_empty_input_handling",
              "docstring": "Test handling of empty inputs",
              "line_range": [
                501,
                513
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_metrics_extraction",
              "docstring": "Test quality metrics extraction for monitoring",
              "line_range": [
                515,
                532
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_generic_code_validation",
              "docstring": "Test generic code validation for unknown languages",
              "line_range": [
                534,
                547
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "setup_method": [
          "QualityValidator"
        ],
        "test_code_generation_classification": [],
        "test_documentation_classification": [],
        "test_complex_reasoning_classification": [],
        "test_debugging_classification": [],
        "test_complexity_scoring": [],
        "test_context_based_classification": [],
        "test_ollama_routing_preference": [],
        "test_claude_routing_preference": [],
        "test_user_model_preference": [],
        "test_fallback_model_selection": [],
        "test_ollama_execution": [
          "patch",
          "Mock"
        ],
        "test_claude_execution_placeholder": [],
        "test_error_handling": [
          "patch",
          "Exception"
        ],
        "test_model_performance_baselines": [
          "expected_baselines.items"
        ],
        "test_routing_decision_optimization": [],
        "test_quality_threshold_calculation": [
          "classifier.classify_task",
          "TaskClassifier"
        ],
        "test_agent_request_compatibility": [
          "classifier.classify_task",
          "TaskClassifier",
          "isinstance"
        ],
        "test_routing_decision_serialization": [
          "isinstance",
          "router.route_task",
          "ModelRouter"
        ],
        "test_python_code_validation_success": [],
        "test_python_code_validation_syntax_error": [
          "any",
          "issue.lower"
        ],
        "test_javascript_code_validation": [],
        "test_text_validation_high_quality": [],
        "test_text_validation_poor_quality": [],
        "test_documentation_specific_validation": [
          "len"
        ],
        "test_fallback_decision_making": [
          "QualityResult"
        ],
        "test_quality_thresholds_by_task_type": [],
        "test_coherence_score_calculation": [],
        "test_completeness_score_calculation": [
          "complete_text.lower"
        ],
        "test_empty_input_handling": [],
        "test_quality_metrics_extraction": [
          "QualityResult"
        ],
        "test_generic_code_validation": []
      },
      "dependencies": [
        "AsyncMock",
        "ComplexityLevel",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "asyncio",
        "patch",
        "pytest",
        "src.llmgenie.task_router",
        "src.llmgenie.task_router.task_classifier",
        "unittest.mock"
      ],
      "hash": "07b8ae843db69e19353cb6bd830e348ff42e34847c774212be84ff248f3dd137",
      "artifact_id": "9a075c04-8b51-42d5-a073-bfd7bd2410f8"
    },
    {
      "module_id": "tests.test_ollama_function_calling",
      "path": "tests/test_ollama_function_calling.py",
      "category": "test",
      "module_doc": "Test script for Ollama function calling capability\nPart of Epic 5: MCP-Ollama Integration\n\nThis script tests:\n1. Basic function calling with different models\n2. Performance measurement\n3. Quality validation",
      "functions": [
        {
          "name": "get_current_weather",
          "docstring": "Get the current weather for a city (mock function for testing)\n\nArgs:\n    city: The name of the city\n    \nReturns:\n    dict: Weather information",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "city"
          ],
          "decorators": []
        },
        {
          "name": "add_two_numbers",
          "docstring": "Add two numbers together\n\nArgs:\n    a: The first integer number\n    b: The second integer number\n    \nReturns:\n    int: The sum of the two numbers",
          "line_range": [
            40,
            51
          ],
          "parameters": [
            "a",
            "b"
          ],
          "decorators": []
        },
        {
          "name": "test_model_function_calling",
          "docstring": "Test function calling capability for a specific model\n\nArgs:\n    model_name: Name of the Ollama model to test\n    \nReturns:\n    dict: Test results including performance metrics",
          "line_range": [
            54,
            128
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "test_openai_compatible_endpoint",
          "docstring": "Test OpenAI compatible endpoint functionality\n\nReturns:\n    dict: Test results for OpenAI compatibility",
          "line_range": [
            131,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main test execution function",
          "line_range": [
            181,
            265
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_current_weather": [
          "weather_data.get"
        ],
        "add_two_numbers": [],
        "test_model_function_calling": [
          "ollama.chat",
          "len",
          "str",
          "print",
          "add_two_numbers",
          "get_current_weather",
          "time.time"
        ],
        "test_openai_compatible_endpoint": [
          "len",
          "str",
          "print",
          "requests.post",
          "response.json",
          "time.time",
          "data.get"
        ],
        "main": [
          "sum",
          "len",
          "open",
          "json.dump",
          "print",
          "test_openai_compatible_endpoint",
          "test_results.items",
          "isinstance",
          "hasattr",
          "result.get",
          "test_model_function_calling",
          "ollama.list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "json",
        "ollama",
        "requests",
        "time",
        "typing"
      ],
      "hash": "ee0ccf1cf8a278a300a6c166371f0df26dd9bc8843a50e0fbda21bd40c742b25",
      "artifact_id": "8a45ed85-6cac-4579-8512-5e1669047014"
    },
    {
      "module_id": "tests.test_api",
      "path": "tests/test_api.py",
      "category": "test",
      "module_doc": "Tests for llmgenie FastAPI application",
      "functions": [
        {
          "name": "test_health_check",
          "docstring": "Test health check endpoint",
          "line_range": [
            17,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_workflow_modes",
          "docstring": "Test workflow modes endpoint",
          "line_range": [
            26,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_agent_execute",
          "docstring": "Test agent execution endpoint",
          "line_range": [
            36,
            48
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_placeholder",
          "docstring": "Test MCP tools placeholder endpoint",
          "line_range": [
            50,
            56
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_health_check": [
          "response.json",
          "client.get"
        ],
        "test_workflow_modes": [
          "response.json",
          "client.get"
        ],
        "test_agent_execute": [
          "response.json",
          "client.post"
        ],
        "test_mcp_tools_placeholder": [
          "response.json",
          "client.post"
        ]
      },
      "dependencies": [
        "TestClient",
        "app",
        "fastapi.testclient",
        "llmgenie.api.main",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "1a2b1fd51aa2161c4ce2e92b7ab2b226923863ee708de205c59d35e5fbd83131",
      "artifact_id": "93268be8-edf2-4d45-9a11-725861bd5e70"
    },
    {
      "module_id": "tests.test_cli",
      "path": "tests/test_cli.py",
      "category": "test",
      "module_doc": "Tests for llmgenie CLI module",
      "functions": [
        {
          "name": "test_cli_import",
          "docstring": "Test that CLI module can be imported",
          "line_range": [
            12,
            18
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_llm_client_import",
          "docstring": "Test that LLM client can be imported",
          "line_range": [
            20,
            26
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_cli_import": [
          "pytest.fail"
        ],
        "test_llm_client_import": [
          "pytest.fail"
        ]
      },
      "dependencies": [
        "cli",
        "llm_client",
        "llmgenie",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "892f36ff6a9ab5c3fdb8215906c8d9ca50a2fd5fbe714e8475dfd92bafef5fef",
      "artifact_id": "102c157f-16d2-457f-9c2c-ae9368f5818a"
    },
    {
      "module_id": "tests.test_self_refine_pipeline",
      "path": "tests/test_self_refine_pipeline.py",
      "category": "test",
      "module_doc": "Tests for Self-Refine Pipeline System\nComprehensive testing of MCP-enhanced iterative improvement",
      "functions": [
        {
          "name": "pipeline",
          "docstring": "Create a test pipeline instance",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_code",
          "docstring": "Sample code for testing",
          "line_range": [
            29,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_text",
          "docstring": "Sample text for testing",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_pipeline_initialization",
          "docstring": "Test pipeline initialization",
          "line_range": [
            47,
            51
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code",
          "docstring": "Test code refinement",
          "line_range": [
            53,
            61
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_text",
          "docstring": "Test text refinement",
          "line_range": [
            63,
            69
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_confidence_threshold_reached",
          "docstring": "Test that refinement stops when confidence threshold is reached",
          "line_range": [
            72,
            82
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_max_iterations_limit",
          "docstring": "Test that refinement respects max iterations limit",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_integration",
          "docstring": "Test MCP tools integration in refinement process",
          "line_range": [
            95,
            104
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code_file",
          "docstring": "Test refinement of entire code file",
          "line_range": [
            106,
            128
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_report_generation",
          "docstring": "Test refinement report generation",
          "line_range": [
            130,
            148
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_quick_refine_functions",
          "docstring": "Test convenience quick refine functions",
          "line_range": [
            150,
            159
          ],
          "parameters": [
            "self",
            "sample_code",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_enhancement_context_building",
          "docstring": "Test context enhancement with MCP tools",
          "line_range": [
            161,
            171
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_critique_generation",
          "docstring": "Test critique generation with MCP integration",
          "line_range": [
            173,
            186
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_validation_logic",
          "docstring": "Test improvement validation logic",
          "line_range": [
            188,
            203
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_error_handling_file_not_found",
          "docstring": "Test error handling for non-existent files",
          "line_range": [
            205,
            208
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_results_report",
          "docstring": "Test report generation with empty results",
          "line_range": [
            210,
            214
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_auto_logging_integration",
          "docstring": "Test integration with auto-logging system",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "mock_auto_logger",
            "pipeline",
            "sample_code"
          ],
          "decorators": [
            "patch('src.rag_context.interfaces.self_refine_pipeline.AUTO_LOGGING_AVAILABLE', True)",
            "patch('src.rag_context.interfaces.self_refine_pipeline.auto_logger')"
          ]
        },
        {
          "name": "test_all_refinement_types",
          "docstring": "Test that all refinement types are properly defined",
          "line_range": [
            237,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_result_creation",
          "docstring": "Test RefinementResult creation and attributes",
          "line_range": [
            249,
            269
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestSelfRefinePipeline",
          "docstring": "Test suite for Self-Refine Pipeline",
          "line_range": [
            20,
            231
          ],
          "methods": [
            {
              "name": "pipeline",
              "docstring": "Create a test pipeline instance",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_code",
              "docstring": "Sample code for testing",
              "line_range": [
                29,
                40
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_text",
              "docstring": "Sample text for testing",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_pipeline_initialization",
              "docstring": "Test pipeline initialization",
              "line_range": [
                47,
                51
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_refine_code",
              "docstring": "Test code refinement",
              "line_range": [
                53,
                61
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_text",
              "docstring": "Test text refinement",
              "line_range": [
                63,
                69
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_text"
              ]
            },
            {
              "name": "test_confidence_threshold_reached",
              "docstring": "Test that refinement stops when confidence threshold is reached",
              "line_range": [
                72,
                82
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_max_iterations_limit",
              "docstring": "Test that refinement respects max iterations limit",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_mcp_tools_integration",
              "docstring": "Test MCP tools integration in refinement process",
              "line_range": [
                95,
                104
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_code_file",
              "docstring": "Test refinement of entire code file",
              "line_range": [
                106,
                128
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refinement_report_generation",
              "docstring": "Test refinement report generation",
              "line_range": [
                130,
                148
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_quick_refine_functions",
              "docstring": "Test convenience quick refine functions",
              "line_range": [
                150,
                159
              ],
              "parameters": [
                "self",
                "sample_code",
                "sample_text"
              ]
            },
            {
              "name": "test_enhancement_context_building",
              "docstring": "Test context enhancement with MCP tools",
              "line_range": [
                161,
                171
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_critique_generation",
              "docstring": "Test critique generation with MCP integration",
              "line_range": [
                173,
                186
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_validation_logic",
              "docstring": "Test improvement validation logic",
              "line_range": [
                188,
                203
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_error_handling_file_not_found",
              "docstring": "Test error handling for non-existent files",
              "line_range": [
                205,
                208
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_empty_results_report",
              "docstring": "Test report generation with empty results",
              "line_range": [
                210,
                214
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_auto_logging_integration",
              "docstring": "Test integration with auto-logging system",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "mock_auto_logger",
                "pipeline",
                "sample_code"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementTypes",
          "docstring": "Test different refinement types",
          "line_range": [
            234,
            243
          ],
          "methods": [
            {
              "name": "test_all_refinement_types",
              "docstring": "Test that all refinement types are properly defined",
              "line_range": [
                237,
                243
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementResult",
          "docstring": "Test RefinementResult dataclass",
          "line_range": [
            246,
            269
          ],
          "methods": [
            {
              "name": "test_refinement_result_creation",
              "docstring": "Test RefinementResult creation and attributes",
              "line_range": [
                249,
                269
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "pipeline": [
          "SelfRefinePipeline"
        ],
        "sample_code": [],
        "sample_text": [],
        "test_pipeline_initialization": [
          "isinstance"
        ],
        "test_refine_code": [
          "all",
          "len",
          "pipeline.refine",
          "isinstance"
        ],
        "test_refine_text": [
          "len",
          "pipeline.refine"
        ],
        "test_confidence_threshold_reached": [
          "len",
          "patch.object",
          "pipeline.refine"
        ],
        "test_max_iterations_limit": [
          "len",
          "patch.object",
          "pipeline.refine"
        ],
        "test_mcp_tools_integration": [
          "len",
          "pipeline.refine",
          "isinstance"
        ],
        "test_refine_code_file": [
          "Path",
          "tempfile.NamedTemporaryFile",
          "str",
          "len",
          "temp_file.with_suffix",
          "temp_file.unlink",
          "backup_file.unlink",
          "f.write",
          "pipeline.refine_code_file",
          "backup_file.read_text",
          "backup_file.exists",
          "temp_file.read_text"
        ],
        "test_refinement_report_generation": [
          "len",
          "pipeline.refine",
          "pipeline.generate_refinement_report"
        ],
        "test_quick_refine_functions": [
          "len",
          "quick_refine_text",
          "isinstance",
          "quick_refine_code"
        ],
        "test_enhancement_context_building": [
          "len",
          "pipeline._enhance_context"
        ],
        "test_critique_generation": [
          "pipeline._critique_with_mcp",
          "len",
          "isinstance"
        ],
        "test_validation_logic": [
          "pipeline._validate_improvements"
        ],
        "test_error_handling_file_not_found": [
          "pipeline.refine_code_file",
          "pytest.raises"
        ],
        "test_empty_results_report": [
          "pipeline.generate_refinement_report"
        ],
        "test_auto_logging_integration": [
          "patch",
          "len",
          "pipeline.refine"
        ],
        "test_all_refinement_types": [],
        "test_refinement_result_creation": [
          "RefinementResult"
        ]
      },
      "dependencies": [
        "Mock",
        "Path",
        "RefinementResult",
        "RefinementType",
        "SelfRefinePipeline",
        "patch",
        "pathlib",
        "pytest",
        "quick_refine_code",
        "quick_refine_text",
        "src.rag_context.interfaces.self_refine_pipeline",
        "tempfile",
        "unittest.mock"
      ],
      "hash": "05a17d4148ab1b8353ab668170382fc22d156d6746c10cd6bb09241703f4f0c8",
      "artifact_id": "549a8b44-bd2e-4284-84e9-fdebd7ffadcd"
    },
    {
      "module_id": "tests.test_smoke",
      "path": "tests/test_smoke.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_smoke",
          "docstring": "",
          "line_range": [
            1,
            2
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_smoke": []
      },
      "dependencies": [],
      "hash": "a6845264444e66537bcf4ff95e3560a9deb6764c4ad8fda31f59580707d69a97",
      "artifact_id": "03cd62c7-3e1a-44fa-928d-1537b8d6a774"
    },
    {
      "module_id": "tools.atomic_rules_linter",
      "path": "tools/atomic_rules_linter.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "glob",
        "os",
        "re"
      ],
      "hash": "470eb6e10bf21aaa6984e864abd16bbd7c22ff4536290f65c548e44c3b5512b8",
      "artifact_id": "e11249ac-269a-42ab-9506-8f5cfd917c6e"
    },
    {
      "module_id": "scripts.tools.ollama_queue",
      "path": "scripts/tools/ollama_queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "log_event",
          "docstring": "",
          "line_range": [
            25,
            27
          ],
          "parameters": [
            "event"
          ],
          "decorators": []
        },
        {
          "name": "send_to_ollama",
          "docstring": "",
          "line_range": [
            29,
            37
          ],
          "parameters": [
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            39,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_event": [
          "f.write",
          "datetime.now",
          "LOG_FILE.open"
        ],
        "send_to_ollama": [
          "response.json",
          "requests.post",
          "response.raise_for_status"
        ],
        "main": [
          "send_to_ollama",
          "result_file.open",
          "f.write",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "pathlib",
        "requests"
      ],
      "hash": "e84ed70980f42a0902e13c5b88eea995bdb78cf6dc8e5e66ccb7b85a68dc58a6",
      "artifact_id": "4654f97c-0f9c-48fc-9ed4-a0030260ab7b"
    },
    {
      "module_id": "data.audit.audit_2025-06-12.workfiles.gen_project_structure_img",
      "path": "data/audit/audit_2025-06-12/workfiles/gen_project_structure_img.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "matplotlib.lines",
        "matplotlib.patches",
        "matplotlib.pyplot"
      ],
      "hash": "ce0f6ac188fc3fc647f39244ea8ad68d4c216d9394cfcaba312fe37b893cdf68",
      "artifact_id": "a2d25d11-1952-4af7-8f97-7b6603fa28ca"
    },
    {
      "module_id": "data.audit.audit_2025-06-12.workfiles.gen_audit_structure_img",
      "path": "data/audit/audit_2025-06-12/workfiles/gen_audit_structure_img.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "matplotlib.patches",
        "matplotlib.pyplot"
      ],
      "hash": "f24074251d03490eee123a07a4ac27f84f8c5de1f6782a0c75b64aa29493da3a",
      "artifact_id": "3b95286d-1116-472f-b062-fea99ae44024"
    },
    {
      "module_id": "src.struct_tools.structure_analyzer",
      "path": "src/struct_tools/structure_analyzer.py",
      "category": "core",
      "module_doc": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json\n\u0438 modular index (.llmstruct_index/)\n\n\u0426\u0435\u043b\u044c: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430,\n\u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, call graphs, \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            32,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            46
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "generate_structure",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
          "line_range": [
            48,
            92
          ],
          "parameters": [
            "self",
            "target_dir",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "load_structure",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
          "line_range": [
            94,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_modular_index",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
          "line_range": [
            116,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_overview",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module_dependencies",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            158,
            193
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "find_function_callers",
          "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "function_name",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "get_module_complexity_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            218,
            254
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self",
            "functions",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "generate_architecture_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            276,
            337
          ],
          "parameters": [
            "self",
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "search_functions_by_pattern",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
          "line_range": [
            339,
            355
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "get_refactoring_impact",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            357,
            394
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_assess_refactoring_risk",
          "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            396,
            407
          ],
          "parameters": [
            "self",
            "importers_count",
            "called_functions_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            19,
            36
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                32,
                36
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructureAnalyzer",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 struct.json \u0438 modular index",
          "line_range": [
            39,
            407
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                46
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "generate_structure",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
              "line_range": [
                48,
                92
              ],
              "parameters": [
                "self",
                "target_dir",
                "force"
              ]
            },
            {
              "name": "load_structure",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
              "line_range": [
                94,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_modular_index",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
              "line_range": [
                116,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_overview",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                139,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_module_dependencies",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                158,
                193
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "find_function_callers",
              "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "function_name",
                "module_path"
              ]
            },
            {
              "name": "get_module_complexity_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                218,
                254
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                256,
                274
              ],
              "parameters": [
                "self",
                "functions",
                "classes"
              ]
            },
            {
              "name": "generate_architecture_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                276,
                337
              ],
              "parameters": [
                "self",
                "output_path"
              ]
            },
            {
              "name": "search_functions_by_pattern",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
              "line_range": [
                339,
                355
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "get_refactoring_impact",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                357,
                394
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_assess_refactoring_risk",
              "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
              "line_range": [
                396,
                407
              ],
              "parameters": [
                "self",
                "importers_count",
                "called_functions_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "StructureConfig",
          "logging.getLogger"
        ],
        "generate_structure": [
          "str",
          "subprocess.run",
          "datetime.now",
          "cmd.extend"
        ],
        "load_structure": [
          "self._load_modular_index",
          "open",
          "len",
          "json.load"
        ],
        "_load_modular_index": [
          "str",
          "len",
          "list",
          "open",
          "module_data.get",
          "json.load"
        ],
        "get_project_overview": [
          "sum",
          "len",
          "mod.get"
        ],
        "analyze_module_dependencies": [
          "f.get",
          "len",
          "target_module.get",
          "c.get",
          "module.get"
        ],
        "find_function_callers": [
          "callers.append",
          "edge.get",
          "call_graph.get",
          "target.get"
        ],
        "get_module_complexity_metrics": [
          "sum",
          "len",
          "function_lines.append",
          "module_data.get",
          "max",
          "self._calculate_complexity_score",
          "class_lines.append"
        ],
        "_calculate_complexity_score": [
          "round",
          "len",
          "func.get",
          "cls.get"
        ],
        "generate_architecture_report": [
          "self.get_project_overview",
          "report_lines.extend",
          "open",
          "f.write",
          "enumerate",
          "complexity_analysis.sort",
          "self.get_module_complexity_metrics",
          "datetime.now",
          "complexity_analysis.append"
        ],
        "search_functions_by_pattern": [
          "module.get",
          "pattern.lower",
          "results.append",
          "function.get"
        ],
        "get_refactoring_impact": [
          "len",
          "edge.get",
          "self._assess_refactoring_risk",
          "call_graph.get",
          "source.get",
          "import_item.get",
          "module.get",
          "importers.append",
          "target.get",
          "called_functions.append"
        ],
        "_assess_refactoring_risk": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "typing"
      ],
      "hash": "3b33899511ecb08c4d0c0f2400c74c15e97b81ba1866741ad68bf7f2c680d9d9",
      "artifact_id": "82c434d7-72ff-4650-a1ed-5ed8eeb736f5"
    },
    {
      "module_id": "src.struct_tools.mcp_interface",
      "path": "src/struct_tools/mcp_interface.py",
      "category": "core",
      "module_doc": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f struct_tools \u0441 Model Context Protocol \u0434\u043b\u044f Cursor IDE",
      "functions": [
        {
          "name": "run_struct_mcp_server",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f struct_tools",
          "line_range": [
            358,
            361
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            44
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_tools",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
          "line_range": [
            46,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            164,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            197,
            224
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_overview",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            226,
            239
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_analyze_module",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            241,
            272
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_search_functions",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            274,
            294
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_find_callers",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            296,
            319
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate_report",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            321,
            341
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            343,
            354
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            168,
            195
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            20,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureMCPServer",
          "docstring": "MCP \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            31,
            354
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                44
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_tools",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
              "line_range": [
                46,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                164,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_generate",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                197,
                224
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_overview",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                226,
                239
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_analyze_module",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                241,
                272
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_search_functions",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                274,
                294
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_find_callers",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                296,
                319
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_generate_report",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                321,
                341
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
              "line_range": [
                343,
                354
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "types",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Tool",
          "docstring": "",
          "line_range": [
            19,
            20
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                20,
                20
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TextContent",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                22
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolRequest",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                24
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolResult",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                26
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "StructureAnalyzer",
          "ImportError",
          "Server",
          "StructureConfig",
          "logging.getLogger",
          "self._setup_handlers",
          "self._setup_tools"
        ],
        "_setup_tools": [],
        "_setup_handlers": [],
        "handle_call_tool": [
          "str",
          "self._handle_search_functions",
          "types.TextContent",
          "self._handle_generate",
          "self._handle_analyze_module",
          "self._handle_find_callers",
          "self._handle_generate_report",
          "json.dumps",
          "self._handle_overview"
        ],
        "_handle_generate": [
          "result.update",
          "args.get",
          "json.dumps",
          "types.TextContent"
        ],
        "_handle_overview": [
          "types.TextContent",
          "json.dumps"
        ],
        "_handle_analyze_module": [
          "types.TextContent",
          "args.get",
          "json.dumps"
        ],
        "_handle_search_functions": [
          "types.TextContent",
          "len",
          "json.dumps"
        ],
        "_handle_find_callers": [
          "types.TextContent",
          "len",
          "args.get",
          "json.dumps"
        ],
        "_handle_generate_report": [
          "types.TextContent",
          "args.get",
          "json.dumps"
        ],
        "run_stdio": [
          "stdio_server",
          "ImportError"
        ],
        "run_struct_mcp_server": [
          "server.run_stdio",
          "StructureMCPServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "json",
        "logging",
        "mcp",
        "mcp.server",
        "mcp.server.stdio",
        "pathlib",
        "stdio_server",
        "structure_analyzer",
        "types",
        "typing"
      ],
      "hash": "b72078d01e40ffab9133d1701757ae12de3ed0b7d0d837fb2a3c04e035afe3e8",
      "artifact_id": "79ac4412-9e44-4a70-8661-090dbe3bc160"
    },
    {
      "module_id": "src.struct_tools.__init__",
      "path": "src/struct_tools/__init__.py",
      "category": "cli",
      "module_doc": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n\u042d\u0442\u043e\u0442 \u043f\u0430\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f:\n- \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 struct.json\n- \u0420\u0430\u0431\u043e\u0442\u044b \u0441 modular index (.llmstruct_index/)\n- \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430  \n- \u041e\u0446\u0435\u043d\u043a\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430\n- \u0410\u043d\u0430\u043b\u0438\u0437\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 call graphs",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "StructureAnalyzer",
        "StructureCLI",
        "StructureConfig",
        "cli_interface",
        "structure_analyzer"
      ],
      "hash": "b0756092205908aa270fe5bbe802e388145c4e7f458c4f96a738f4d5c0e5fcc1",
      "artifact_id": "2d04eff3-2d43-4f80-b36c-15e470c7e323"
    },
    {
      "module_id": "src.struct_tools.cli_interface",
      "path": "src/struct_tools/cli_interface.py",
      "category": "core",
      "module_doc": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f CLI",
          "line_range": [
            383,
            386
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            22,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "initialize_analyzer",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            159,
            172
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_generate",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            174,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_overview",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            190,
            213
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_module",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            215,
            285
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_search",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            287,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_callers",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            310,
            335
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_report",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            337,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
          "line_range": [
            350,
            380
          ],
          "parameters": [
            "self",
            "argv"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureCLI",
          "docstring": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c",
          "line_range": [
            15,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_parser",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
              "line_range": [
                22,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "verbose"
              ]
            },
            {
              "name": "initialize_analyzer",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                159,
                172
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_generate",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                174,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_overview",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                190,
                213
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_module",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                215,
                285
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_search",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                287,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_callers",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                310,
                335
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_report",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                337,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
              "line_range": [
                350,
                380
              ],
              "parameters": [
                "self",
                "argv"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger"
        ],
        "create_parser": [
          "Path",
          "mod_parser.add_argument",
          "report_parser.add_argument",
          "callers_parser.add_argument",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "gen_parser.add_argument",
          "search_parser.add_argument"
        ],
        "setup_logging": [
          "logging.basicConfig"
        ],
        "initialize_analyzer": [
          "StructureAnalyzer",
          "StructureConfig",
          "hasattr"
        ],
        "cmd_generate": [
          "print"
        ],
        "cmd_overview": [
          "print"
        ],
        "cmd_module": [
          "print"
        ],
        "cmd_search": [
          "len",
          "print"
        ],
        "cmd_callers": [
          "len",
          "print"
        ],
        "cmd_report": [
          "print"
        ],
        "run": [
          "self.cmd_callers",
          "print",
          "parser.parse_args",
          "self.setup_logging",
          "self.cmd_module",
          "parser.print_help",
          "self.initialize_analyzer",
          "self.cmd_generate",
          "self.cmd_overview",
          "self.cmd_search",
          "self.create_parser",
          "self.cmd_report"
        ],
        "main": [
          "StructureCLI",
          "cli.run"
        ]
      },
      "dependencies": [
        "Optional",
        "Path",
        "StructureAnalyzer",
        "StructureConfig",
        "argparse",
        "json",
        "logging",
        "pathlib",
        "structure_analyzer",
        "sys",
        "typing"
      ],
      "hash": "3ada7ae986e24db35a509f66751ae1b53710ffaa9135c7aced362404fdf7917e",
      "artifact_id": "33eb4f69-a988-469b-b978-3a13932dcd01"
    },
    {
      "module_id": "src.rag_context.active_knowledge_integration",
      "path": "src/rag_context/active_knowledge_integration.py",
      "category": "core",
      "module_doc": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation\nIntegrates Phase 4A.2.1 (extraction), 4A.2.2 (discovery), 4A.2.3 (context) into active workflow.",
      "functions": [
        {
          "name": "create_active_integrator",
          "docstring": "Create active integrator safely",
          "line_range": [
            456,
            467
          ],
          "parameters": [
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            55,
            71
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "start_active_session",
          "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
          "line_range": [
            73,
            112
          ],
          "parameters": [
            "self",
            "task_description",
            "files_involved"
          ],
          "decorators": []
        },
        {
          "name": "get_contextual_suggestions",
          "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
          "line_range": [
            114,
            149
          ],
          "parameters": [
            "self",
            "current_code",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "notify_solution_implemented",
          "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
          "line_range": [
            151,
            192
          ],
          "parameters": [
            "self",
            "solution_description",
            "code_snippet"
          ],
          "decorators": []
        },
        {
          "name": "suggest_related_sessions",
          "docstring": "Suggest related sessions that might have relevant context.",
          "line_range": [
            194,
            239
          ],
          "parameters": [
            "self",
            "current_problem"
          ],
          "decorators": []
        },
        {
          "name": "_generate_proactive_suggestions",
          "docstring": "Generate proactive suggestions for a new task",
          "line_range": [
            241,
            258
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_convert_discovery_to_suggestions",
          "docstring": "Convert discovery results to knowledge suggestions",
          "line_range": [
            260,
            281
          ],
          "parameters": [
            "self",
            "discovery_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_based_suggestions",
          "docstring": "Get suggestions based on previous session contexts",
          "line_range": [
            283,
            307
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_based_suggestions",
          "docstring": "Get suggestions based on current file context",
          "line_range": [
            309,
            327
          ],
          "parameters": [
            "self",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on problem type",
          "line_range": [
            329,
            350
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_classify_problem_type",
          "docstring": "Classify problem type from task description",
          "line_range": [
            352,
            365
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_save_solution_pattern",
          "docstring": "Save new solution pattern to knowledge base",
          "line_range": [
            367,
            389
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "_log_session_event",
          "docstring": "Log session events for integration tracking",
          "line_range": [
            391,
            407
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "_suggestion_to_dict",
          "docstring": "Convert suggestion to dict for JSON serialization",
          "line_range": [
            409,
            418
          ],
          "parameters": [
            "self",
            "suggestion"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_stats",
          "docstring": "Get integration system statistics",
          "line_range": [
            420,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable integration system safely",
          "line_range": [
            444,
            448
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable integration system",
          "line_range": [
            450,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "KnowledgeSuggestion",
          "docstring": "Proactive knowledge suggestion for active workflow",
          "line_range": [
            17,
            24
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveSessionState",
          "docstring": "Current active session state for context-aware suggestions",
          "line_range": [
            28,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveKnowledgeIntegrator",
          "docstring": "Active Knowledge Integration system - the intelligence layer.\n\nBrings together all knowledge preservation components into active workflow:\n- Proactive suggestions during coding\n- \"You solved this before\" notifications  \n- Auto-tagging of new solutions\n- Smart context switching\n\nSafe design principles:\n- Builds on all previous Phase 4A.2.1-3 components\n- Non-intrusive suggestions (can be ignored)\n- Performance-conscious (fast suggestions)\n- Easy disable without workflow disruption",
          "line_range": [
            38,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                55,
                71
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery",
                "context_manager"
              ]
            },
            {
              "name": "start_active_session",
              "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
              "line_range": [
                73,
                112
              ],
              "parameters": [
                "self",
                "task_description",
                "files_involved"
              ]
            },
            {
              "name": "get_contextual_suggestions",
              "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
              "line_range": [
                114,
                149
              ],
              "parameters": [
                "self",
                "current_code",
                "current_file"
              ]
            },
            {
              "name": "notify_solution_implemented",
              "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
              "line_range": [
                151,
                192
              ],
              "parameters": [
                "self",
                "solution_description",
                "code_snippet"
              ]
            },
            {
              "name": "suggest_related_sessions",
              "docstring": "Suggest related sessions that might have relevant context.",
              "line_range": [
                194,
                239
              ],
              "parameters": [
                "self",
                "current_problem"
              ]
            },
            {
              "name": "_generate_proactive_suggestions",
              "docstring": "Generate proactive suggestions for a new task",
              "line_range": [
                241,
                258
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_convert_discovery_to_suggestions",
              "docstring": "Convert discovery results to knowledge suggestions",
              "line_range": [
                260,
                281
              ],
              "parameters": [
                "self",
                "discovery_result"
              ]
            },
            {
              "name": "_get_context_based_suggestions",
              "docstring": "Get suggestions based on previous session contexts",
              "line_range": [
                283,
                307
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_get_file_based_suggestions",
              "docstring": "Get suggestions based on current file context",
              "line_range": [
                309,
                327
              ],
              "parameters": [
                "self",
                "current_file"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on problem type",
              "line_range": [
                329,
                350
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_classify_problem_type",
              "docstring": "Classify problem type from task description",
              "line_range": [
                352,
                365
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_save_solution_pattern",
              "docstring": "Save new solution pattern to knowledge base",
              "line_range": [
                367,
                389
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "_log_session_event",
              "docstring": "Log session events for integration tracking",
              "line_range": [
                391,
                407
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "_suggestion_to_dict",
              "docstring": "Convert suggestion to dict for JSON serialization",
              "line_range": [
                409,
                418
              ],
              "parameters": [
                "self",
                "suggestion"
              ]
            },
            {
              "name": "get_integration_stats",
              "docstring": "Get integration system statistics",
              "line_range": [
                420,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable integration system safely",
              "line_range": [
                444,
                448
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable integration system",
              "line_range": [
                450,
                452
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "SessionContextManager",
          "SafeKnowledgeExtractor",
          "SmartCodeDiscovery",
          "Path"
        ],
        "start_active_session": [
          "len",
          "str",
          "self._classify_problem_type",
          "ActiveSessionState",
          "self._log_session_event",
          "int",
          "self._suggestion_to_dict",
          "self._generate_proactive_suggestions",
          "time.time"
        ],
        "get_contextual_suggestions": [
          "sorted",
          "suggestions.extend",
          "self._get_context_based_suggestions",
          "self._convert_discovery_to_suggestions",
          "self._get_file_based_suggestions"
        ],
        "notify_solution_implemented": [
          "str",
          "self._log_session_event",
          "int",
          "time.time",
          "self._save_solution_pattern"
        ],
        "suggest_related_sessions": [
          "Path",
          "len",
          "set",
          "open",
          "context_stats.get",
          "json.load",
          "current_problem.lower",
          "description.split",
          "related_sessions.append",
          "snapshot.get",
          "related_sessions.sort",
          "bool"
        ],
        "_generate_proactive_suggestions": [
          "suggestions.extend",
          "self._convert_discovery_to_suggestions",
          "self._classify_problem_type",
          "self._get_workflow_suggestions"
        ],
        "_convert_discovery_to_suggestions": [
          "Path",
          "len",
          "KnowledgeSuggestion",
          "enumerate",
          "suggestions.append"
        ],
        "_get_context_based_suggestions": [
          "min",
          "KnowledgeSuggestion",
          "suggestions.append",
          "self.suggest_related_sessions"
        ],
        "_get_file_based_suggestions": [
          "Path",
          "KnowledgeSuggestion",
          "suggestions.append"
        ],
        "_get_workflow_suggestions": [
          "problem_type.title",
          "KnowledgeSuggestion",
          "suggestions.append"
        ],
        "_classify_problem_type": [
          "any",
          "task_description.lower"
        ],
        "_save_solution_pattern": [
          "Path",
          "patterns_file.exists",
          "open",
          "json.dump",
          "patterns.append",
          "json.load"
        ],
        "_log_session_event": [
          "open",
          "time.time",
          "json.dumps",
          "f.write"
        ],
        "_suggestion_to_dict": [],
        "get_integration_stats": [
          "log_file.exists",
          "open",
          "sum"
        ],
        "disable": [
          "self._log_session_event"
        ],
        "enable": [],
        "create_active_integrator": [
          "print",
          "integrator.disable",
          "ActiveKnowledgeIntegrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "DiscoveryResult",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SessionContextManager",
        "SmartCodeDiscovery",
        "Tuple",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "session_context_manager",
        "time",
        "typing"
      ],
      "hash": "80e046baa4fc0e0d227447432806987fef70e8ec0dab38f131cdb0160f876c92",
      "artifact_id": "e4256d03-62ef-4c23-9c31-4f319fb2f434"
    },
    {
      "module_id": "src.rag_context.cursor_intelligence",
      "path": "src/rag_context/cursor_intelligence.py",
      "category": "core",
      "module_doc": "Cursor Intelligence System for Workflow Enhancement\n\nPhase 4A.4: Intelligent synthesis of Cursor history patterns for enhanced development workflow.\nIntegrates with Phase 4A.2 Knowledge Preservation System for comprehensive intelligence.",
      "functions": [
        {
          "name": "create_cursor_intelligence",
          "docstring": "Create and initialize Cursor Intelligence System",
          "line_range": [
            278,
            280
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_module_placement",
          "docstring": "Suggest optimal module placement based on architectural patterns",
          "line_range": [
            49,
            68
          ],
          "parameters": [
            "self",
            "functionality_description"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_pattern_relevance",
          "docstring": "Calculate how relevant patterns are to description",
          "line_range": [
            70,
            74
          ],
          "parameters": [
            "self",
            "description",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            84,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_workflow_context",
          "docstring": "Comprehensive workflow analysis combining all intelligence sources",
          "line_range": [
            90,
            148
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_proactive_suggestions",
          "docstring": "Get proactive suggestions based on current session state",
          "line_range": [
            150,
            170
          ],
          "parameters": [
            "self",
            "session_state"
          ],
          "decorators": []
        },
        {
          "name": "_assess_complexity",
          "docstring": "Assess task complexity",
          "line_range": [
            172,
            187
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_assess_quality_risk",
          "docstring": "Assess quality risk (0.0 to 1.0)",
          "line_range": [
            189,
            197
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_time",
          "docstring": "Estimate implementation time",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "self",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_get_recommended_approach",
          "docstring": "Get recommended implementation approach",
          "line_range": [
            208,
            227
          ],
          "parameters": [
            "self",
            "complexity",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_risk_factors",
          "docstring": "Get risk factors based on risk level",
          "line_range": [
            229,
            236
          ],
          "parameters": [
            "self",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_success_factors",
          "docstring": "Get success factors",
          "line_range": [
            238,
            247
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_insight_to_dict",
          "docstring": "Convert insight to dictionary format",
          "line_range": [
            249,
            259
          ],
          "parameters": [
            "self",
            "insight"
          ],
          "decorators": []
        },
        {
          "name": "_generate_summary",
          "docstring": "Generate human-readable summary",
          "line_range": [
            261,
            276
          ],
          "parameters": [
            "self",
            "insights",
            "prediction"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "IntelligenceInsight",
          "docstring": "Single intelligence insight from pattern analysis",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "WorkflowPrediction",
          "docstring": "Prediction about workflow complexity and quality",
          "line_range": [
            29,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ArchitecturalIntelligence",
          "docstring": "Intelligence patterns from architectural analysis",
          "line_range": [
            38,
            74
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_module_placement",
              "docstring": "Suggest optimal module placement based on architectural patterns",
              "line_range": [
                49,
                68
              ],
              "parameters": [
                "self",
                "functionality_description"
              ]
            },
            {
              "name": "_calculate_pattern_relevance",
              "docstring": "Calculate how relevant patterns are to description",
              "line_range": [
                70,
                74
              ],
              "parameters": [
                "self",
                "description",
                "patterns"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntelligenceOrchestrator",
          "docstring": "Main orchestrator for Cursor Intelligence System\n\nSynthesizes all intelligence patterns for comprehensive workflow enhancement.\nIntegrates with Phase 4A.2 Knowledge Preservation System.",
          "line_range": [
            76,
            276
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                84,
                88
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_workflow_context",
              "docstring": "Comprehensive workflow analysis combining all intelligence sources",
              "line_range": [
                90,
                148
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "get_proactive_suggestions",
              "docstring": "Get proactive suggestions based on current session state",
              "line_range": [
                150,
                170
              ],
              "parameters": [
                "self",
                "session_state"
              ]
            },
            {
              "name": "_assess_complexity",
              "docstring": "Assess task complexity",
              "line_range": [
                172,
                187
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_assess_quality_risk",
              "docstring": "Assess quality risk (0.0 to 1.0)",
              "line_range": [
                189,
                197
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_time",
              "docstring": "Estimate implementation time",
              "line_range": [
                199,
                206
              ],
              "parameters": [
                "self",
                "complexity"
              ]
            },
            {
              "name": "_get_recommended_approach",
              "docstring": "Get recommended implementation approach",
              "line_range": [
                208,
                227
              ],
              "parameters": [
                "self",
                "complexity",
                "risk"
              ]
            },
            {
              "name": "_get_risk_factors",
              "docstring": "Get risk factors based on risk level",
              "line_range": [
                229,
                236
              ],
              "parameters": [
                "self",
                "risk"
              ]
            },
            {
              "name": "_get_success_factors",
              "docstring": "Get success factors",
              "line_range": [
                238,
                247
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_insight_to_dict",
              "docstring": "Convert insight to dictionary format",
              "line_range": [
                249,
                259
              ],
              "parameters": [
                "self",
                "insight"
              ]
            },
            {
              "name": "_generate_summary",
              "docstring": "Generate human-readable summary",
              "line_range": [
                261,
                276
              ],
              "parameters": [
                "self",
                "insights",
                "prediction"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "ArchitecturalIntelligence"
        ],
        "suggest_module_placement": [
          "self._calculate_pattern_relevance",
          "insights.append",
          "IntelligenceInsight",
          "category.lower"
        ],
        "_calculate_pattern_relevance": [
          "sum",
          "len",
          "min",
          "pattern.lower",
          "description.lower"
        ],
        "analyze_workflow_context": [
          "WorkflowPrediction",
          "len",
          "self._insight_to_dict",
          "str",
          "self._generate_summary",
          "self._assess_quality_risk",
          "self._get_success_factors",
          "self._estimate_time",
          "logger.info",
          "self._assess_complexity",
          "logger.error",
          "self._get_risk_factors",
          "context.get",
          "datetime.now",
          "self._get_recommended_approach",
          "bool"
        ],
        "get_proactive_suggestions": [
          "str",
          "any",
          "suggestions.append"
        ],
        "_assess_complexity": [
          "sum",
          "str",
          "len"
        ],
        "_assess_quality_risk": [
          "sum",
          "str",
          "min",
          "len"
        ],
        "_estimate_time": [
          "time_mapping.get"
        ],
        "_get_recommended_approach": [
          "approach.extend"
        ],
        "_get_risk_factors": [],
        "_get_success_factors": [
          "factors.append",
          "str"
        ],
        "_insight_to_dict": [],
        "_generate_summary": [
          "len"
        ],
        "create_cursor_intelligence": [
          "CursorIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "df53087815726c54c0bb11a7c2de0495692fc727dbec2f09f94575ddb7ff5c3f",
      "artifact_id": "80bced99-8f3f-4431-a607-cab33b13f3a0"
    },
    {
      "module_id": "src.rag_context.knowledge_extractor",
      "path": "src/rag_context/knowledge_extractor.py",
      "category": "core",
      "module_doc": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation\nBuilds on existing RAG infrastructure without breaking existing tools.\nLessons learned from struct tools issues applied.",
      "functions": [
        {
          "name": "create_knowledge_extractor",
          "docstring": "Create knowledge extractor safely",
          "line_range": [
            164,
            173
          ],
          "parameters": [
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing enhancer",
          "line_range": [
            50,
            61
          ],
          "parameters": [
            "self",
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "extract_code_knowledge",
          "docstring": "Extract code knowledge safely",
          "line_range": [
            63,
            85
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_patterns_from_document",
          "docstring": "Extract patterns from document",
          "line_range": [
            87,
            108
          ],
          "parameters": [
            "self",
            "doc"
          ],
          "decorators": []
        },
        {
          "name": "_save_patterns",
          "docstring": "Save patterns to JSON",
          "line_range": [
            110,
            131
          ],
          "parameters": [
            "self",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "get_extraction_stats",
          "docstring": "Get extraction statistics",
          "line_range": [
            133,
            152
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable safely",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable knowledge extraction",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CodePattern",
          "docstring": "Extracted code pattern for knowledge base",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "KnowledgeExtractionResult",
          "docstring": "Result of knowledge extraction operation",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SafeKnowledgeExtractor",
          "docstring": "Safe knowledge extractor that builds on existing RAG infrastructure.\n\nDesign principles:\n- NO breaking changes to existing components\n- Graceful fallbacks if anything fails  \n- Self-contained with minimal dependencies\n- Can be disabled without trace",
          "line_range": [
            39,
            160
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing enhancer",
              "line_range": [
                50,
                61
              ],
              "parameters": [
                "self",
                "enhancer"
              ]
            },
            {
              "name": "extract_code_knowledge",
              "docstring": "Extract code knowledge safely",
              "line_range": [
                63,
                85
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_patterns_from_document",
              "docstring": "Extract patterns from document",
              "line_range": [
                87,
                108
              ],
              "parameters": [
                "self",
                "doc"
              ]
            },
            {
              "name": "_save_patterns",
              "docstring": "Save patterns to JSON",
              "line_range": [
                110,
                131
              ],
              "parameters": [
                "self",
                "patterns"
              ]
            },
            {
              "name": "get_extraction_stats",
              "docstring": "Get extraction statistics",
              "line_range": [
                133,
                152
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable safely",
              "line_range": [
                154,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable knowledge extraction",
              "line_range": [
                158,
                160
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "PromptEnhancer"
        ],
        "extract_code_knowledge": [
          "len",
          "str",
          "patterns.extend",
          "self._extract_patterns_from_document",
          "self._save_patterns",
          "time.time"
        ],
        "_extract_patterns_from_document": [
          "patterns.append",
          "CodePattern",
          "content.split",
          "line.strip",
          "enumerate"
        ],
        "_save_patterns": [
          "open",
          "patterns_data.append",
          "time.time",
          "json.dump"
        ],
        "get_extraction_stats": [
          "patterns_file.exists",
          "open",
          "len",
          "json.load"
        ],
        "disable": [],
        "enable": [],
        "create_knowledge_extractor": [
          "extractor.disable",
          "SafeKnowledgeExtractor",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "dataclass",
        "dataclasses",
        "enhancer",
        "json",
        "loader",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9d90819f91f32cb6cb28ee6a06ffa952263058f6d93b48662014299b2cc3fd6f",
      "artifact_id": "cbf3223b-8483-46cb-a2e8-73968bb8ab2c"
    },
    {
      "module_id": "src.rag_context.code_discovery",
      "path": "src/rag_context/code_discovery.py",
      "category": "core",
      "module_doc": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation\nBuilds on Phase 4A.2.1 knowledge extraction safely.",
      "functions": [
        {
          "name": "create_discovery_system",
          "docstring": "Create discovery system safely",
          "line_range": [
            266,
            275
          ],
          "parameters": [
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing extractor",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self",
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "search_solutions",
          "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
          "line_range": [
            42,
            91
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_load_patterns_safely",
          "docstring": "Load patterns from JSON safely",
          "line_range": [
            93,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_search_patterns_simple",
          "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
          "line_range": [
            122,
            172
          ],
          "parameters": [
            "self",
            "query",
            "patterns",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_generate_suggestions",
          "docstring": "Generate practical suggestions based on found patterns",
          "line_range": [
            174,
            204
          ],
          "parameters": [
            "self",
            "query",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "quick_search",
          "docstring": "Quick keyword-based search for rapid discovery",
          "line_range": [
            206,
            233
          ],
          "parameters": [
            "self",
            "keywords"
          ],
          "decorators": []
        },
        {
          "name": "get_discovery_stats",
          "docstring": "Get discovery system statistics",
          "line_range": [
            235,
            254
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable discovery system safely",
          "line_range": [
            256,
            258
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable discovery system",
          "line_range": [
            260,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DiscoveryResult",
          "docstring": "Result of code discovery search",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartCodeDiscovery",
          "docstring": "Smart code discovery system for \"Have I solved this before?\" queries.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1 infrastructure\n- No breaking changes to existing components\n- Graceful degradation if knowledge base missing\n- Simple text search (no complex NLP that could break)",
          "line_range": [
            24,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing extractor",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self",
                "extractor"
              ]
            },
            {
              "name": "search_solutions",
              "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
              "line_range": [
                42,
                91
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_load_patterns_safely",
              "docstring": "Load patterns from JSON safely",
              "line_range": [
                93,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_search_patterns_simple",
              "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
              "line_range": [
                122,
                172
              ],
              "parameters": [
                "self",
                "query",
                "patterns",
                "max_results"
              ]
            },
            {
              "name": "_generate_suggestions",
              "docstring": "Generate practical suggestions based on found patterns",
              "line_range": [
                174,
                204
              ],
              "parameters": [
                "self",
                "query",
                "patterns"
              ]
            },
            {
              "name": "quick_search",
              "docstring": "Quick keyword-based search for rapid discovery",
              "line_range": [
                206,
                233
              ],
              "parameters": [
                "self",
                "keywords"
              ]
            },
            {
              "name": "get_discovery_stats",
              "docstring": "Get discovery system statistics",
              "line_range": [
                235,
                254
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable discovery system safely",
              "line_range": [
                256,
                258
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable discovery system",
              "line_range": [
                260,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SafeKnowledgeExtractor"
        ],
        "search_solutions": [
          "self._load_patterns_safely",
          "self._search_patterns_simple",
          "DiscoveryResult",
          "self._generate_suggestions",
          "time.time"
        ],
        "_load_patterns_safely": [
          "patterns_file.exists",
          "item.get",
          "open",
          "json.load",
          "patterns.append",
          "CodePattern"
        ],
        "_search_patterns_simple": [
          "Path",
          "set",
          "pattern_scores.sort",
          "any",
          "pattern_scores.append",
          "query_lower.split",
          "query.lower"
        ],
        "_generate_suggestions": [
          "Path",
          "len",
          "set",
          "list",
          "any",
          "name.lower",
          "suggestions.append"
        ],
        "quick_search": [
          "Path",
          "str",
          "self._load_patterns_safely",
          "keyword.lower",
          "matches.append",
          "time.time"
        ],
        "get_discovery_stats": [
          "patterns_file.exists",
          "open",
          "len",
          "json.load"
        ],
        "disable": [],
        "enable": [],
        "create_discovery_system": [
          "discovery.disable",
          "SmartCodeDiscovery",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CodePattern",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "Tuple",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "6cbc46e2dd7df1aad1c053912305e81c765be1c724588114984d7c2c39c1460b",
      "artifact_id": "572d6e6d-16f4-4547-8a28-d3fd59490dfe"
    },
    {
      "module_id": "src.rag_context.embedder",
      "path": "src/rag_context/embedder.py",
      "category": "core",
      "module_doc": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "parameters": [
            "self",
            "model_name",
            "cache_dir"
          ],
          "decorators": []
        },
        {
          "name": "model",
          "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "embed_text",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            32,
            54
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "embed_batch",
          "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            56,
            91
          ],
          "parameters": [
            "self",
            "texts"
          ],
          "decorators": []
        },
        {
          "name": "_hash_text",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            93,
            95
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_cache",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            97,
            105
          ],
          "parameters": [
            "self",
            "text_hash"
          ],
          "decorators": []
        },
        {
          "name": "_save_to_cache",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            107,
            125
          ],
          "parameters": [
            "self",
            "text_hash",
            "embedding",
            "text_preview"
          ],
          "decorators": []
        },
        {
          "name": "similarity",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
          "line_range": [
            127,
            129
          ],
          "parameters": [
            "self",
            "embedding1",
            "embedding2"
          ],
          "decorators": []
        },
        {
          "name": "find_most_similar",
          "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
          "line_range": [
            131,
            144
          ],
          "parameters": [
            "self",
            "query_embedding",
            "candidate_embeddings",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
          "line_range": [
            146,
            153
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleEmbedder",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 embeddings \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            13,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                22
              ],
              "parameters": [
                "self",
                "model_name",
                "cache_dir"
              ]
            },
            {
              "name": "model",
              "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
              "line_range": [
                25,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "embed_text",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
              "line_range": [
                32,
                54
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "embed_batch",
              "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                56,
                91
              ],
              "parameters": [
                "self",
                "texts"
              ]
            },
            {
              "name": "_hash_text",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                93,
                95
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_load_from_cache",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                97,
                105
              ],
              "parameters": [
                "self",
                "text_hash"
              ]
            },
            {
              "name": "_save_to_cache",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                107,
                125
              ],
              "parameters": [
                "self",
                "text_hash",
                "embedding",
                "text_preview"
              ]
            },
            {
              "name": "similarity",
              "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
              "line_range": [
                127,
                129
              ],
              "parameters": [
                "self",
                "embedding1",
                "embedding2"
              ]
            },
            {
              "name": "find_most_similar",
              "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
              "line_range": [
                131,
                144
              ],
              "parameters": [
                "self",
                "query_embedding",
                "candidate_embeddings",
                "threshold"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
              "line_range": [
                146,
                153
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "model": [
          "print",
          "SentenceTransformer"
        ],
        "embed_text": [
          "self._save_to_cache",
          "self._load_from_cache",
          "self._hash_text"
        ],
        "embed_batch": [
          "self._save_to_cache",
          "len",
          "print",
          "self._hash_text",
          "range",
          "zip",
          "new_indices.append",
          "new_texts.append",
          "enumerate",
          "self._load_from_cache"
        ],
        "_hash_text": [
          "hashlib.md5",
          "text.encode"
        ],
        "_load_from_cache": [
          "cache_file.exists",
          "print",
          "np.load"
        ],
        "_save_to_cache": [
          "open",
          "print",
          "json.dump",
          "np.save"
        ],
        "similarity": [
          "float",
          "np.dot"
        ],
        "find_most_similar": [
          "self.similarity",
          "enumerate",
          "similarities.sort",
          "similarities.append"
        ],
        "get_cache_stats": [
          "sum",
          "len",
          "list",
          "f.stat"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "SentenceTransformer",
        "Tuple",
        "hashlib",
        "json",
        "numpy",
        "os",
        "pathlib",
        "sentence_transformers",
        "typing"
      ],
      "hash": "d229d61d5b3f22f6b3f7c1b0b0efd293a16f13e53eb3391b24951b70fece349e",
      "artifact_id": "1875da44-9dae-4985-9099-38f1c789f5bc"
    },
    {
      "module_id": "src.rag_context.enhanced_logging_intelligence",
      "path": "src/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "create_enhanced_logging_intelligence",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_current_session",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionMetrics",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "EnhancedLoggingIntelligenceOrchestrator",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_current_session",
              "docstring": "",
              "line_range": [
                21,
                22
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "logger.info"
        ],
        "analyze_current_session": [],
        "create_enhanced_logging_intelligence": [
          "EnhancedLoggingIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "e5889a76316632b70966b6729f89187fe4510d5a0fd37ff3ae20505cf53aae3f",
      "artifact_id": "ca6f8348-d548-4946-80db-4adb2a77b76a"
    },
    {
      "module_id": "src.rag_context.enhancer",
      "path": "src/rag_context/enhancer.py",
      "category": "core",
      "module_doc": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            33
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "initialize",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            35,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enhance",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            66,
            93
          ],
          "parameters": [
            "self",
            "task_text",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_load_all_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            95,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_build_enhanced_prompt",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            118,
            169
          ],
          "parameters": [
            "self",
            "original_task",
            "relevant_results",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            171,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            191,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PromptEnhancer",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 RAG",
          "line_range": [
            13,
            195
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                33
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "initialize",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                35,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enhance",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                66,
                93
              ],
              "parameters": [
                "self",
                "task_text",
                "context"
              ]
            },
            {
              "name": "_load_all_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                95,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_build_enhanced_prompt",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
              "line_range": [
                118,
                169
              ],
              "parameters": [
                "self",
                "original_task",
                "relevant_results",
                "context"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                171,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refresh_index",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                191,
                195
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "ContextRetriever",
          "SimpleEmbedder"
        ],
        "initialize": [
          "len",
          "print",
          "self._load_all_documents",
          "time.time"
        ],
        "enhance": [
          "self.initialize",
          "print",
          "self._build_enhanced_prompt"
        ],
        "_load_all_documents": [
          "len",
          "rules_loader.load_documents",
          "print",
          "RulesLoader",
          "documents.extend",
          "StructLoader",
          "documents.append",
          "struct_loader.load_document"
        ],
        "_build_enhanced_prompt": [
          "len",
          "context.items",
          "struct_context.append",
          "rules_context.append",
          "prompt_parts.append",
          "prompt_parts.extend"
        ],
        "get_stats": [
          "stats.update"
        ],
        "refresh_index": [
          "self.initialize",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "ContextRetriever",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "RAGConfig",
        "RetrievalResult",
        "RulesLoader",
        "SimpleEmbedder",
        "StructLoader",
        "config",
        "embedder",
        "loader",
        "pathlib",
        "retriever",
        "time",
        "typing"
      ],
      "hash": "8d2cfa893f488404c7818ec2ac83342e72863d59d3aed1de2b460c729d015f12",
      "artifact_id": "40e40f53-b54b-4527-93f3-83ef4e70916d"
    },
    {
      "module_id": "src.rag_context.loader",
      "path": "src/rag_context/loader.py",
      "category": "core",
      "module_doc": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            27
          ],
          "parameters": [
            "self",
            "rules_dir",
            "extensions",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "load_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            29,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_rule_files",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            46,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_rule_file",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            68,
            93
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_clean_markdown",
          "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
          "line_range": [
            95,
            109
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_metadata",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            130,
            131
          ],
          "parameters": [
            "self",
            "struct_json"
          ],
          "decorators": []
        },
        {
          "name": "load_document",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
          "line_range": [
            133,
            161
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_format_struct_content",
          "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
          "line_range": [
            163,
            189
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Document",
          "docstring": "\u0423\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            13,
            18
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RulesLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u043f\u0440\u0430\u0432\u0438\u043b \u0438\u0437 .cursor/rules",
          "line_range": [
            21,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                27
              ],
              "parameters": [
                "self",
                "rules_dir",
                "extensions",
                "exclude_patterns"
              ]
            },
            {
              "name": "load_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                29,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_rule_files",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                46,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_rule_file",
              "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                68,
                93
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_clean_markdown",
              "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
              "line_range": [
                95,
                109
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_metadata",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "content"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            127,
            189
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                130,
                131
              ],
              "parameters": [
                "self",
                "struct_json"
              ]
            },
            {
              "name": "load_document",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
              "line_range": [
                133,
                161
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_format_struct_content",
              "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
              "line_range": [
                163,
                189
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_documents": [
          "self._parse_rule_file",
          "documents.append",
          "print",
          "self._get_rule_files"
        ],
        "_get_rule_files": [
          "filtered_files.append",
          "files.extend",
          "set",
          "list",
          "fnmatch.fnmatch"
        ],
        "_parse_rule_file": [
          "str",
          "self._clean_markdown",
          "self._extract_metadata",
          "print",
          "metadata.update",
          "Document",
          "file_path.stat",
          "file_path.read_text"
        ],
        "_clean_markdown": [
          "line.replace",
          "clean_line.replace",
          "clean_line.strip",
          "content.split",
          "line.strip",
          "cleaned_lines.append"
        ],
        "_extract_metadata": [
          "line.startswith",
          "content.split",
          "line.split"
        ],
        "load_document": [
          "len",
          "str",
          "open",
          "print",
          "json.load",
          "struct_data.get",
          "Document",
          "self._format_struct_content"
        ],
        "_format_struct_content": [
          "content_parts.append",
          "ep_data.get",
          "comp_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "BeautifulSoup",
        "Comment",
        "Dict",
        "List",
        "Optional",
        "Path",
        "bs4",
        "dataclass",
        "dataclasses",
        "fnmatch",
        "json",
        "pathlib",
        "typing"
      ],
      "hash": "fa67b66a2df9b0a735345eed1628571710a243564f5fe9313f7ef8552bccbe91",
      "artifact_id": "7c05e440-1c15-4ec8-931e-7ed3e10369f9"
    },
    {
      "module_id": "src.rag_context.__init__",
      "path": "src/rag_context/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Enhancement System\n\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 AI-\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \n\u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438\u0437 .cursor/rules \u0438 struct.json",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "PromptEnhancer",
        "RAGConfig",
        "config",
        "enhancer"
      ],
      "hash": "5ac7f7467ea4bcc73c1433be7e9694c8079808150e2e8e8694c10ec1bd963272",
      "artifact_id": "6113742a-756c-4282-908f-04d5d7338b58"
    },
    {
      "module_id": "src.rag_context.config",
      "path": "src/rag_context/config.py",
      "category": "core",
      "module_doc": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
          "line_range": [
            33,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "has_struct_support",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            59,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        }
      ],
      "classes": [
        {
          "name": "RAGConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f RAG Context Enhancement",
          "line_range": [
            9,
            61
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
              "line_range": [
                33,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "has_struct_support",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                59,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "print"
        ],
        "is_valid": [],
        "has_struct_support": []
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "pathlib",
        "typing"
      ],
      "hash": "8712b8b3a7612eaa6ee083d23b6262f104f0854308b5ef9e98c964a516d649ab",
      "artifact_id": "bd2f6250-e588-4228-89fe-0ae70cc5caa7"
    },
    {
      "module_id": "src.rag_context.session_context_manager",
      "path": "src/rag_context/session_context_manager.py",
      "category": "core",
      "module_doc": "Session Context Manager - Phase 4A.2.3 Safe Implementation\nBuilds on Phase 4A.2.1 (knowledge extraction) and 4A.2.2 (discovery) safely.",
      "functions": [
        {
          "name": "create_context_manager",
          "docstring": "Create context manager safely",
          "line_range": [
            377,
            387
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "create_session_context_manager",
          "docstring": "Create session context manager safely (alias for create_context_manager)",
          "line_range": [
            390,
            393
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            52,
            67
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "extract_session_context",
          "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
          "line_range": [
            69,
            121
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_files_safely",
          "docstring": "Get session files safely",
          "line_range": [
            123,
            142
          ],
          "parameters": [
            "self",
            "specific_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_from_session",
          "docstring": "Extract context from a single session file (simple implementation)",
          "line_range": [
            144,
            188
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_session_description",
          "docstring": "Extract session description from data",
          "line_range": [
            190,
            197
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_decisions",
          "docstring": "Extract key decisions from session data",
          "line_range": [
            199,
            209
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_reasoning",
          "docstring": "Extract reasoning chains from session data",
          "line_range": [
            211,
            225
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_problem_type",
          "docstring": "Extract problem type from session data",
          "line_range": [
            227,
            243
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_solutions",
          "docstring": "Extract solutions used from session data",
          "line_range": [
            245,
            251
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_files",
          "docstring": "Extract relevant context files from session data",
          "line_range": [
            253,
            265
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_generate_restoration_prompt",
          "docstring": "Generate restoration prompt for session context",
          "line_range": [
            267,
            292
          ],
          "parameters": [
            "self",
            "description",
            "decisions",
            "reasoning",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_save_snapshots_safely",
          "docstring": "Save session snapshots to JSON safely",
          "line_range": [
            294,
            316
          ],
          "parameters": [
            "self",
            "snapshots"
          ],
          "decorators": []
        },
        {
          "name": "restore_session_context",
          "docstring": "Restore context for a specific session",
          "line_range": [
            318,
            337
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_context_stats",
          "docstring": "Get context management statistics",
          "line_range": [
            339,
            365
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable context manager safely",
          "line_range": [
            367,
            369
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable context manager",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionSnapshot",
          "docstring": "Captured session context for restoration",
          "line_range": [
            17,
            27
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextExtractionResult",
          "docstring": "Result of context extraction operation",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SessionContextManager",
          "docstring": "Session Context Preservation for maintaining decision-making context.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1/4A.2.2 components\n- No breaking changes to existing session logging\n- Graceful fallback if session data unavailable\n- Simple file-based storage (no complex dependencies)",
          "line_range": [
            41,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                52,
                67
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery"
              ]
            },
            {
              "name": "extract_session_context",
              "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
              "line_range": [
                69,
                121
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_get_session_files_safely",
              "docstring": "Get session files safely",
              "line_range": [
                123,
                142
              ],
              "parameters": [
                "self",
                "specific_file"
              ]
            },
            {
              "name": "_extract_context_from_session",
              "docstring": "Extract context from a single session file (simple implementation)",
              "line_range": [
                144,
                188
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_extract_session_description",
              "docstring": "Extract session description from data",
              "line_range": [
                190,
                197
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_decisions",
              "docstring": "Extract key decisions from session data",
              "line_range": [
                199,
                209
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_reasoning",
              "docstring": "Extract reasoning chains from session data",
              "line_range": [
                211,
                225
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_problem_type",
              "docstring": "Extract problem type from session data",
              "line_range": [
                227,
                243
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_solutions",
              "docstring": "Extract solutions used from session data",
              "line_range": [
                245,
                251
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_context_files",
              "docstring": "Extract relevant context files from session data",
              "line_range": [
                253,
                265
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_generate_restoration_prompt",
              "docstring": "Generate restoration prompt for session context",
              "line_range": [
                267,
                292
              ],
              "parameters": [
                "self",
                "description",
                "decisions",
                "reasoning",
                "problem_type"
              ]
            },
            {
              "name": "_save_snapshots_safely",
              "docstring": "Save session snapshots to JSON safely",
              "line_range": [
                294,
                316
              ],
              "parameters": [
                "self",
                "snapshots"
              ]
            },
            {
              "name": "restore_session_context",
              "docstring": "Restore context for a specific session",
              "line_range": [
                318,
                337
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_context_stats",
              "docstring": "Get context management statistics",
              "line_range": [
                339,
                365
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable context manager safely",
              "line_range": [
                367,
                369
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable context manager",
              "line_range": [
                371,
                373
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SafeKnowledgeExtractor",
          "SmartCodeDiscovery"
        ],
        "extract_session_context": [
          "sum",
          "len",
          "errors.append",
          "self._get_session_files_safely",
          "self._extract_context_from_session",
          "self._save_snapshots_safely",
          "ContextExtractionResult",
          "snapshots.append",
          "time.time"
        ],
        "_get_session_files_safely": [
          "sorted",
          "file.is_file",
          "f.stat",
          "specific_file.exists",
          "session_files.append"
        ],
        "_extract_context_from_session": [
          "self._extract_session_description",
          "SessionSnapshot",
          "self._extract_context_files",
          "open",
          "session_data.append",
          "self._extract_problem_type",
          "line.strip",
          "json.loads",
          "self._generate_restoration_prompt",
          "self._extract_reasoning",
          "time.time",
          "self._extract_decisions",
          "self._extract_solutions"
        ],
        "_extract_session_description": [
          "len",
          "entry.get"
        ],
        "_extract_decisions": [
          "any",
          "entry.get",
          "decisions.append"
        ],
        "_extract_reasoning": [
          "str",
          "any",
          "reasoning.append",
          "entry.get"
        ],
        "_extract_problem_type": [
          "problem_keywords.items",
          "any",
          "entry.get"
        ],
        "_extract_solutions": [
          "solutions.append",
          "entry.get"
        ],
        "_extract_context_files": [
          "files.add",
          "set",
          "entry.get",
          "list",
          "any",
          "description.split",
          "word.strip"
        ],
        "_generate_restoration_prompt": [
          "enumerate",
          "prompt_parts.append"
        ],
        "_save_snapshots_safely": [
          "snapshots_data.append",
          "asdict",
          "open",
          "json.dump",
          "print",
          "snapshots_file.rename",
          "int",
          "snapshots_file.exists",
          "time.time"
        ],
        "restore_session_context": [
          "open",
          "snapshot_data.get",
          "json.load",
          "snapshots_file.exists"
        ],
        "get_context_stats": [
          "len",
          "open",
          "json.load",
          "snapshots_file.exists",
          "snapshot.get"
        ],
        "disable": [],
        "enable": [],
        "create_context_manager": [
          "SessionContextManager",
          "print",
          "manager.disable"
        ],
        "create_session_context_manager": [
          "create_context_manager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SmartCodeDiscovery",
        "asdict",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "57328a157757a75b8daf27a187622e30db3b463df38139e30e30205a0cc2ffc8",
      "artifact_id": "ce06367f-aacf-40d2-b4b4-941b8d3a420a"
    },
    {
      "module_id": "src.rag_context.retriever",
      "path": "src/rag_context/retriever.py",
      "category": "core",
      "module_doc": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            35
          ],
          "parameters": [
            "self",
            "embedder",
            "max_chunks",
            "similarity_threshold"
          ],
          "decorators": []
        },
        {
          "name": "index_documents",
          "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
          "line_range": [
            37,
            76
          ],
          "parameters": [
            "self",
            "documents"
          ],
          "decorators": []
        },
        {
          "name": "retrieve",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            78,
            112
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_chunk_document",
          "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
          "line_range": [
            114,
            138
          ],
          "parameters": [
            "self",
            "document",
            "chunk_size"
          ],
          "decorators": []
        },
        {
          "name": "_deduplicate_results",
          "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            140,
            154
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
          "line_range": [
            156,
            164
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RetrievalResult",
          "docstring": "\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            16,
            20
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextRetriever",
          "docstring": "FAISS-based retriever \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            23,
            164
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                35
              ],
              "parameters": [
                "self",
                "embedder",
                "max_chunks",
                "similarity_threshold"
              ]
            },
            {
              "name": "index_documents",
              "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
              "line_range": [
                37,
                76
              ],
              "parameters": [
                "self",
                "documents"
              ]
            },
            {
              "name": "retrieve",
              "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
              "line_range": [
                78,
                112
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_chunk_document",
              "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
              "line_range": [
                114,
                138
              ],
              "parameters": [
                "self",
                "document",
                "chunk_size"
              ]
            },
            {
              "name": "_deduplicate_results",
              "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                140,
                154
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
              "line_range": [
                156,
                164
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "index_documents": [
          "len",
          "self._chunk_document",
          "np.vstack",
          "normalized_embeddings.append",
          "faiss.IndexFlatIP",
          "texts.extend",
          "print"
        ],
        "retrieve": [
          "len",
          "RetrievalResult",
          "float",
          "self._deduplicate_results",
          "min",
          "print",
          "zip",
          "results.append",
          "query_embedding.reshape"
        ],
        "_chunk_document": [
          "len",
          "content.split",
          "current_chunk.strip",
          "chunks.append"
        ],
        "_deduplicate_results": [
          "source_to_best.values",
          "list",
          "unique_results.sort"
        ],
        "get_stats": [
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "SimpleEmbedder",
        "Tuple",
        "dataclass",
        "dataclasses",
        "embedder",
        "faiss",
        "json",
        "loader",
        "numpy",
        "pathlib",
        "typing"
      ],
      "hash": "551fd92175d5e562bef96e127736f97d365d06be58df4b7b543ec72280fe84de",
      "artifact_id": "1a5ee3e8-4994-4358-a5d5-f78f041233b2"
    },
    {
      "module_id": "src.rag_context.cli_interface",
      "path": "src/rag_context/cli_interface.py",
      "category": "core",
      "module_doc": "Enhanced CLI Interface for RAG Context Management\nNow includes Self-Refine Pipeline integration",
      "functions": [
        {
          "name": "create_main_parser",
          "docstring": "Create the main argument parser with all subcommands",
          "line_range": [
            20,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "handle_rag_commands",
          "docstring": "Handle RAG-related commands",
          "line_range": [
            93,
            123
          ],
          "parameters": [
            "args",
            "cli_tool"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_commands",
          "docstring": "Handle self-refine pipeline commands",
          "line_range": [
            126,
            139
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_code",
          "docstring": "Handle code refinement",
          "line_range": [
            142,
            183
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_text",
          "docstring": "Handle text refinement",
          "line_range": [
            186,
            222
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_report",
          "docstring": "Handle refinement report generation",
          "line_range": [
            225,
            241
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_quick",
          "docstring": "Handle quick refinement",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            259,
            283
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_main",
          "docstring": "Synchronous wrapper for main",
          "line_range": [
            286,
            288
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_main_parser": [
          "refine_parser.add_subparsers",
          "struct_parser.add_argument",
          "report_parser.add_argument",
          "stats_parser.add_argument",
          "quick_parser.add_argument",
          "argparse.ArgumentParser",
          "refine_subparsers.add_parser",
          "code_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "enhance_parser.add_argument",
          "refresh_parser.add_argument",
          "text_parser.add_argument",
          "search_parser.add_argument"
        ],
        "handle_rag_commands": [
          "cli_tool.stats_command",
          "cli_tool.struct_command",
          "print",
          "cli_tool.search_rules_command",
          "cli_tool.enhance_command",
          "getattr",
          "cli_tool.refresh_command"
        ],
        "handle_refine_commands": [
          "handle_refine_quick",
          "print",
          "handle_refine_text",
          "handle_refine_code",
          "handle_refine_report",
          "sys.exit"
        ],
        "handle_refine_code": [
          "Path",
          "pipeline.refine",
          "print",
          "SelfRefinePipeline",
          "pipeline.refine_code_file",
          "pipeline.generate_refinement_report",
          "sys.exit"
        ],
        "handle_refine_text": [
          "Path",
          "len",
          "pipeline.refine",
          "print",
          "SelfRefinePipeline",
          "sys.exit"
        ],
        "handle_refine_report": [
          "Path",
          "print",
          "json.loads",
          "sys.exit"
        ],
        "handle_refine_quick": [
          "quick_refine_text",
          "print",
          "quick_refine_code"
        ],
        "main": [
          "handle_rag_commands",
          "create_main_parser",
          "CLITool",
          "handle_refine_commands",
          "print",
          "parser.parse_args",
          "parser.print_help",
          "hasattr",
          "RAGConfig",
          "sys.exit"
        ],
        "sync_main": [
          "asyncio.run",
          "main"
        ]
      },
      "dependencies": [
        "CLITool",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "RefinementType",
        "SelfRefinePipeline",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "interfaces.cli_tool",
        "interfaces.self_refine_pipeline",
        "json",
        "pathlib",
        "quick_refine_code",
        "quick_refine_text",
        "sys",
        "typing"
      ],
      "hash": "937f50b0dc1424f272a0bfc77654337f1d7ce1a090952463264f0c10b2f592ea",
      "artifact_id": "2a0efbc0-f697-4ee6-910c-6681f0a59795"
    },
    {
      "module_id": "src.llmgenie.llm_client",
      "path": "src/llmgenie/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "Path",
          "self._query_ollama",
          "asyncio.sleep",
          "logging.info",
          "self._query_grok",
          "range",
          "json.load",
          "logging.error",
          "self._query_anthropic",
          "logging.warning",
          "json.dumps",
          "self._query_hybrid"
        ],
        "_query_grok": [
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.info",
          "logging.error",
          "logging.debug",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "len",
          "self._query_ollama",
          "self._query_grok",
          "logging.info",
          "self._query_anthropic",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "2773fd43-b3bf-4b3e-bbca-9b3e462ed0c2"
    },
    {
      "module_id": "src.llmgenie.cli",
      "path": "src/llmgenie/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "audit_parser.add_argument",
          "argparse.ArgumentParser",
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "duplicates_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "context_parser.add_argument"
        ],
        "normalize_patterns": [
          "result.extend",
          "p.strip",
          "item.split",
          "result.append",
          "item.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "0f1504317e34987adbd393567aa9bdaf5c356d1d6b9caa26781ccdb83ca3d0a3",
      "artifact_id": "b717cfc6-e2f5-47ed-97f7-95ed33cbf7aa"
    },
    {
      "module_id": "src.rag_context.interfaces.self_refine_pipeline",
      "path": "src/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "module_doc": "Self-Refine Pipeline with MCP Tools Integration\nEnhanced iterative improvement system for code, text, and workflow artifacts\nPart of Phase 4A.3: Self-Refine Pipeline Supercharged",
      "functions": [
        {
          "name": "quick_refine_code",
          "docstring": "Quick function to refine code content",
          "line_range": [
            316,
            320
          ],
          "parameters": [
            "code",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "quick_refine_text",
          "docstring": "Quick function to refine text content",
          "line_range": [
            323,
            327
          ],
          "parameters": [
            "text",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "parameters": [
            "self",
            "max_iterations",
            "confidence_threshold"
          ],
          "decorators": []
        },
        {
          "name": "_check_mcp_tools",
          "docstring": "Check which MCP tools are available",
          "line_range": [
            61,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refine",
          "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
          "line_range": [
            71,
            133
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context",
            "custom_criteria"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_context",
          "docstring": "Enhance context using MCP tools if available",
          "line_range": [
            135,
            161
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_critique_with_mcp",
          "docstring": "Generate critique using MCP tools for enhanced analysis",
          "line_range": [
            163,
            210
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_apply_refinements",
          "docstring": "Apply refinements based on critique results",
          "line_range": [
            212,
            230
          ],
          "parameters": [
            "self",
            "content",
            "critique_result",
            "refinement_type"
          ],
          "decorators": []
        },
        {
          "name": "_validate_improvements",
          "docstring": "Validate that refinements actually improved the content",
          "line_range": [
            232,
            246
          ],
          "parameters": [
            "self",
            "original",
            "refined",
            "critique"
          ],
          "decorators": []
        },
        {
          "name": "refine_code_file",
          "docstring": "Convenience method to refine an entire code file",
          "line_range": [
            248,
            272
          ],
          "parameters": [
            "self",
            "file_path",
            "backup"
          ],
          "decorators": []
        },
        {
          "name": "generate_refinement_report",
          "docstring": "Generate a comprehensive report of the refinement process",
          "line_range": [
            274,
            303
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "_get_most_used_tools",
          "docstring": "Get list of most frequently used MCP tools",
          "line_range": [
            305,
            312
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RefinementType",
          "docstring": "Types of content that can be refined",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RefinementResult",
          "docstring": "Result of a refinement iteration",
          "line_range": [
            32,
            41
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SelfRefinePipeline",
          "docstring": "Enhanced Self-Refine Pipeline with MCP Tools Integration\n\nFeatures:\n- Multi-type content refinement (code, text, config, etc.)\n- MCP tools integration for context-aware critique\n- Automatic logging of refinement process\n- Configurable improvement criteria\n- Iterative improvement until satisfaction threshold",
          "line_range": [
            44,
            312
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                56,
                59
              ],
              "parameters": [
                "self",
                "max_iterations",
                "confidence_threshold"
              ]
            },
            {
              "name": "_check_mcp_tools",
              "docstring": "Check which MCP tools are available",
              "line_range": [
                61,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refine",
              "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
              "line_range": [
                71,
                133
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context",
                "custom_criteria"
              ]
            },
            {
              "name": "_enhance_context",
              "docstring": "Enhance context using MCP tools if available",
              "line_range": [
                135,
                161
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_critique_with_mcp",
              "docstring": "Generate critique using MCP tools for enhanced analysis",
              "line_range": [
                163,
                210
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_apply_refinements",
              "docstring": "Apply refinements based on critique results",
              "line_range": [
                212,
                230
              ],
              "parameters": [
                "self",
                "content",
                "critique_result",
                "refinement_type"
              ]
            },
            {
              "name": "_validate_improvements",
              "docstring": "Validate that refinements actually improved the content",
              "line_range": [
                232,
                246
              ],
              "parameters": [
                "self",
                "original",
                "refined",
                "critique"
              ]
            },
            {
              "name": "refine_code_file",
              "docstring": "Convenience method to refine an entire code file",
              "line_range": [
                248,
                272
              ],
              "parameters": [
                "self",
                "file_path",
                "backup"
              ]
            },
            {
              "name": "generate_refinement_report",
              "docstring": "Generate a comprehensive report of the refinement process",
              "line_range": [
                274,
                303
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "_get_most_used_tools",
              "docstring": "Get list of most frequently used MCP tools",
              "line_range": [
                305,
                312
              ],
              "parameters": [
                "self",
                "results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._check_mcp_tools"
        ],
        "_check_mcp_tools": [],
        "refine": [
          "self._enhance_context",
          "critique_result.get",
          "self._apply_refinements",
          "range",
          "self._validate_improvements",
          "RefinementResult",
          "iterations.append",
          "self._critique_with_mcp",
          "time.time",
          "auto_logger.log_workflow_phase"
        ],
        "_enhance_context": [
          "mcp_tools_used.append",
          "context.copy"
        ],
        "_critique_with_mcp": [
          "critique_points.append",
          "context.get",
          "mcp_tools_used.append",
          "critique_points.extend"
        ],
        "_apply_refinements": [
          "str"
        ],
        "_validate_improvements": [
          "len",
          "min"
        ],
        "refine_code_file": [
          "Path",
          "file_path.with_suffix",
          "FileNotFoundError",
          "str",
          "file_path.write_text",
          "file_path.exists",
          "self.refine",
          "backup_path.write_text",
          "file_path.read_text"
        ],
        "generate_refinement_report": [
          "sum",
          "len",
          "self._get_most_used_tools",
          "set"
        ],
        "_get_most_used_tools": [
          "sorted",
          "tool_counts.get",
          "tool_counts.keys"
        ],
        "quick_refine_code": [
          "pipeline.refine",
          "SelfRefinePipeline"
        ],
        "quick_refine_text": [
          "pipeline.refine",
          "SelfRefinePipeline"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "auto_logger",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9f3711a6c9240c508770c3725dedc2933aeb045fb1c878313d24dee7b578317d",
      "artifact_id": "0f377ef8-5bea-4114-9b4b-4aee5c02fd2a"
    },
    {
      "module_id": "src.rag_context.interfaces.websocket_server",
      "path": "src/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "module_doc": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            265,
            295
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            34
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "register_connection",
          "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            36,
            39
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "unregister_connection",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            41,
            44
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "broadcast_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
          "line_range": [
            46,
            53
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            55,
            176
          ],
          "parameters": [
            "self",
            "websocket",
            "message_str"
          ],
          "decorators": []
        },
        {
          "name": "handle_connection",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            178,
            206
          ],
          "parameters": [
            "self",
            "websocket",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            208,
            226
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "get_client_example",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
          "line_range": [
            228,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WebSocketServer",
          "docstring": "WebSocket Server \u0434\u043b\u044f real-time \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            22,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                34
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "register_connection",
              "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                36,
                39
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "unregister_connection",
              "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                41,
                44
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "broadcast_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
              "line_range": [
                46,
                53
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                55,
                176
              ],
              "parameters": [
                "self",
                "websocket",
                "message_str"
              ]
            },
            {
              "name": "handle_connection",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                178,
                206
              ],
              "parameters": [
                "self",
                "websocket",
                "path"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                208,
                226
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "get_client_example",
              "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
              "line_range": [
                228,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "PromptEnhancer",
          "set",
          "ImportError"
        ],
        "register_connection": [
          "len",
          "print"
        ],
        "unregister_connection": [
          "len",
          "print"
        ],
        "broadcast_message": [
          "asyncio.gather",
          "websocket.send",
          "json.dumps"
        ],
        "handle_message": [
          "len",
          "str",
          "rules.append",
          "message.get",
          "open",
          "asyncio.get_event_loop",
          "json.load",
          "params.get",
          "json.loads",
          "isinstance",
          "round",
          "locals"
        ],
        "handle_connection": [
          "print",
          "websocket.send",
          "self.handle_message",
          "self.unregister_connection",
          "self.register_connection",
          "json.dumps"
        ],
        "run": [
          "websockets.serve",
          "server.wait_closed",
          "print"
        ],
        "get_client_example": [],
        "main": [
          "len",
          "print",
          "server.run",
          "int",
          "server.get_client_example",
          "WebSocketServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Set",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing",
        "websockets"
      ],
      "hash": "9676904c881eaee00c82fd468681d7b301b3145a45389a3af56b7157906bce0c",
      "artifact_id": "d190c1e8-2905-436d-bd3e-3b3d77486f17"
    },
    {
      "module_id": "src.rag_context.interfaces.http_api",
      "path": "src/rag_context/interfaces/http_api.py",
      "category": "core",
      "module_doc": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            261,
            281
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "_setup_routes",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
          "line_range": [
            85,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            238,
            249
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            251,
            258
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "startup_event",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            89,
            93
          ],
          "parameters": [],
          "decorators": [
            "self.app.on_event('startup')"
          ]
        },
        {
          "name": "root",
          "docstring": "\u041a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 endpoint",
          "line_range": [
            96,
            103
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            106,
            112
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/health')"
          ]
        },
        {
          "name": "enhance_prompt",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            115,
            140
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/enhance', response_model=EnhanceResponse)"
          ]
        },
        {
          "name": "search_rules",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            143,
            171
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/rules/search', response_model=RulesResponse)"
          ]
        },
        {
          "name": "get_project_structure",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            174,
            187
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/project/structure')"
          ]
        },
        {
          "name": "get_system_stats",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            190,
            197
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/stats')"
          ]
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            200,
            213
          ],
          "parameters": [],
          "decorators": [
            "self.app.post('/admin/refresh')"
          ]
        },
        {
          "name": "enhance_prompt_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f enhance \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            217,
            225
          ],
          "parameters": [
            "query",
            "max_context"
          ],
          "decorators": [
            "self.app.get('/enhance')"
          ]
        },
        {
          "name": "search_rules_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f rules search \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439  ",
          "line_range": [
            228,
            236
          ],
          "parameters": [
            "query",
            "max_rules"
          ],
          "decorators": [
            "self.app.get('/rules/search')"
          ]
        }
      ],
      "classes": [
        {
          "name": "EnhanceRequest",
          "docstring": "",
          "line_range": [
            25,
            28
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "EnhanceResponse",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesRequest",
          "docstring": "",
          "line_range": [
            38,
            40
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RuleInfo",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesResponse",
          "docstring": "",
          "line_range": [
            51,
            53
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HTTPAPIServer",
          "docstring": "HTTP API Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            56,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "_setup_routes",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
              "line_range": [
                85,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                238,
                249
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                251,
                258
              ],
              "parameters": [
                "self",
                "host"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "FastAPI",
          "ImportError",
          "PromptEnhancer",
          "self._setup_routes",
          "RAGConfig"
        ],
        "_setup_routes": [],
        "startup_event": [
          "print"
        ],
        "root": [],
        "health_check": [],
        "enhance_prompt": [
          "len",
          "str",
          "enhanced_query.count",
          "max",
          "HTTPException",
          "EnhanceResponse"
        ],
        "search_rules": [
          "len",
          "str",
          "rules.append",
          "RuleInfo",
          "round",
          "HTTPException",
          "RulesResponse"
        ],
        "get_project_structure": [
          "HTTPException",
          "open",
          "json.load",
          "str"
        ],
        "get_system_stats": [
          "HTTPException",
          "str"
        ],
        "refresh_index": [
          "HTTPException",
          "str"
        ],
        "enhance_prompt_get": [
          "EnhanceRequest",
          "Query",
          "enhance_prompt"
        ],
        "search_rules_get": [
          "RulesRequest",
          "Query",
          "search_rules"
        ],
        "run": [
          "uvicorn.Server",
          "print",
          "server.serve",
          "uvicorn.Config"
        ],
        "run_sync": [
          "uvicorn.run"
        ],
        "main": [
          "len",
          "server.run",
          "int",
          "HTTPAPIServer"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "Query",
        "RAGConfig",
        "asyncio",
        "config",
        "enhancer",
        "fastapi",
        "fastapi.middleware.cors",
        "json",
        "pathlib",
        "pydantic",
        "sys",
        "typing",
        "uvicorn"
      ],
      "hash": "1af7ded9db88a3b9e27d52eb109dc02b6f4149443f98b05453389ef62d17c65f",
      "artifact_id": "19031c8c-56f9-4dff-972d-d372d77071fd"
    },
    {
      "module_id": "src.rag_context.interfaces.mcp_server",
      "path": "src/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "module_doc": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 RAG (5 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432) + Struct Tools (6 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432)\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 MCP Python SDK",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            822,
            836
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            71,
            105
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
          "line_range": [
            107,
            614
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_struct_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            616,
            769
          ],
          "parameters": [
            "self",
            "name",
            "arguments"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
          "line_range": [
            771,
            788
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            790,
            802
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_vscode_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
          "line_range": [
            804,
            807
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cursor_config",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            809,
            819
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "handle_list_tools",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            111,
            388
          ],
          "parameters": [],
          "decorators": [
            "self.server.list_tools()"
          ]
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            391,
            614
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        }
      ],
      "classes": [
        {
          "name": "MCPServer",
          "docstring": "MCP Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435 + Struct Tools",
          "line_range": [
            68,
            819
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                71,
                105
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
              "line_range": [
                107,
                614
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_struct_tool",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                616,
                769
              ],
              "parameters": [
                "self",
                "name",
                "arguments"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
              "line_range": [
                771,
                788
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                790,
                802
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_vscode_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
              "line_range": [
                804,
                807
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cursor_config",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                809,
                819
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "StructureAnalyzer",
          "ImportError",
          "create_knowledge_extractor",
          "create_cursor_intelligence",
          "StructureConfig",
          "print",
          "Server",
          "create_session_context_manager",
          "PromptEnhancer",
          "create_discovery_system",
          "self._setup_handlers",
          "RAGConfig"
        ],
        "_setup_handlers": [],
        "handle_list_tools": [
          "tools.extend",
          "types.Tool"
        ],
        "handle_call_tool": [
          "str",
          "json.load",
          "workflow_analysis.get",
          "discovery_system.search_solutions",
          "name.startswith",
          "datetime.now",
          "types.TextContent",
          "self._handle_struct_tool",
          "auto_logger.log_tool_result",
          "auto_logger.log_tool_call",
          "json.dumps",
          "Path",
          "extractor.extract_code_knowledge",
          "suggestions_system.get_workflow_suggestions",
          "len",
          "arguments.get",
          "rules.append",
          "session_context_manager.extract_session_context",
          "open",
          "detect_and_log_model_context",
          "cursor_intelligence.analyze_workflow_context",
          "cursor_intelligence.get_proactive_suggestions",
          "cursor_intelligence._insight_to_dict",
          "round",
          "locals",
          "time.time"
        ],
        "_handle_struct_tool": [
          "len",
          "str",
          "arguments.get",
          "result.update",
          "types.TextContent",
          "json.dumps"
        ],
        "run_stdio": [
          "print",
          "NotificationOptions",
          "InitializationOptions"
        ],
        "get_cursor_config": [],
        "get_vscode_config": [
          "self.get_cursor_config"
        ],
        "save_cursor_config": [
          "self.get_cursor_config",
          "open",
          "json.dump",
          "print",
          "Path.cwd"
        ],
        "main": [
          "server.run_stdio",
          "MCPServer",
          "print",
          "server.save_cursor_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "InitializationOptions",
        "List",
        "NotificationOptions",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "auto_logger",
        "code_discovery",
        "config",
        "create_cursor_intelligence",
        "create_discovery_system",
        "create_knowledge_extractor",
        "create_session_context_manager",
        "cursor_intelligence",
        "datetime",
        "detect_and_log_model_context",
        "enhancer",
        "json",
        "knowledge_extractor",
        "mcp.server",
        "mcp.server.models",
        "mcp.server.stdio",
        "mcp.types",
        "pathlib",
        "session_context_manager",
        "struct_tools.structure_analyzer",
        "sys",
        "time",
        "typing"
      ],
      "hash": "f878d69e1759e3a3e2ae48e66ba2b5ea3aade210c4a4de59ac5b727e0684b207",
      "artifact_id": "0a8f55ce-9a13-45a9-831e-d88037050400"
    },
    {
      "module_id": "src.rag_context.interfaces.__init__",
      "path": "src/rag_context/interfaces/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435\n\n\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b:\n- MCP: \u0434\u043b\u044f Cursor, VSCode, Claude Desktop\n- HTTP API: \u0434\u043b\u044f \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n- CLI: \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n- WebSocket: \u0434\u043b\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n- Python Library: \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CLITool",
        "HTTPAPIServer",
        "MCPServer",
        "WebSocketServer",
        "cli_tool",
        "http_api",
        "mcp_server",
        "websocket_server"
      ],
      "hash": "9d6e8c8c43139ceda139fa99039ac95d086caaa368f5be4ec90746da19e7cfeb",
      "artifact_id": "71f1c0d4-5316-4cf9-bb70-4e61d3bb7111"
    },
    {
      "module_id": "src.rag_context.interfaces.cli_tool",
      "path": "src/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "module_doc": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "functions": [
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0430\u0440\u0441\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            209,
            244
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f CLI",
          "line_range": [
            247,
            298
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            21
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "enhance_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
          "line_range": [
            23,
            52
          ],
          "parameters": [
            "self",
            "query",
            "max_context",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "search_rules_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            54,
            109
          ],
          "parameters": [
            "self",
            "query",
            "max_rules",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "stats_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            111,
            144
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "refresh_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
          "line_range": [
            146,
            163
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            165,
            206
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLITool",
          "docstring": "CLI \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439",
          "line_range": [
            16,
            206
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                21
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "enhance_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
              "line_range": [
                23,
                52
              ],
              "parameters": [
                "self",
                "query",
                "max_context",
                "output_format"
              ]
            },
            {
              "name": "search_rules_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                54,
                109
              ],
              "parameters": [
                "self",
                "query",
                "max_rules",
                "output_format"
              ]
            },
            {
              "name": "stats_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                111,
                144
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "refresh_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
              "line_range": [
                146,
                163
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                165,
                206
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "PromptEnhancer"
        ],
        "enhance_command": [
          "len",
          "json.dumps",
          "str"
        ],
        "search_rules_command": [
          "len",
          "str",
          "rules.append",
          "enumerate",
          "round",
          "output.append",
          "json.dumps"
        ],
        "stats_command": [
          "str",
          "json.dumps",
          "output.append"
        ],
        "refresh_command": [
          "str",
          "json.dumps"
        ],
        "struct_command": [
          "str",
          "open",
          "json.load",
          "output.append",
          "json.dumps"
        ],
        "create_parser": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "enhance_parser.add_argument",
          "search_parser.add_argument"
        ],
        "main": [
          "cli.struct_command",
          "str",
          "CLITool",
          "create_parser",
          "cli.stats_command",
          "cli.search_rules_command",
          "print",
          "parser.parse_args",
          "cli.refresh_command",
          "parser.print_help",
          "cli.enhance_command",
          "json.dumps",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d303e47d0e5ebf9fe48d32604c56e3639b3d1d8c87e36e6a64028174d7bb4cbd",
      "artifact_id": "564eeb18-15ce-4041-aa8f-b70b5e28851e"
    },
    {
      "module_id": "src.rag_context.interfaces.auto_logger",
      "path": "src/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "module_doc": "Auto Logger for MCP Server Integration\nAutomatic workflow logging without efficiency loss\nPart of Phase 4A.2: Agent-as-a-Judge Enhanced",
      "functions": [
        {
          "name": "log_mcp_tool_call",
          "docstring": "Convenience function for MCP tool call logging",
          "line_range": [
            261,
            264
          ],
          "parameters": [
            "tool_name",
            "arguments",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_mcp_tool_result",
          "docstring": "Convenience function for MCP tool result logging",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "detect_and_log_model_context",
          "docstring": "Detect model from context and log if switch detected",
          "line_range": [
            271,
            282
          ],
          "parameters": [
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "parameters": [
            "self",
            "session_log_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_model",
          "docstring": "Detect current model based on context clues",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ensure_session",
          "docstring": "Ensure active session exists, create if needed",
          "line_range": [
            38,
            44
          ],
          "parameters": [
            "self",
            "session_name"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_call",
          "docstring": "Log MCP tool call with automatic metadata",
          "line_range": [
            46,
            62
          ],
          "parameters": [
            "self",
            "tool_name",
            "arguments",
            "model",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_result",
          "docstring": "Log tool result with performance metrics",
          "line_range": [
            64,
            79
          ],
          "parameters": [
            "self",
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_model_switch",
          "docstring": "Log model switches for continuity tracking",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "from_model",
            "to_model",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_workflow_phase",
          "docstring": "Log workflow phase transitions",
          "line_range": [
            96,
            107
          ],
          "parameters": [
            "self",
            "phase",
            "detected_by"
          ],
          "decorators": []
        },
        {
          "name": "analyze_activity_pattern",
          "docstring": "Analyze recent activity to detect workflow patterns",
          "line_range": [
            109,
            140
          ],
          "parameters": [
            "self",
            "recent_events"
          ],
          "decorators": []
        },
        {
          "name": "_detect_pattern_with_confidence",
          "docstring": "Detect patterns with evidence-based confidence scoring",
          "line_range": [
            142,
            161
          ],
          "parameters": [
            "self",
            "tool_usage",
            "models_used",
            "timespan"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_timespan",
          "docstring": "Calculate time span of events",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "events"
          ],
          "decorators": []
        },
        {
          "name": "generate_session_summary",
          "docstring": "Generate automatic session summary",
          "line_range": [
            175,
            223
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_hash_args",
          "docstring": "Create hash of arguments for deduplication",
          "line_range": [
            225,
            228
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_args",
          "docstring": "Create human-readable summary of arguments",
          "line_range": [
            230,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_append_to_log",
          "docstring": "Append event to session log file",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "self",
            "event",
            "session"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AutoLogger",
          "docstring": "Automatic logging system for MCP workflow events",
          "line_range": [
            15,
            256
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                26
              ],
              "parameters": [
                "self",
                "session_log_path"
              ]
            },
            {
              "name": "detect_model",
              "docstring": "Detect current model based on context clues",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "ensure_session",
              "docstring": "Ensure active session exists, create if needed",
              "line_range": [
                38,
                44
              ],
              "parameters": [
                "self",
                "session_name"
              ]
            },
            {
              "name": "log_tool_call",
              "docstring": "Log MCP tool call with automatic metadata",
              "line_range": [
                46,
                62
              ],
              "parameters": [
                "self",
                "tool_name",
                "arguments",
                "model",
                "session"
              ]
            },
            {
              "name": "log_tool_result",
              "docstring": "Log tool result with performance metrics",
              "line_range": [
                64,
                79
              ],
              "parameters": [
                "self",
                "tool_name",
                "result",
                "duration_ms",
                "model"
              ]
            },
            {
              "name": "log_model_switch",
              "docstring": "Log model switches for continuity tracking",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "from_model",
                "to_model",
                "context"
              ]
            },
            {
              "name": "log_workflow_phase",
              "docstring": "Log workflow phase transitions",
              "line_range": [
                96,
                107
              ],
              "parameters": [
                "self",
                "phase",
                "detected_by"
              ]
            },
            {
              "name": "analyze_activity_pattern",
              "docstring": "Analyze recent activity to detect workflow patterns",
              "line_range": [
                109,
                140
              ],
              "parameters": [
                "self",
                "recent_events"
              ]
            },
            {
              "name": "_detect_pattern_with_confidence",
              "docstring": "Detect patterns with evidence-based confidence scoring",
              "line_range": [
                142,
                161
              ],
              "parameters": [
                "self",
                "tool_usage",
                "models_used",
                "timespan"
              ]
            },
            {
              "name": "_calculate_timespan",
              "docstring": "Calculate time span of events",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "events"
              ]
            },
            {
              "name": "generate_session_summary",
              "docstring": "Generate automatic session summary",
              "line_range": [
                175,
                223
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_hash_args",
              "docstring": "Create hash of arguments for deduplication",
              "line_range": [
                225,
                228
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_summarize_args",
              "docstring": "Create human-readable summary of arguments",
              "line_range": [
                230,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_append_to_log",
              "docstring": "Append event to session log file",
              "line_range": [
                244,
                256
              ],
              "parameters": [
                "self",
                "event",
                "session"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "detect_model": [
          "any",
          "context.lower"
        ],
        "ensure_session": [
          "datetime.now"
        ],
        "log_tool_call": [
          "self._summarize_args",
          "self._append_to_log",
          "self._hash_args",
          "datetime.now",
          "self.ensure_session"
        ],
        "log_tool_result": [
          "len",
          "self._append_to_log",
          "datetime.now",
          "str"
        ],
        "log_model_switch": [
          "self._append_to_log",
          "datetime.now"
        ],
        "log_workflow_phase": [
          "self._append_to_log",
          "datetime.now"
        ],
        "analyze_activity_pattern": [
          "tool_usage.keys",
          "self._calculate_timespan",
          "len",
          "event_timespan.total_seconds",
          "set",
          "list",
          "tool_usage.get",
          "models_used.add",
          "self._detect_pattern_with_confidence",
          "event.get"
        ],
        "_detect_pattern_with_confidence": [
          "sum",
          "len",
          "tool.startswith",
          "min",
          "tool_usage.get",
          "tool_usage.keys"
        ],
        "_calculate_timespan": [
          "len",
          "datetime.fromisoformat"
        ],
        "generate_session_summary": [
          "events.append",
          "len",
          "set",
          "list",
          "open",
          "models_used.add",
          "json.loads",
          "line.strip",
          "tools_used.add",
          "phases.add",
          "log_file.exists",
          "event.get"
        ],
        "_hash_args": [
          "args_str.encode",
          "hashlib.md5",
          "json.dumps"
        ],
        "_summarize_args": [
          "len",
          "args.items",
          "summary_parts.append",
          "isinstance"
        ],
        "_append_to_log": [
          "open",
          "f.write",
          "print",
          "__import__",
          "json.dumps"
        ],
        "log_mcp_tool_call": [
          "auto_logger.log_tool_call"
        ],
        "log_mcp_tool_result": [
          "auto_logger.log_tool_result"
        ],
        "detect_and_log_model_context": [
          "auto_logger.log_model_switch",
          "auto_logger.detect_model",
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "f2bc412c5b72a8930278fff9018170ee36da5ebc5b1190fbbbb146eb456da51e",
      "artifact_id": "6a7de670-50ea-4b6e-b126-1b8670df76ae"
    },
    {
      "module_id": "src.llmgenie.mcp.tools",
      "path": "src/llmgenie/mcp/tools.py",
      "category": "core",
      "module_doc": "MCP Tools Implementation\n\nModular tools architecture:\n- HandoffTools: Context transfer validation\n- ProjectTools: Project state management  \n- AgentTools: Agent orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all handoff tools with MCP server",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_handoff",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
          "line_range": [
            36,
            64
          ],
          "parameters": [
            "self",
            "package_data"
          ],
          "decorators": []
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            66,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            105,
            107
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all project tools with MCP server",
          "line_range": [
            109,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            116,
            142
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            174,
            182
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            188,
            192
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all agent tools with MCP server",
          "line_range": [
            194,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
          "line_range": [
            199,
            271
          ],
          "parameters": [
            "self",
            "agent_type",
            "task",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
          "line_range": [
            273,
            289
          ],
          "parameters": [
            "self",
            "agent_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffTools",
          "docstring": "Tools for handoff validation and context transfer",
          "line_range": [
            23,
            99
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all handoff tools with MCP server",
              "line_range": [
                31,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_handoff",
              "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
              "line_range": [
                36,
                64
              ],
              "parameters": [
                "self",
                "package_data"
              ]
            },
            {
              "name": "get_handoff_template",
              "docstring": "Get handoff package template with required files and validation criteria",
              "line_range": [
                66,
                99
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ProjectTools",
          "docstring": "Tools for project state and workflow management",
          "line_range": [
            102,
            182
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                105,
                107
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all project tools with MCP server",
              "line_range": [
                109,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_state",
              "docstring": "Get current project state",
              "line_range": [
                116,
                142
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_rules_manifest",
              "docstring": "Get rules manifest",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workflow_modes",
              "docstring": "Get available workflow modes",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Health check endpoint",
              "line_range": [
                174,
                182
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AgentTools",
          "docstring": "Tools for agent orchestration and task execution",
          "line_range": [
            185,
            289
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                188,
                192
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all agent tools with MCP server",
              "line_range": [
                194,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_agent_task",
              "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
              "line_range": [
                199,
                271
              ],
              "parameters": [
                "self",
                "agent_type",
                "task",
                "context"
              ]
            },
            {
              "name": "get_agent_status",
              "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
              "line_range": [
                273,
                289
              ],
              "parameters": [
                "self",
                "agent_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._register_tools",
          "TaskClassifier",
          "ModelRouter"
        ],
        "_register_tools": [],
        "validate_handoff": [
          "str",
          "HandoffPackage"
        ],
        "get_handoff_template": [],
        "get_project_state": [
          "Path",
          "str",
          "project_state_path.exists",
          "open",
          "state.get",
          "json.load"
        ],
        "get_rules_manifest": [
          "open",
          "json.load",
          "str"
        ],
        "get_workflow_modes": [],
        "health_check": [
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "datetime.now",
          "execution_result.get"
        ],
        "get_agent_status": []
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "datetime",
        "fastmcp",
        "json",
        "pathlib",
        "pydantic",
        "task_router",
        "typing"
      ],
      "hash": "ab35e501f17c2819b5ed8ec1e5ed910b58708cc9bffc36a2ae144d539fdd3410",
      "artifact_id": "7509b963-2d0a-41c0-8a59-0f936b9bf2fa"
    },
    {
      "module_id": "src.llmgenie.mcp.server",
      "path": "src/llmgenie/mcp/server.py",
      "category": "core",
      "module_doc": "FastMCP Server Implementation\n\nClean server initialization using decorators",
      "functions": [
        {
          "name": "validate_handoff",
          "docstring": "",
          "line_range": [
            29,
            47
          ],
          "parameters": [
            "package_data"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "",
          "line_range": [
            50,
            82
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "",
          "line_range": [
            85,
            108
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "health_check",
          "docstring": "",
          "line_range": [
            111,
            118
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "",
          "line_range": [
            121,
            171
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "",
          "line_range": [
            174,
            181
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "",
          "line_range": [
            184,
            201
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "",
          "line_range": [
            204,
            211
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_handoff": [
          "str",
          "mcp.tool",
          "HandoffPackage",
          "validator.validate_package"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ],
        "get_project_state": [
          "Path",
          "str",
          "mcp.tool",
          "project_state_path.exists",
          "open",
          "state.get",
          "json.load"
        ],
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "mcp.tool",
          "router.route_task",
          "router.execute_with_model",
          "datetime.now",
          "execution_result.get"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "open",
          "mcp.tool",
          "json.load",
          "str"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "asyncio",
        "datetime",
        "fastmcp",
        "json",
        "logging",
        "pathlib",
        "task_router",
        "typing"
      ],
      "hash": "0dff6427b5df5156492a11d9dfd2c7984b7b86e6e4972411700ace0edb3cf23d",
      "artifact_id": "efa5fadb-e439-43b2-8867-30d71e2542c5"
    },
    {
      "module_id": "src.llmgenie.mcp.__init__",
      "path": "src/llmgenie/mcp/__init__.py",
      "category": "cli",
      "module_doc": "FastMCP Server Implementation\n\nEpic 5 Completion: Modular MCP architecture using FastMCP\n- Better initialization handling\n- Cleaner tool separation\n- Stable SSE transport",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentTools",
        "HandoffTools",
        "ProjectTools",
        "tools"
      ],
      "hash": "923abf222fd2a38c7f538f06c41510d360ade1778dfadd2d1e4c61067af77aa4",
      "artifact_id": "67dec7ec-36e0-45f5-8eb9-fe4f400bb357"
    },
    {
      "module_id": "src.llmgenie.api.simple_mcp_server",
      "path": "src/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "module_doc": "Simple MCP Server for llmgenie\nUses stdio transport without FastAPI dependencies",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            16,
            22
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            25,
            54
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent",
          "line_range": [
            57,
            68
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            80,
            94
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            97,
            104
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness",
          "line_range": [
            107,
            136
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template",
          "line_range": [
            139,
            172
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_project_state": [
          "Path",
          "str",
          "mcp.tool",
          "open",
          "state.get",
          "json.load",
          "state_file.exists"
        ],
        "execute_agent_task": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "Path",
          "str",
          "mcp.tool",
          "open",
          "json.load",
          "manifest_file.exists"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ],
        "validate_handoff_package": [
          "len",
          "mcp.tool",
          "str",
          "min",
          "package.get"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "FastMCP",
        "Path",
        "datetime",
        "json",
        "mcp.server.fastmcp",
        "os",
        "pathlib"
      ],
      "hash": "9cb3574a738a8dd3591f9647deead6a732aeffb5552cdd2c58b23c1d5ea46c1a",
      "artifact_id": "26cf6bfe-43ec-42b8-9d3a-f9a1db2c95ad"
    },
    {
      "module_id": "src.llmgenie.api.handoff_validator",
      "path": "src/llmgenie/api/handoff_validator.py",
      "category": "core",
      "module_doc": "Handoff validation module for llmgenie\nImplements automated completeness validation for context transfer packages\nBased on 016_context_transfer_protocol atomic rule",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "validate_package",
          "docstring": "Validate complete handoff package",
          "line_range": [
            86,
            125
          ],
          "parameters": [
            "self",
            "package"
          ],
          "decorators": []
        },
        {
          "name": "_validate_files",
          "docstring": "Validate individual files in package",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_find_missing_files",
          "docstring": "Find missing required file types",
          "line_range": [
            145,
            149
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_validate_startup_prompt",
          "docstring": "Validate startup prompt content",
          "line_range": [
            151,
            161
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_validate_control_questions",
          "docstring": "Validate control questions",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "questions"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate overall completeness score",
          "line_range": [
            175,
            206
          ],
          "parameters": [
            "self",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_warnings",
          "docstring": "Generate validation warnings",
          "line_range": [
            208,
            231
          ],
          "parameters": [
            "self",
            "package",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate improvement recommendations",
          "line_range": [
            233,
            251
          ],
          "parameters": [
            "self",
            "package",
            "missing_files",
            "warnings"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffFile",
          "docstring": "Single file in handoff package",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "StartupPrompt",
          "docstring": "Startup prompt validation",
          "line_range": [
            23,
            29
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ControlQuestions",
          "docstring": "Control questions validation",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffPackage",
          "docstring": "Complete handoff package for validation",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResult",
          "docstring": "Handoff validation result",
          "line_range": [
            50,
            67
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffValidator",
          "docstring": "Core handoff validation logic",
          "line_range": [
            69,
            251
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                83,
                84
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "validate_package",
              "docstring": "Validate complete handoff package",
              "line_range": [
                86,
                125
              ],
              "parameters": [
                "self",
                "package"
              ]
            },
            {
              "name": "_validate_files",
              "docstring": "Validate individual files in package",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_find_missing_files",
              "docstring": "Find missing required file types",
              "line_range": [
                145,
                149
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_validate_startup_prompt",
              "docstring": "Validate startup prompt content",
              "line_range": [
                151,
                161
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_validate_control_questions",
              "docstring": "Validate control questions",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "questions"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate overall completeness score",
              "line_range": [
                175,
                206
              ],
              "parameters": [
                "self",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_warnings",
              "docstring": "Generate validation warnings",
              "line_range": [
                208,
                231
              ],
              "parameters": [
                "self",
                "package",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate improvement recommendations",
              "line_range": [
                233,
                251
              ],
              "parameters": [
                "self",
                "package",
                "missing_files",
                "warnings"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "validate_package": [
          "all",
          "len",
          "self._generate_warnings",
          "ValidationResult",
          "self._generate_recommendations",
          "self._validate_files",
          "self._validate_startup_prompt",
          "self._validate_control_questions",
          "self._find_missing_files",
          "file_validation.values",
          "self._calculate_completeness_score"
        ],
        "_validate_files": [
          "file_path.stat",
          "file_path.exists"
        ],
        "_find_missing_files": [
          "set",
          "list"
        ],
        "_validate_startup_prompt": [
          "StartupPrompt",
          "prompt.lower"
        ],
        "_validate_control_questions": [
          "len",
          "ControlQuestions"
        ],
        "_calculate_completeness_score": [
          "sum",
          "len",
          "file_validation.values",
          "max"
        ],
        "_generate_warnings": [
          "all",
          "len",
          "file_validation.items",
          "warnings.append",
          "file_validation.values"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ]
      },
      "dependencies": [
        "BaseModel",
        "Dict",
        "Field",
        "List",
        "Optional",
        "Path",
        "Union",
        "datetime",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "typing"
      ],
      "hash": "95e1fca4753701656be3b38544e6201c6077ce68a7837cc24ecc6ae98625cbc3",
      "artifact_id": "6fb9fd6b-c4f5-415d-ad37-56095cc329ae"
    },
    {
      "module_id": "src.llmgenie.api.__init__",
      "path": "src/llmgenie/api/__init__.py",
      "category": "cli",
      "module_doc": "llmgenie API module\nFastAPI-based REST API for llmgenie orchestration",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "113730aac8ee128f272f72d14db21b5639e86fbd7697a11dc62547f8f826d153",
      "artifact_id": "39e56187-194c-4b4a-a11d-d100993eaa55"
    },
    {
      "module_id": "src.llmgenie.api.main",
      "path": "src/llmgenie/api/main.py",
      "category": "core",
      "module_doc": "FastAPI main application for llmgenie\nProvides REST API for multi-agent orchestration and workflow management",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            69,
            75
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            79,
            94
          ],
          "parameters": [],
          "decorators": [
            "app.get('/project/state', response_model=ProjectStateResponse)"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing",
          "line_range": [
            98,
            164
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/agents/execute', response_model=AgentResponse)"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            167,
            174
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "app.get('/agents/status/{agent_id}')"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            178,
            185
          ],
          "parameters": [],
          "decorators": [
            "app.get('/rules/manifest')"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            188,
            195
          ],
          "parameters": [],
          "decorators": [
            "app.get('/workflow/modes')"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "app.post('/handoff/validate', response_model=ValidationResult, operation_id='validate_handoff_package')"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            209,
            242
          ],
          "parameters": [],
          "decorators": [
            "app.get('/handoff/template', operation_id='get_handoff_template')"
          ]
        }
      ],
      "classes": [
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            46,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ProjectStateResponse",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentRequest",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentResponse",
          "docstring": "",
          "line_range": [
            61,
            65
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "health_check": [
          "HealthResponse",
          "datetime.now",
          "app.get"
        ],
        "get_project_state": [
          "str",
          "open",
          "state.get",
          "json.load",
          "app.get",
          "ProjectStateResponse",
          "HTTPException"
        ],
        "execute_agent_task": [
          "str",
          "app.post",
          "router.route_task",
          "router.execute_with_model",
          "execution_result.get",
          "AgentResponse",
          "TaskClassifier",
          "datetime.now",
          "ModelRouter"
        ],
        "get_agent_status": [
          "app.get"
        ],
        "get_rules_manifest": [
          "HTTPException",
          "open",
          "json.load",
          "app.get"
        ],
        "get_workflow_modes": [
          "app.get"
        ],
        "validate_handoff_package": [
          "str",
          "app.post",
          "validator.validate_package",
          "HTTPException",
          "HandoffValidator"
        ],
        "get_handoff_template": [
          "app.get"
        ]
      },
      "dependencies": [
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "FastApiMCP",
        "HTTPException",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi_mcp",
        "handoff_validator",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "sys",
        "task_router",
        "typing",
        "uvicorn"
      ],
      "hash": "924d3f4417bd5f759688dd49b03282f0e54d64231bf423eb061b52a46ecb3096",
      "artifact_id": "10b025fa-1de4-4f9a-bdaa-bcdbfcebe6d2"
    },
    {
      "module_id": "src.llmgenie.orchestration.__init__",
      "path": "src/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "module_doc": "Multi-Agent Orchestration Package\n\nEpic 5 Phase 3.1: Complete orchestration system\n- AgentOrchestrator: Main orchestration class\n- Core: ExecutionMode, AgentCoordination, OrchestrationTask, OrchestrationResult\n- Executors: ParallelExecutor, SequentialExecutor, CollaborativeExecutor",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "AgentOrchestrator",
        "CollaborativeExecutor",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "core",
        "executors",
        "orchestrator"
      ],
      "hash": "84b5d81bce4f1e78a7e889727b30bc9050567530d03928ca7b0979d04de3b09e",
      "artifact_id": "7101c09c-9e94-49a9-9e54-aa98084e1a56"
    },
    {
      "module_id": "src.llmgenie.orchestration.orchestrator",
      "path": "src/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "module_doc": "Multi-Agent Orchestrator\n\nEpic 5 Phase 3.1: Main orchestration class\nSingle responsibility: Coordinate multiple agents using different execution strategies",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
          "line_range": [
            28,
            44
          ],
          "parameters": [
            "self",
            "agent_routers",
            "task_classifier"
          ],
          "decorators": []
        },
        {
          "name": "orchestrate",
          "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
          "line_range": [
            46,
            135
          ],
          "parameters": [
            "self",
            "query",
            "execution_mode",
            "coordination_type",
            "context",
            "subtasks",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_execution_mode",
          "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_coordination_type",
          "docstring": "Suggest coordination type based on execution mode",
          "line_range": [
            162,
            172
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        },
        {
          "name": "_validate_coordination_compatibility",
          "docstring": "Validate that coordination type is compatible with execution mode",
          "line_range": [
            174,
            186
          ],
          "parameters": [
            "self",
            "execution_mode",
            "coordination_type"
          ],
          "decorators": []
        },
        {
          "name": "get_orchestration_stats",
          "docstring": "Get orchestration statistics and available agents",
          "line_range": [
            188,
            201
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentOrchestrator",
          "docstring": "Main orchestration class for multi-agent task execution\n\nEpic 5 integration: Uses existing TaskRouter + ModelRouter components\nSupports: PARALLEL, SEQUENTIAL, COLLABORATIVE execution modes",
          "line_range": [
            20,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
              "line_range": [
                28,
                44
              ],
              "parameters": [
                "self",
                "agent_routers",
                "task_classifier"
              ]
            },
            {
              "name": "orchestrate",
              "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
              "line_range": [
                46,
                135
              ],
              "parameters": [
                "self",
                "query",
                "execution_mode",
                "coordination_type",
                "context",
                "subtasks",
                "task_id"
              ]
            },
            {
              "name": "_suggest_execution_mode",
              "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "_suggest_coordination_type",
              "docstring": "Suggest coordination type based on execution mode",
              "line_range": [
                162,
                172
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            },
            {
              "name": "_validate_coordination_compatibility",
              "docstring": "Validate that coordination type is compatible with execution mode",
              "line_range": [
                174,
                186
              ],
              "parameters": [
                "self",
                "execution_mode",
                "coordination_type"
              ]
            },
            {
              "name": "get_orchestration_stats",
              "docstring": "Get orchestration statistics and available agents",
              "line_range": [
                188,
                201
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "len",
          "ParallelExecutor",
          "CollaborativeExecutor",
          "logger.info",
          "SequentialExecutor"
        ],
        "orchestrate": [
          "len",
          "str",
          "self._suggest_coordination_type",
          "OrchestrationResult",
          "logger.error",
          "self._suggest_execution_mode",
          "self._validate_coordination_compatibility",
          "int",
          "logger.warning",
          "ValueError",
          "logger.info",
          "OrchestrationTask",
          "datetime.now",
          "start_time.timestamp"
        ],
        "_suggest_execution_mode": [
          "ExecutionMode.suggest_mode_for_task",
          "logger.warning"
        ],
        "_suggest_coordination_type": [],
        "_validate_coordination_compatibility": [
          "compatible_combinations.get",
          "coordination_type.is_compatible_with_mode"
        ],
        "get_orchestration_stats": [
          "len",
          "list"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "CollaborativeExecutor",
        "Dict",
        "ExecutionMode",
        "List",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "TaskClassifier",
        "core",
        "datetime",
        "executors",
        "logging",
        "task_router",
        "typing"
      ],
      "hash": "15ef1421365f772d0d10ebb002a9b5ef46c79e30408acc2a5e7630155371aaff",
      "artifact_id": "21aefcdc-7979-4557-96ce-9574663eb375"
    },
    {
      "module_id": "src.llmgenie.orchestration.agent_orchestrator",
      "path": "src/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "module_doc": "Agent Orchestrator for Multi-Agent Task Coordination\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration implementation\nExtends existing TaskRouter/ModelRouter with orchestration capabilities.\n\nDesign principle: Composition over inheritance - leverages existing components.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with TaskRouter components",
          "line_range": [
            78,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_agent_routers",
          "docstring": "Initialize specialized ModelRouter instances for different agent roles",
          "line_range": [
            92,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "coordinate_multi_agent_tasks",
          "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
          "line_range": [
            101,
            145
          ],
          "parameters": [
            "self",
            "complex_task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_parallel",
          "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
          "line_range": [
            147,
            215
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_sequential",
          "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
          "line_range": [
            217,
            284
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_collaborative",
          "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
          "line_range": [
            286,
            347
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
          "line_range": [
            349,
            381
          ],
          "parameters": [
            "self",
            "query",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_score",
          "docstring": "Calculate quality score using existing QualityValidator",
          "line_range": [
            383,
            405
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_validate_result_quality",
          "docstring": "Validate result quality using existing Epic 5 QualityValidator",
          "line_range": [
            407,
            415
          ],
          "parameters": [
            "self",
            "execution_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_log_coordination_event",
          "docstring": "Log coordination event for analysis and improvement",
          "line_range": [
            417,
            433
          ],
          "parameters": [
            "self",
            "task",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_metrics",
          "docstring": "Get coordination performance metrics",
          "line_range": [
            435,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "manage_parallel_execution",
          "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
          "line_range": [
            456,
            484
          ],
          "parameters": [
            "self",
            "task_list"
          ],
          "decorators": []
        },
        {
          "name": "handle_inter_agent_communication",
          "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
          "line_range": [
            486,
            516
          ],
          "parameters": [
            "self",
            "sender_agent",
            "receiver_agent",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "execute_subtask",
          "docstring": "",
          "line_range": [
            160,
            182
          ],
          "parameters": [
            "router_name",
            "subtask"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist",
          "line_range": [
            28,
            32
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies",
          "line_range": [
            35,
            39
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration",
          "line_range": [
            43,
            52
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration",
          "line_range": [
            56,
            65
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AgentOrchestrator",
          "docstring": "Multi-Agent Orchestrator for Epic 5 Phase 3 Production Ready\n\nCoordinates multiple TaskRouter instances for complex multi-agent workflows.\nImplements patterns from Epic 5 checklist: parallel, sequential, collaborative execution.\n\nDesign: Composition with existing TaskRouter/ModelRouter components",
          "line_range": [
            68,
            516
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with TaskRouter components",
              "line_range": [
                78,
                90
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_agent_routers",
              "docstring": "Initialize specialized ModelRouter instances for different agent roles",
              "line_range": [
                92,
                99
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "coordinate_multi_agent_tasks",
              "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
              "line_range": [
                101,
                145
              ],
              "parameters": [
                "self",
                "complex_task"
              ]
            },
            {
              "name": "_execute_parallel",
              "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
              "line_range": [
                147,
                215
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_sequential",
              "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
              "line_range": [
                217,
                284
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_collaborative",
              "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
              "line_range": [
                286,
                347
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
              "line_range": [
                349,
                381
              ],
              "parameters": [
                "self",
                "query",
                "mode"
              ]
            },
            {
              "name": "_calculate_quality_score",
              "docstring": "Calculate quality score using existing QualityValidator",
              "line_range": [
                383,
                405
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_validate_result_quality",
              "docstring": "Validate result quality using existing Epic 5 QualityValidator",
              "line_range": [
                407,
                415
              ],
              "parameters": [
                "self",
                "execution_result",
                "task"
              ]
            },
            {
              "name": "_log_coordination_event",
              "docstring": "Log coordination event for analysis and improvement",
              "line_range": [
                417,
                433
              ],
              "parameters": [
                "self",
                "task",
                "result"
              ]
            },
            {
              "name": "get_coordination_metrics",
              "docstring": "Get coordination performance metrics",
              "line_range": [
                435,
                452
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "manage_parallel_execution",
              "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
              "line_range": [
                456,
                484
              ],
              "parameters": [
                "self",
                "task_list"
              ]
            },
            {
              "name": "handle_inter_agent_communication",
              "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
              "line_range": [
                486,
                516
              ],
              "parameters": [
                "self",
                "sender_agent",
                "receiver_agent",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityValidator",
          "self._initialize_agent_routers",
          "TaskClassifier"
        ],
        "_initialize_agent_routers": [
          "ModelRouter"
        ],
        "coordinate_multi_agent_tasks": [
          "self._calculate_quality_score",
          "str",
          "OrchestrationResult",
          "self._execute_sequential",
          "self._execute_collaborative",
          "self._log_coordination_event",
          "ValueError",
          "self._execute_parallel",
          "datetime.now"
        ],
        "_execute_parallel": [
          "len",
          "self._decompose_task"
        ],
        "execute_subtask": [
          "router.route_task",
          "router.execute_with_model"
        ],
        "_execute_sequential": [
          "len",
          "str",
          "router.route_task",
          "list",
          "OrchestrationResult",
          "r.get",
          "router.execute_with_model",
          "results.values",
          "enumerate",
          "self._decompose_task",
          "execution_result.get"
        ],
        "_execute_collaborative": [
          "str",
          "router.route_task",
          "self._validate_result_quality",
          "OrchestrationResult",
          "router.execute_with_model",
          "max",
          "collaborative_results.items"
        ],
        "_decompose_task": [
          "query.lower"
        ],
        "_calculate_quality_score": [
          "max",
          "r.get",
          "k.startswith",
          "self._validate_result_quality"
        ],
        "_validate_result_quality": [
          "execution_result.get"
        ],
        "_log_coordination_event": [
          "len",
          "datetime.now"
        ],
        "get_coordination_metrics": [
          "sum",
          "len",
          "e.get"
        ],
        "manage_parallel_execution": [
          "str",
          "self.coordinate_multi_agent_tasks",
          "OrchestrationResult",
          "enumerate",
          "processed_results.append",
          "isinstance",
          "asyncio.gather"
        ],
        "handle_inter_agent_communication": [
          "datetime.now",
          "message.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "QualityResult",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "task_router",
        "typing"
      ],
      "hash": "8de034bd011f87998ab0fe3acfba6fb9fd59a210e8dad03ecdfea02c67789df2",
      "artifact_id": "d04d4496-520a-4975-ab1f-c5ee0f4df463"
    },
    {
      "module_id": "src.llmgenie.cli.handoff_cli",
      "path": "src/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "module_doc": "CLI tool for handoff validation\nCan be used in CI/CD pipelines and workflows",
      "functions": [
        {
          "name": "load_handoff_config",
          "docstring": "Load handoff configuration from JSON file",
          "line_range": [
            18,
            28
          ],
          "parameters": [
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "create_handoff_package_from_config",
          "docstring": "Create HandoffPackage from configuration",
          "line_range": [
            30,
            49
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "print_validation_result",
          "docstring": "Print validation result to console",
          "line_range": [
            51,
            99
          ],
          "parameters": [
            "result",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "generate_template",
          "docstring": "Generate handoff template configuration",
          "line_range": [
            101,
            140
          ],
          "parameters": [
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI entry point",
          "line_range": [
            142,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_handoff_config": [
          "open",
          "print",
          "json.load",
          "sys.exit"
        ],
        "create_handoff_package_from_config": [
          "HandoffFile",
          "config.get",
          "HandoffPackage"
        ],
        "print_validation_result": [
          "len",
          "print"
        ],
        "generate_template": [
          "open",
          "print",
          "json.dump"
        ],
        "main": [
          "generate_template",
          "load_handoff_config",
          "print",
          "parser.parse_args",
          "print_validation_result",
          "template_parser.add_argument",
          "argparse.ArgumentParser",
          "check_parser.add_argument",
          "parser.print_help",
          "validator.validate_package",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "validate_parser.add_argument",
          "create_handoff_package_from_config",
          "HandoffValidator",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Dict",
        "HandoffFile",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "Path",
        "api.handoff_validator",
        "argparse",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d45d8b28e2936eac9dfcaf32ffbda0bc1dd893350c36d5b1cd213066e2615c62",
      "artifact_id": "48df1a2b-259a-4754-aa98-35f56be37988"
    },
    {
      "module_id": "src.llmgenie.task_router.quality_intelligence",
      "path": "src/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "module_doc": "Quality Intelligence System for Smart LLM Routing\n\nProvides feedback loop mechanism for continuous improvement of routing decisions\nBased on Phase 2D architecture design - lightweight implementation for production use",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize quality intelligence with data persistence",
          "line_range": [
            68,
            80
          ],
          "parameters": [
            "self",
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "record_execution_result",
          "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
          "line_range": [
            82,
            128
          ],
          "parameters": [
            "self",
            "task_id",
            "routing_decision",
            "quality_result",
            "execution_time",
            "query",
            "task_type",
            "success",
            "user_feedback"
          ],
          "decorators": []
        },
        {
          "name": "analyze_model_performance_trends",
          "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
          "line_range": [
            130,
            197
          ],
          "parameters": [
            "self",
            "model_choice",
            "task_type",
            "days_back"
          ],
          "decorators": []
        },
        {
          "name": "suggest_routing_improvements",
          "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
          "line_range": [
            199,
            246
          ],
          "parameters": [
            "self",
            "min_confidence"
          ],
          "decorators": []
        },
        {
          "name": "update_quality_thresholds",
          "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
          "line_range": [
            248,
            298
          ],
          "parameters": [
            "self",
            "task_type",
            "performance_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_historical_data",
          "docstring": "Load historical performance data from disk",
          "line_range": [
            300,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_persist_result",
          "docstring": "Persist execution result to disk",
          "line_range": [
            316,
            332
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_trend",
          "docstring": "Calculate trend direction from list of values",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self",
            "values"
          ],
          "decorators": []
        },
        {
          "name": "get_summary_stats",
          "docstring": "Get summary statistics for monitoring dashboard",
          "line_range": [
            355,
            380
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionResult",
          "docstring": "Record of a single task execution for quality intelligence",
          "line_range": [
            20,
            30
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "PerformanceReport",
          "docstring": "Analysis report of model performance trends",
          "line_range": [
            34,
            43
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RoutingRecommendation",
          "docstring": "Recommendation for improving routing decisions",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityIntelligence",
          "docstring": "Quality Intelligence System for continuous routing improvement\n\nLightweight implementation focusing on:\n- Execution result tracking\n- Performance trend analysis  \n- Routing improvement recommendations\n- Adaptive threshold management",
          "line_range": [
            57,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize quality intelligence with data persistence",
              "line_range": [
                68,
                80
              ],
              "parameters": [
                "self",
                "data_dir"
              ]
            },
            {
              "name": "record_execution_result",
              "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
              "line_range": [
                82,
                128
              ],
              "parameters": [
                "self",
                "task_id",
                "routing_decision",
                "quality_result",
                "execution_time",
                "query",
                "task_type",
                "success",
                "user_feedback"
              ]
            },
            {
              "name": "analyze_model_performance_trends",
              "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
              "line_range": [
                130,
                197
              ],
              "parameters": [
                "self",
                "model_choice",
                "task_type",
                "days_back"
              ]
            },
            {
              "name": "suggest_routing_improvements",
              "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
              "line_range": [
                199,
                246
              ],
              "parameters": [
                "self",
                "min_confidence"
              ]
            },
            {
              "name": "update_quality_thresholds",
              "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
              "line_range": [
                248,
                298
              ],
              "parameters": [
                "self",
                "task_type",
                "performance_data"
              ]
            },
            {
              "name": "_load_historical_data",
              "docstring": "Load historical performance data from disk",
              "line_range": [
                300,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_persist_result",
              "docstring": "Persist execution result to disk",
              "line_range": [
                316,
                332
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_calculate_trend",
              "docstring": "Calculate trend direction from list of values",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self",
                "values"
              ]
            },
            {
              "name": "get_summary_stats",
              "docstring": "Get summary statistics for monitoring dashboard",
              "line_range": [
                355,
                380
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "deque",
          "defaultdict",
          "self._load_historical_data"
        ],
        "record_execution_result": [
          "ExecutionResult",
          "self._persist_result",
          "datetime.now"
        ],
        "analyze_model_performance_trends": [
          "sum",
          "len",
          "sorted",
          "list",
          "min",
          "PerformanceReport",
          "reports.append",
          "datetime.fromisoformat",
          "self._calculate_trend",
          "timedelta",
          "datetime.now"
        ],
        "suggest_routing_improvements": [
          "sorted",
          "len",
          "recommendations.append",
          "self.analyze_model_performance_trends",
          "RoutingRecommendation",
          "min",
          "task_reports.items",
          "reports.sort",
          "defaultdict"
        ],
        "update_quality_thresholds": [
          "sum",
          "len",
          "min",
          "max"
        ],
        "_load_historical_data": [
          "data_file.exists",
          "open",
          "print",
          "task_data.items",
          "json.load",
          "TaskType",
          "data.get"
        ],
        "_persist_result": [
          "json.dumps",
          "open",
          "asdict",
          "f.write",
          "print",
          "datetime.now"
        ],
        "_calculate_trend": [
          "sum",
          "len",
          "range"
        ],
        "get_summary_stats": [
          "sum",
          "len",
          "datetime.now",
          "defaultdict",
          "dict"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "QualityResult",
        "TaskType",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "defaultdict",
        "deque",
        "json",
        "pathlib",
        "quality_validator",
        "task_classifier",
        "timedelta",
        "typing"
      ],
      "hash": "c5c8788dcc50b90151676974f682e30850cb91b3a3941f1a4296497da0c98091",
      "artifact_id": "c8c7366e-ef59-4dca-9f48-efa7835fdc45"
    },
    {
      "module_id": "src.llmgenie.task_router.task_classifier",
      "path": "src/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "module_doc": "Task Classification Engine for Smart LLM Routing\n\nBased on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference\n- Mixed complexity handling \u2192 Smart routing",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize classifier with Epic 5 research patterns",
          "line_range": [
            55,
            78
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "classify_task",
          "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
          "line_range": [
            80,
            115
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_determine_task_type",
          "docstring": "Determine primary task type from query content",
          "line_range": [
            117,
            146
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity",
          "docstring": "Calculate task complexity based on content analysis",
          "line_range": [
            148,
            191
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_routing_preferences",
          "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
          "line_range": [
            193,
            219
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_confidence",
          "docstring": "Calculate confidence score for classification",
          "line_range": [
            221,
            241
          ],
          "parameters": [
            "self",
            "query",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_generate_reasoning",
          "docstring": "Generate human-readable reasoning for classification",
          "line_range": [
            243,
            258
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity",
            "ollama_pref",
            "claude_pref"
          ],
          "decorators": []
        },
        {
          "name": "get_complexity_score",
          "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
          "line_range": [
            260,
            270
          ],
          "parameters": [
            "self",
            "task_dict"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskType",
          "docstring": "Task classification types based on Epic 5 research",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ComplexityLevel",
          "docstring": "Task complexity levels for routing decisions",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ClassificationResult",
          "docstring": "Result of task classification analysis",
          "line_range": [
            38,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskClassifier",
          "docstring": "Smart Task Classifier for LLM routing decisions\n\nIntegrates with existing AgentRequest pattern from main.py:98-112",
          "line_range": [
            48,
            270
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize classifier with Epic 5 research patterns",
              "line_range": [
                55,
                78
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "classify_task",
              "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
              "line_range": [
                80,
                115
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_determine_task_type",
              "docstring": "Determine primary task type from query content",
              "line_range": [
                117,
                146
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_calculate_complexity",
              "docstring": "Calculate task complexity based on content analysis",
              "line_range": [
                148,
                191
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_routing_preferences",
              "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
              "line_range": [
                193,
                219
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_calculate_confidence",
              "docstring": "Calculate confidence score for classification",
              "line_range": [
                221,
                241
              ],
              "parameters": [
                "self",
                "query",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_generate_reasoning",
              "docstring": "Generate human-readable reasoning for classification",
              "line_range": [
                243,
                258
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity",
                "ollama_pref",
                "claude_pref"
              ]
            },
            {
              "name": "get_complexity_score",
              "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
              "line_range": [
                260,
                270
              ],
              "parameters": [
                "self",
                "task_dict"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "classify_task": [
          "self._calculate_confidence",
          "self._determine_task_type",
          "self._calculate_complexity",
          "self._get_routing_preferences",
          "ClassificationResult",
          "self._generate_reasoning",
          "query.lower"
        ],
        "_determine_task_type": [
          "re.search",
          "any",
          "context.get"
        ],
        "_calculate_complexity": [
          "sum",
          "len",
          "any",
          "context.get",
          "query.split"
        ],
        "_get_routing_preferences": [],
        "_calculate_confidence": [
          "len",
          "re.search",
          "any",
          "min",
          "query.split",
          "query.lower"
        ],
        "_generate_reasoning": [
          "reasoning_parts.append"
        ],
        "get_complexity_score": [
          "self.classify_task",
          "task_dict.get"
        ]
      },
      "dependencies": [
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Tuple",
        "dataclass",
        "dataclasses",
        "enum",
        "re",
        "typing"
      ],
      "hash": "1524140f92d8dcaea7be637e602972fcb202050baa85e53f8ee8501d8ad33988",
      "artifact_id": "1ccd834f-eccb-4544-b3fe-322f64e4623f"
    },
    {
      "module_id": "src.llmgenie.task_router.model_router",
      "path": "src/llmgenie/task_router/model_router.py",
      "category": "core",
      "module_doc": "Model Router for Smart LLM Selection\n\nIntegrates with existing FastAPI infrastructure (main.py:98-112)\nExtends AgentRequest/AgentResponse pattern with Ollama backend",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
          "line_range": [
            58,
            87
          ],
          "parameters": [
            "self",
            "classifier",
            "quality_validator",
            "quality_intelligence",
            "rag_enhancer"
          ],
          "decorators": []
        },
        {
          "name": "route_task",
          "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
          "line_range": [
            89,
            148
          ],
          "parameters": [
            "self",
            "query",
            "context",
            "model_preference"
          ],
          "decorators": []
        },
        {
          "name": "_select_quality_aware_model",
          "docstring": "Select optimal model based on task classification AND quality requirements",
          "line_range": [
            150,
            177
          ],
          "parameters": [
            "self",
            "classification",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_candidate_models",
          "docstring": "Get candidate models based on task classification preferences",
          "line_range": [
            179,
            204
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_select_optimal_model_legacy",
          "docstring": "Legacy model selection logic (fallback)",
          "line_range": [
            206,
            227
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_model",
          "docstring": "Execute task with specified model",
          "line_range": [
            229,
            262
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_ollama_task",
          "docstring": "Execute task using Ollama API",
          "line_range": [
            264,
            288
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_claude_task",
          "docstring": "Execute task using Claude API - placeholder for integration",
          "line_range": [
            290,
            292
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_adaptive_fallback",
          "docstring": "Determine adaptive fallback model based on quality requirements",
          "line_range": [
            294,
            311
          ],
          "parameters": [
            "self",
            "primary_model",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_fallback_model_legacy",
          "docstring": "Legacy fallback model mapping",
          "line_range": [
            313,
            323
          ],
          "parameters": [
            "self",
            "primary_model"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_threshold",
          "docstring": "Calculate minimum quality threshold based on task complexity",
          "line_range": [
            325,
            335
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_create_preference_decision",
          "docstring": "Create routing decision for user-specified model preference",
          "line_range": [
            337,
            350
          ],
          "parameters": [
            "self",
            "model_preference",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_generate_routing_reasoning",
          "docstring": "Generate human-readable reasoning for routing decision",
          "line_range": [
            352,
            363
          ],
          "parameters": [
            "self",
            "classification",
            "selected_model"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_quality_tracking",
          "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
          "line_range": [
            365,
            452
          ],
          "parameters": [
            "self",
            "query",
            "task_id",
            "model_preference",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ModelChoice",
          "docstring": "Available LLM backends for task execution",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RoutingDecision",
          "docstring": "Result of routing decision process",
          "line_range": [
            40,
            47
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelRouter",
          "docstring": "Smart Model Router for LLM task execution\n\nExtends existing FastAPI agent pattern from main.py:98-112\nIntegrates with AgentRequest/AgentResponse models",
          "line_range": [
            50,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
              "line_range": [
                58,
                87
              ],
              "parameters": [
                "self",
                "classifier",
                "quality_validator",
                "quality_intelligence",
                "rag_enhancer"
              ]
            },
            {
              "name": "route_task",
              "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
              "line_range": [
                89,
                148
              ],
              "parameters": [
                "self",
                "query",
                "context",
                "model_preference"
              ]
            },
            {
              "name": "_select_quality_aware_model",
              "docstring": "Select optimal model based on task classification AND quality requirements",
              "line_range": [
                150,
                177
              ],
              "parameters": [
                "self",
                "classification",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_candidate_models",
              "docstring": "Get candidate models based on task classification preferences",
              "line_range": [
                179,
                204
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_select_optimal_model_legacy",
              "docstring": "Legacy model selection logic (fallback)",
              "line_range": [
                206,
                227
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "execute_with_model",
              "docstring": "Execute task with specified model",
              "line_range": [
                229,
                262
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_ollama_task",
              "docstring": "Execute task using Ollama API",
              "line_range": [
                264,
                288
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_claude_task",
              "docstring": "Execute task using Claude API - placeholder for integration",
              "line_range": [
                290,
                292
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_adaptive_fallback",
              "docstring": "Determine adaptive fallback model based on quality requirements",
              "line_range": [
                294,
                311
              ],
              "parameters": [
                "self",
                "primary_model",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_fallback_model_legacy",
              "docstring": "Legacy fallback model mapping",
              "line_range": [
                313,
                323
              ],
              "parameters": [
                "self",
                "primary_model"
              ]
            },
            {
              "name": "_calculate_quality_threshold",
              "docstring": "Calculate minimum quality threshold based on task complexity",
              "line_range": [
                325,
                335
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_create_preference_decision",
              "docstring": "Create routing decision for user-specified model preference",
              "line_range": [
                337,
                350
              ],
              "parameters": [
                "self",
                "model_preference",
                "query"
              ]
            },
            {
              "name": "_generate_routing_reasoning",
              "docstring": "Generate human-readable reasoning for routing decision",
              "line_range": [
                352,
                363
              ],
              "parameters": [
                "self",
                "classification",
                "selected_model"
              ]
            },
            {
              "name": "execute_with_quality_tracking",
              "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
              "line_range": [
                365,
                452
              ],
              "parameters": [
                "self",
                "query",
                "task_id",
                "model_preference",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityIntelligence",
          "QualityValidator",
          "print",
          "PromptEnhancer",
          "TaskClassifier",
          "RAGConfig"
        ],
        "route_task": [
          "len",
          "self._select_quality_aware_model",
          "print",
          "self._calculate_quality_threshold",
          "self._generate_routing_reasoning",
          "RoutingDecision",
          "self._create_preference_decision",
          "self._get_adaptive_fallback"
        ],
        "_select_quality_aware_model": [
          "model_scores.values",
          "self._get_candidate_models",
          "self._select_optimal_model_legacy",
          "model_scores.items",
          "max"
        ],
        "_get_candidate_models": [
          "set",
          "candidates.extend",
          "candidates.append",
          "list"
        ],
        "_select_optimal_model_legacy": [],
        "execute_with_model": [
          "str",
          "self._execute_ollama_task",
          "self._execute_claude_task",
          "ValueError",
          "datetime.now"
        ],
        "_execute_ollama_task": [
          "client.post",
          "response.json",
          "response.raise_for_status",
          "httpx.AsyncClient"
        ],
        "_execute_claude_task": [],
        "_get_adaptive_fallback": [
          "quality_requirements.get",
          "high_quality_fallback.get",
          "self._get_fallback_model_legacy"
        ],
        "_get_fallback_model_legacy": [
          "fallback_map.get"
        ],
        "_calculate_quality_threshold": [
          "base_thresholds.get"
        ],
        "_create_preference_decision": [
          "RoutingDecision",
          "self._get_fallback_model_legacy"
        ],
        "_generate_routing_reasoning": [],
        "execute_with_quality_tracking": [
          "self.execute_with_model",
          "QualityResult",
          "execution_result.get",
          "self.route_task"
        ]
      },
      "dependencies": [
        "Any",
        "ClassificationResult",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "PromptEnhancer",
        "QualityIntelligence",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RAGConfig",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "httpx",
        "quality_intelligence",
        "quality_validator",
        "rag_context",
        "task_classifier",
        "typing"
      ],
      "hash": "e55b69a4b4fd52267048ee3bd10a6675d836ea13d7446809934890ad3ec21b10",
      "artifact_id": "90e08b26-a139-4297-aa11-27f26d3ffd73"
    },
    {
      "module_id": "src.llmgenie.task_router.__init__",
      "path": "src/llmgenie/task_router/__init__.py",
      "category": "cli",
      "module_doc": "Task Router Module for LLMGenie\n\nIntelligent task routing between Claude and Ollama based on:\n- Task complexity analysis\n- Model capability matching  \n- Performance optimization\n- Quality requirements\n\nIntegrates with existing FastAPI agent infrastructure.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "ComplexityLevel",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "model_router",
        "quality_validator",
        "task_classifier"
      ],
      "hash": "4d7f0b94bbf729690622d92f329ef04a66e4caa3a3cf3f874e745945b155d75a",
      "artifact_id": "39916b15-0155-457a-be66-92d3bb50f9b9"
    },
    {
      "module_id": "src.llmgenie.task_router.quality_validator",
      "path": "src/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "module_doc": "Quality Validator for LLM Output Assessment\n\nEnhanced implementation for Epic 5 Phase 2: Quality Validation Pipeline\nProvides comprehensive validation for code and text outputs with automatic fallback",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize validator with quality rules and thresholds",
          "line_range": [
            48,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_code_output",
          "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            76,
            107
          ],
          "parameters": [
            "self",
            "code",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "_validate_python_code",
          "docstring": "Validate Python code specifically",
          "line_range": [
            109,
            167
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_javascript_code",
          "docstring": "Basic JavaScript validation",
          "line_range": [
            169,
            207
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_generic_code",
          "docstring": "Generic code validation for unknown languages",
          "line_range": [
            209,
            239
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "validate_text_output",
          "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            241,
            320
          ],
          "parameters": [
            "self",
            "text",
            "expected_type"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_coherence_score",
          "docstring": "Calculate text coherence based on transition words and structure",
          "line_range": [
            322,
            337
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate text completeness based on structure and content indicators",
          "line_range": [
            339,
            356
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "should_fallback",
          "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
          "line_range": [
            358,
            373
          ],
          "parameters": [
            "self",
            "result",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "get_quality_metrics",
          "docstring": "Extract standardized quality metrics for monitoring",
          "line_range": [
            375,
            383
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "predict_quality_requirements",
          "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
          "line_range": [
            385,
            415
          ],
          "parameters": [
            "self",
            "task_description",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "assess_model_capability",
          "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
          "line_range": [
            417,
            446
          ],
          "parameters": [
            "self",
            "model_choice",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "integrate_deepeval_metrics",
          "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
          "line_range": [
            448,
            482
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "integrate_trulens_monitoring",
          "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
          "line_range": [
            484,
            530
          ],
          "parameters": [
            "self",
            "task_id",
            "result"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "QualityScore",
          "docstring": "Quality assessment levels",
          "line_range": [
            17,
            23
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "QualityResult",
          "docstring": "Result of quality validation",
          "line_range": [
            27,
            34
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityValidator",
          "docstring": "Quality Validator for LLM outputs\n\nEnhanced implementation with real validation logic:\n- Code syntax and structure validation\n- Text coherence and completeness analysis\n- Automatic fallback decision making\n- Quality thresholds based on task type",
          "line_range": [
            37,
            530
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize validator with quality rules and thresholds",
              "line_range": [
                48,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_code_output",
              "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                76,
                107
              ],
              "parameters": [
                "self",
                "code",
                "language"
              ]
            },
            {
              "name": "_validate_python_code",
              "docstring": "Validate Python code specifically",
              "line_range": [
                109,
                167
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_javascript_code",
              "docstring": "Basic JavaScript validation",
              "line_range": [
                169,
                207
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_generic_code",
              "docstring": "Generic code validation for unknown languages",
              "line_range": [
                209,
                239
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "validate_text_output",
              "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                241,
                320
              ],
              "parameters": [
                "self",
                "text",
                "expected_type"
              ]
            },
            {
              "name": "_calculate_coherence_score",
              "docstring": "Calculate text coherence based on transition words and structure",
              "line_range": [
                322,
                337
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate text completeness based on structure and content indicators",
              "line_range": [
                339,
                356
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "should_fallback",
              "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
              "line_range": [
                358,
                373
              ],
              "parameters": [
                "self",
                "result",
                "task_type"
              ]
            },
            {
              "name": "get_quality_metrics",
              "docstring": "Extract standardized quality metrics for monitoring",
              "line_range": [
                375,
                383
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "predict_quality_requirements",
              "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
              "line_range": [
                385,
                415
              ],
              "parameters": [
                "self",
                "task_description",
                "task_type"
              ]
            },
            {
              "name": "assess_model_capability",
              "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
              "line_range": [
                417,
                446
              ],
              "parameters": [
                "self",
                "model_choice",
                "quality_requirements"
              ]
            },
            {
              "name": "integrate_deepeval_metrics",
              "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
              "line_range": [
                448,
                482
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "integrate_trulens_monitoring",
              "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
              "line_range": [
                484,
                530
              ],
              "parameters": [
                "self",
                "task_id",
                "result"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "validate_code_output": [
          "self._validate_generic_code",
          "code.strip",
          "self._validate_javascript_code",
          "language.lower",
          "QualityResult",
          "self._validate_python_code"
        ],
        "_validate_python_code": [
          "len",
          "ast.parse",
          "str",
          "re.findall",
          "re.search",
          "min",
          "code.split",
          "QualityResult",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "_validate_javascript_code": [
          "len",
          "re.search",
          "min",
          "code.split",
          "QualityResult",
          "code.count",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "_validate_generic_code": [
          "len",
          "re.search",
          "min",
          "code.split",
          "code.strip",
          "QualityResult",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "validate_text_output": [
          "len",
          "self._calculate_coherence_score",
          "text.split",
          "p.strip",
          "re.search",
          "text.lower",
          "min",
          "s.strip",
          "max",
          "issues.append",
          "round",
          "QualityScore",
          "QualityResult",
          "text.strip",
          "self._calculate_completeness_score",
          "bool"
        ],
        "_calculate_coherence_score": [
          "len",
          "set",
          "text.split",
          "re.search",
          "min"
        ],
        "_calculate_completeness_score": [
          "re.search",
          "min",
          "text.strip"
        ],
        "should_fallback": [],
        "get_quality_metrics": [
          "len"
        ],
        "predict_quality_requirements": [
          "max"
        ],
        "assess_model_capability": [
          "max",
          "quality_requirements.get",
          "min",
          "model_performance_data.get"
        ],
        "integrate_deepeval_metrics": [
          "relevancy_metric.measure",
          "CoherenceMetric",
          "coherence_metric.measure",
          "print",
          "LLMTestCase",
          "RelevancyMetric"
        ],
        "integrate_trulens_monitoring": [
          "Feedback",
          "TruLlama",
          "recording.record_metrics",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "App",
        "CoherenceMetric",
        "Dict",
        "Enum",
        "Feedback",
        "LLMTestCase",
        "List",
        "Optional",
        "RelevancyMetric",
        "TaskType",
        "TruLlama",
        "Tuple",
        "ast",
        "dataclass",
        "dataclasses",
        "deepeval.metrics",
        "deepeval.test_case",
        "enum",
        "json",
        "re",
        "task_router.task_classifier",
        "trulens_eval",
        "trulens_eval.app",
        "typing"
      ],
      "hash": "4fde90c0beab73512575c35fa58af6d39c56c997788e84539b664ff144dfe176",
      "artifact_id": "2aea726e-9f72-40d9-95c3-8920a19d5e8b"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.execution_modes",
      "path": "src/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "module_doc": "Execution modes for multi-agent orchestration\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration patterns\nSingle responsibility: Define execution mode types and behavior",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of execution mode",
          "line_range": [
            48,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_use_cases",
          "docstring": "Get typical use cases for this execution mode",
          "line_range": [
            57,
            76
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_mode",
          "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
          "line_range": [
            79,
            100
          ],
          "parameters": [
            "cls",
            "task_description"
          ],
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist\n\nBased on Epic 5 research findings and checklist requirements:\n- Parallel task execution (documentation + code generation)\n- Sequential handoffs (design \u2192 implementation \u2192 review)  \n- Collaborative problem solving (multiple models, best result)",
          "line_range": [
            11,
            100
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of execution mode",
              "line_range": [
                48,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_use_cases",
              "docstring": "Get typical use cases for this execution mode",
              "line_range": [
                57,
                76
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_mode",
              "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
              "line_range": [
                79,
                100
              ],
              "parameters": [
                "cls",
                "task_description"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_use_cases": [
          "use_cases.get"
        ],
        "suggest_mode": [
          "any",
          "task_description.lower"
        ]
      },
      "dependencies": [
        "Enum",
        "enum"
      ],
      "hash": "9ac851f29c2f57f7816c66f9f7e952c7e747f1880994cd99c42ab2135bc1a329",
      "artifact_id": "d2c08011-8666-45d3-8d62-e977b1208715"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.__init__",
      "path": "src/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "module_doc": "Core types and models for Agent Orchestration\n\nEpic 5 Phase 3.1: Modular orchestration architecture\nSingle responsibility: Define core types and data models",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "coordination_types",
        "execution_modes",
        "task_models"
      ],
      "hash": "8304eeadcb25757d10007da0558bd44a097fa0d3a5c33b628f15392e17f797bf",
      "artifact_id": "3313ac3d-194d-436b-a5bd-5abd4c230c56"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.coordination_types",
      "path": "src/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "module_doc": "Agent coordination types for orchestration\n\nEpic 5 Phase 3.1: Agent coordination strategies  \nSingle responsibility: Define coordination behavior types",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of coordination type",
          "line_range": [
            45,
            52
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_overhead",
          "docstring": "Get expected coordination overhead level",
          "line_range": [
            54,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_suitable_for_mode",
          "docstring": "Check if coordination type is suitable for execution mode",
          "line_range": [
            63,
            82
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies for multi-agent systems\n\nDefines how agents coordinate and synchronize during task execution",
          "line_range": [
            11,
            82
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of coordination type",
              "line_range": [
                45,
                52
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_coordination_overhead",
              "docstring": "Get expected coordination overhead level",
              "line_range": [
                54,
                61
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_suitable_for_mode",
              "docstring": "Check if coordination type is suitable for execution mode",
              "line_range": [
                63,
                82
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_coordination_overhead": [
          "overhead.get"
        ],
        "is_suitable_for_mode": [
          "compatibility.get"
        ]
      },
      "dependencies": [
        "Enum",
        "ExecutionMode",
        "enum",
        "execution_modes"
      ],
      "hash": "4cff4ef946fc869a8a7824f878513933490778e73880cd2e0bd921972dc0eb1f",
      "artifact_id": "58edd5a2-1a47-429d-9bd1-416021a0e03a"
    },
    {
      "module_id": "src.llmgenie.orchestration.core.task_models",
      "path": "src/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "module_doc": "Task data models for orchestration\n\nEpic 5 Phase 3.1: Orchestration task modeling\nSingle responsibility: Define task and result data structures",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "Validate task configuration after initialization",
          "line_range": [
            53,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_agents_needed",
          "docstring": "Estimate number of agents needed for this task",
          "line_range": [
            66,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_duration",
          "docstring": "Estimate task duration in seconds",
          "line_range": [
            76,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_successful",
          "docstring": "Check if the orchestration was successful",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_summary",
          "docstring": "Get a human-readable summary of the result",
          "line_range": [
            132,
            139
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_performance_metrics",
          "docstring": "Get performance metrics for analysis",
          "line_range": [
            141,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration\n\nEncapsulates all information needed for multi-agent task execution",
          "line_range": [
            17,
            88
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Validate task configuration after initialization",
              "line_range": [
                53,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_agents_needed",
              "docstring": "Estimate number of agents needed for this task",
              "line_range": [
                66,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_duration",
              "docstring": "Estimate task duration in seconds",
              "line_range": [
                76,
                88
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration\n\nContains execution results and performance metrics",
          "line_range": [
            92,
            149
          ],
          "methods": [
            {
              "name": "is_successful",
              "docstring": "Check if the orchestration was successful",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_summary",
              "docstring": "Get a human-readable summary of the result",
              "line_range": [
                132,
                139
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_performance_metrics",
              "docstring": "Get performance metrics for analysis",
              "line_range": [
                141,
                149
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "datetime.now",
          "ValueError"
        ],
        "get_estimated_agents_needed": [
          "len"
        ],
        "get_estimated_duration": [
          "len"
        ],
        "is_successful": [],
        "get_summary": [],
        "get_performance_metrics": [
          "len",
          "self.is_successful"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "Dict",
        "ExecutionMode",
        "List",
        "Optional",
        "coordination_types",
        "dataclass",
        "dataclasses",
        "datetime",
        "execution_modes",
        "field",
        "typing"
      ],
      "hash": "fb639631d019c43ec74c72cf47ad23aa4f9a5330458d0e80afa075b6e00dfa3b",
      "artifact_id": "1e575320-1beb-4e65-bf8e-31e19a3b54d3"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.collaborative_executor",
      "path": "src/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "module_doc": "Collaborative execution strategy\n\nEpic 5 Phase 3.1: Collaborative problem solving\nSingle responsibility: Multiple agents solve same problem, best result selected",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
          "line_range": [
            28,
            119
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_with_agent",
          "docstring": "Execute task with single agent",
          "line_range": [
            121,
            154
          ],
          "parameters": [
            "self",
            "router_name",
            "router",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_assess_result_quality",
          "docstring": "Assess quality of agent result using QualityValidator",
          "line_range": [
            156,
            175
          ],
          "parameters": [
            "self",
            "agent_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_basic_quality_assessment",
          "docstring": "Basic quality assessment fallback",
          "line_range": [
            177,
            206
          ],
          "parameters": [
            "self",
            "content",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_consensus",
          "docstring": "Analyze consensus between agent results",
          "line_range": [
            208,
            245
          ],
          "parameters": [
            "self",
            "collaborative_results"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_variance",
          "docstring": "Calculate variance in quality scores across agents",
          "line_range": [
            247,
            258
          ],
          "parameters": [
            "self",
            "quality_scores"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CollaborativeExecutor",
          "docstring": "Collaborative problem solving execution strategy\n\nEpic 5 example: Multiple models generate solution, highest quality chosen\nBenefit: Quality optimization, redundancy, multiple perspectives",
          "line_range": [
            15,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
              "line_range": [
                28,
                119
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_with_agent",
              "docstring": "Execute task with single agent",
              "line_range": [
                121,
                154
              ],
              "parameters": [
                "self",
                "router_name",
                "router",
                "task"
              ]
            },
            {
              "name": "_assess_result_quality",
              "docstring": "Assess quality of agent result using QualityValidator",
              "line_range": [
                156,
                175
              ],
              "parameters": [
                "self",
                "agent_result",
                "task"
              ]
            },
            {
              "name": "_basic_quality_assessment",
              "docstring": "Basic quality assessment fallback",
              "line_range": [
                177,
                206
              ],
              "parameters": [
                "self",
                "content",
                "task"
              ]
            },
            {
              "name": "_analyze_consensus",
              "docstring": "Analyze consensus between agent results",
              "line_range": [
                208,
                245
              ],
              "parameters": [
                "self",
                "collaborative_results"
              ]
            },
            {
              "name": "_calculate_quality_variance",
              "docstring": "Calculate variance in quality scores across agents",
              "line_range": [
                247,
                258
              ],
              "parameters": [
                "self",
                "quality_scores"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityValidator"
        ],
        "execute": [
          "str",
          "list",
          "max",
          "self._execute_with_agent",
          "collaborative_results.items",
          "self._analyze_consensus",
          "datetime.now",
          "self._assess_result_quality",
          "collaborative_results.get",
          "r.get",
          "any",
          "collaborative_results.keys",
          "best_result.get",
          "collaborative_results.values",
          "self._calculate_quality_variance",
          "len",
          "agents_used.append",
          "OrchestrationResult",
          "result.get",
          "quality_scores.items"
        ],
        "_execute_with_agent": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_assess_result_quality": [
          "str",
          "float",
          "self._basic_quality_assessment",
          "agent_result.get",
          "isinstance",
          "hasattr",
          "result_data.get"
        ],
        "_basic_quality_assessment": [
          "len",
          "content_lower.split",
          "set",
          "content.strip",
          "any",
          "min",
          "content.lower",
          "isinstance",
          "task_lower.split"
        ],
        "_analyze_consensus": [
          "len",
          "str",
          "set.intersection",
          "set",
          "contents.append",
          "content.lower",
          "collaborative_results.values",
          "content.split",
          "locals",
          "isinstance",
          "result.get",
          "result_data.get",
          "set.union"
        ],
        "_calculate_quality_variance": [
          "sum",
          "len",
          "quality_scores.values",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "QualityResult",
        "QualityValidator",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "a0c80095b946b77b07b6dbb347d34a9b0e63f3572770dc82de92477fc6282f46",
      "artifact_id": "ae6fc9c4-2703-44a8-ad28-b244b3b40af3"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.parallel_executor",
      "path": "src/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "module_doc": "Parallel execution strategy\n\nEpic 5 Phase 3.1: Parallel task execution \nSingle responsibility: Execute multiple subtasks simultaneously",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
          "line_range": [
            28,
            90
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_subtask",
          "docstring": "Execute single subtask with specified router",
          "line_range": [
            92,
            129
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
          "line_range": [
            131,
            161
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ParallelExecutor",
          "docstring": "Parallel task execution strategy\n\nEpic 5 example: documentation + code generation simultaneously\nBenefit: Maximum speed, resource utilization",
          "line_range": [
            16,
            161
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
              "line_range": [
                28,
                90
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_subtask",
              "docstring": "Execute single subtask with specified router",
              "line_range": [
                92,
                129
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
              "line_range": [
                131,
                161
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "len",
          "str",
          "set",
          "list",
          "agents_used.append",
          "OrchestrationResult",
          "parallel_tasks.append",
          "enumerate",
          "self._decompose_task",
          "isinstance",
          "self._execute_subtask",
          "result.get",
          "asyncio.gather",
          "datetime.now"
        ],
        "_execute_subtask": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_decompose_task": [
          "any",
          "query.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "asyncio",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "2c482ec2f4d28a3d8502ea47101d535569a8959edf61524d38fd5eda4a5ef938",
      "artifact_id": "5adef7ef-cb43-41bb-afdd-b541e14541f5"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.sequential_executor",
      "path": "src/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "module_doc": "Sequential execution strategy\n\nEpic 5 Phase 3.1: Sequential handoffs execution\nSingle responsibility: Execute tasks in sequence with context handoffs",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            25
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
          "line_range": [
            27,
            104
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_step",
          "docstring": "Execute single sequential step with context",
          "line_range": [
            106,
            148
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_query_with_context",
          "docstring": "Enhance query with context from previous steps for better handoff",
          "line_range": [
            150,
            167
          ],
          "parameters": [
            "self",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary from step result for context handoff",
          "line_range": [
            169,
            183
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_extract_key_outputs",
          "docstring": "Extract key outputs for next step context",
          "line_range": [
            185,
            196
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_sequential_task",
          "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
          "line_range": [
            198,
            236
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SequentialExecutor",
          "docstring": "Sequential handoffs execution strategy\n\nEpic 5 example: design \u2192 implementation \u2192 review\nBenefit: Context preservation, logical workflow",
          "line_range": [
            15,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                25
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
              "line_range": [
                27,
                104
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_step",
              "docstring": "Execute single sequential step with context",
              "line_range": [
                106,
                148
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_enhance_query_with_context",
              "docstring": "Enhance query with context from previous steps for better handoff",
              "line_range": [
                150,
                167
              ],
              "parameters": [
                "self",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary from step result for context handoff",
              "line_range": [
                169,
                183
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_extract_key_outputs",
              "docstring": "Extract key outputs for next step context",
              "line_range": [
                185,
                196
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_decompose_sequential_task",
              "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
              "line_range": [
                198,
                236
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "len",
          "self._extract_summary",
          "str",
          "list",
          "agents_used.append",
          "self._extract_key_outputs",
          "OrchestrationResult",
          "enumerate",
          "self._decompose_sequential_task",
          "self._execute_step",
          "step_result.get",
          "datetime.now"
        ],
        "_execute_step": [
          "str",
          "self._enhance_query_with_context",
          "list",
          "router.route_task",
          "context.keys",
          "router.execute_with_model"
        ],
        "_enhance_query_with_context": [
          "previous_outputs.append",
          "value.get",
          "key.startswith",
          "context.items"
        ],
        "_extract_summary": [
          "str",
          "step_result.get",
          "len",
          "isinstance"
        ],
        "_extract_key_outputs": [
          "key_outputs.append",
          "step_result.get",
          "isinstance"
        ],
        "_decompose_sequential_task": [
          "any",
          "query.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "eed9a52c092a9869150c9740578d82836d45b6f78691fceef7487f9a43018ecd",
      "artifact_id": "1b52a2e8-0699-458a-bf70-fdd111c4f959"
    },
    {
      "module_id": "src.llmgenie.orchestration.executors.__init__",
      "path": "src/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "module_doc": "Execution strategies for multi-agent orchestration\n\nEpic 5 Phase 3.1: All execution modes\n- ParallelExecutor: Independent parallel execution\n- SequentialExecutor: Sequential handoffs with context\n- CollaborativeExecutor: Competitive quality optimization",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CollaborativeExecutor",
        "ParallelExecutor",
        "SequentialExecutor",
        "collaborative_executor",
        "parallel_executor",
        "sequential_executor"
      ],
      "hash": "9eb357fce290bb15766ae4f824cfe940887df5e2fa98a08ae50fa72e8d0ac401",
      "artifact_id": "933bccaa-58f7-441d-81e9-6aa4bd09c031"
    },
    {
      "module_id": "src.llmgenie.modules.commands.metrics",
      "path": "src/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "print",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "print",
          "tracker.get_session_summary",
          "max",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "open",
          "tracker.get_analytics_data",
          "print",
          "csv.writer",
          "json.dump",
          "writer.writerow",
          "get_metrics_tracker",
          "enumerate",
          "time.strftime",
          "tracker.get_session_summary",
          "json.dumps"
        ],
        "metrics_report": [
          "sum",
          "len",
          "analytics.get",
          "open",
          "tracker.get_analytics_data",
          "print",
          "min",
          "f.write",
          "get_metrics_tracker",
          "time.strftime"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "get_token_summary",
          "enumerate",
          "interaction.get",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_report",
          "metrics_track",
          "print",
          "metrics_tokens",
          "metrics_analytics",
          "metrics_status",
          "metrics_summary"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
      "artifact_id": "c730cc6a-73a7-44c6-9b8d-a90b93566318"
    },
    {
      "module_id": "src.llmgenie.modules.commands.services",
      "path": "src/llmgenie/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "metrics_report.add_argument",
          "api_start.add_argument",
          "metrics_parser.add_subparsers",
          "metrics_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "api_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "bot_parser.add_subparsers",
          "subparsers.add_parser",
          "services_parser.add_subparsers",
          "bot_start.add_argument",
          "services_subparsers.add_parser",
          "api_subparsers.add_parser",
          "metrics_track.add_argument"
        ],
        "cmd_api_management": [
          "Path",
          "str",
          "venv_path.exists",
          "pid_file.exists",
          "process.wait",
          "subprocess.Popen",
          "pid_file.unlink",
          "open",
          "print",
          "f.write",
          "process.terminate",
          "requests.post",
          "int",
          "response.json",
          "requests.get",
          "psutil.Process",
          "f.read",
          "data.get"
        ],
        "cmd_bot_management": [
          "Path",
          "str",
          "pid_file.exists",
          "process.wait",
          "subprocess.Popen",
          "pid_file.unlink",
          "open",
          "print",
          "f.write",
          "process.terminate",
          "bot_scripts.get",
          "os.getenv",
          "int",
          "active_bots.append",
          "psutil.Process",
          "process.is_running",
          "f.read"
        ],
        "cmd_services": [
          "type",
          "print",
          "cmd_bot_management",
          "time.sleep",
          "cmd_api_management"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "artifact_id": "c9cf556d-75a0-41bc-aa59-e215370b8136"
    },
    {
      "module_id": "src.llmgenie.modules.commands.__init__",
      "path": "src/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "53a28321-faaa-4b1b-91de-64aab90f8814"
    },
    {
      "module_id": "src.llmgenie.modules.commands.queue",
      "path": "src/llmgenie/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "len",
          "attach_to_llm_request",
          "item.get",
          "get_folder_structure",
          "load_gitignore",
          "open",
          "logging.info",
          "print",
          "options.get",
          "json.load",
          "logging.error",
          "read_file_content",
          "enumerate",
          "client.query",
          "isinstance",
          "workflow.get",
          "time.time",
          "write_to_file"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
      "artifact_id": "6fa9ead7-7055-4afe-8871-8f86227e71f2"
    },
    {
      "module_id": "src.llmgenie.modules.cli.audit",
      "path": "src/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "Path",
          "print",
          "file_path.exists",
          "hasattr",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
      "artifact_id": "50f6b34d-ba2a-4562-84e2-993e5912ffd2"
    },
    {
      "module_id": "src.llmgenie.modules.cli.utils",
      "path": "src/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "config_path.exists",
          "toml.load",
          "logging.error",
          "config_path.open"
        ],
        "read_file_content": [
          "Path",
          "path.open",
          "path.is_file",
          "logging.error",
          "f.read"
        ],
        "write_to_file": [
          "Path",
          "str",
          "logging.info",
          "file_path.exists",
          "f.write",
          "logging.error",
          "base_path.mkdir",
          "logging.warning",
          "file_path.open",
          "re.sub"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "content.strip",
          "re.findall"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "set",
          "list",
          "config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "Path",
          "toml.dump",
          "logging.error",
          "config_path.open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
      "artifact_id": "17faeb3b-be82-4c83-8e84-42ba081513e7"
    },
    {
      "module_id": "src.llmgenie.modules.cli.dogfood",
      "path": "src/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "artifact_id": "acbe9668-336b-4520-850e-c4733cd31339"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers_legacy",
      "path": "src/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "re.match",
          "read_file_content",
          "parse",
          "JSONCache",
          "logging.warning",
          "client.query",
          "write_to_file",
          "sorted",
          "logging.error",
          "m.group",
          "json.dumps",
          "Path",
          "attach_to_llm_request",
          "user_input.lower",
          "user_input.startswith",
          "cache.close",
          "load_gitignore",
          "LLMClient",
          "input",
          "get_folder_structure",
          "print",
          "args_str.strip",
          "os.listdir"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
      "artifact_id": "16900bed-4cc4-4a41-829b-63eb0f9d5825"
    },
    {
      "module_id": "src.llmgenie.modules.cli.analyze_duplicates",
      "path": "src/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "sorted",
          "len",
          "filtered_duplicates.items",
          "rec.get",
          "duplicates.items",
          "r.get",
          "WorkflowOrchestrator",
          "print",
          "analysis.get",
          "open",
          "json.dump",
          "orchestrator.analyze_codebase_for_duplicates",
          "enumerate",
          "getattr",
          "hasattr",
          "duplication_data.get",
          "traceback.print_exc",
          "json.dumps"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
      "artifact_id": "e5bf211c-1fae-4d33-aa96-e2d61a8c77dd"
    },
    {
      "module_id": "src.llmgenie.modules.cli.__init__",
      "path": "src/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "8ea517e3-7ebc-4e47-8d80-0934d72b73d4"
    },
    {
      "module_id": "src.llmgenie.modules.cli.review",
      "path": "src/llmgenie/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "artifact_id": "57af5e0f-683b-4c69-9784-8fdb92a62514"
    },
    {
      "module_id": "src.llmgenie.modules.cli.context",
      "path": "src/llmgenie/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "artifact_id": "3c72a1af-a6a9-4017-bbd7-d6b9839ebf62"
    },
    {
      "module_id": "src.llmgenie.modules.cli.query",
      "path": "src/llmgenie/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "Path",
          "logging.info",
          "json.dump",
          "logging.error",
          "cache.close",
          "JSONCache",
          "client.query_with_context",
          "hasattr",
          "logging.warning",
          "client.query",
          "create_context_orchestrator",
          "LLMClient",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
      "artifact_id": "86f3f384-68e1-4953-8031-9963dd4705dd"
    },
    {
      "module_id": "src.llmgenie.modules.cli.copilot",
      "path": "src/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "config_path.exists",
          "manager.validate_change",
          "manager.get_context_status",
          "smart_suggest",
          "manager.unload_context_layer",
          "getattr",
          "hasattr",
          "manager.load_context_layer",
          "logging.error",
          "manager.close",
          "layers.split",
          "Path",
          "shutil.copy",
          "logging.info",
          "open",
          "print",
          "f.write",
          "manager.export_context",
          "manager.refresh_all_contexts",
          "initialize_copilot",
          "enumerate",
          "template_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
      "artifact_id": "bbe6330b-6cf4-4d57-8626-12bcecc81e3b"
    },
    {
      "module_id": "src.llmgenie.modules.cli.parse",
      "path": "src/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "ast_path.open",
          "JSONCache",
          "struct_data.get",
          "getattr",
          "logging.warning",
          "mod_dir.mkdir",
          "config.get",
          "logging.error",
          "cli_config.get",
          "Path",
          "json.dump",
          "load_config",
          "generate_json",
          "cache.close",
          "struct_path.open",
          "parsing_config.get",
          "logging.info",
          "func.get",
          "module.get",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "966276e0c717ac3bf78502224305e23e2ac9b49547bbbf13bb37c83cb85d8b9c",
      "artifact_id": "2f163434-d9d6-45c5-8579-ba5a493b76c4"
    },
    {
      "module_id": "src.llmgenie.modules.cli.epic",
      "path": "src/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "show_links": [
          "Path",
          "str",
          "item.get",
          "print",
          "results.items",
          "epic_path.exists",
          "status_filter.lower",
          "load_json",
          "link_map.items",
          "epic.get",
          "t.upper",
          "json.dumps",
          "data.get"
        ],
        "add_epic_cli_subparser": [
          "epic_sub.add_parser",
          "show_links_parser.add_argument",
          "epic_parser.add_subparsers",
          "subparsers.add_parser",
          "show_links_parser.set_defaults"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "artifact_id": "4a4c957f-d1a3-4dcb-9260-35e3cd0f41fa"
    },
    {
      "module_id": "src.llmgenie.modules.cli.handlers",
      "path": "src/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "logging.info",
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "hasattr"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
      "artifact_id": "aa727337-cad1-430b-b413-9763945f038c"
    },
    {
      "module_id": "tests.orchestration.__init__",
      "path": "tests/orchestration/__init__.py",
      "category": "test",
      "module_doc": "Modular tests for Multi-Agent Orchestration\n\nEpic 5 Phase 3.2: Beautiful modular test structure\nFollowing same patterns as orchestration implementation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "create_mock_classification",
        "create_mock_router",
        "fixtures"
      ],
      "hash": "e5cd8b226d3d4505ef637758defdd16b2aca91d7cd2ed38360feac8add3c5e8a",
      "artifact_id": "67bf79d9-fc71-4f2e-9d13-ec1bb7fc3356"
    },
    {
      "module_id": "tests.orchestration.fixtures",
      "path": "tests/orchestration/fixtures.py",
      "category": "test",
      "module_doc": "Shared test fixtures for orchestration testing\n\nEpic 5 Phase 3.2: Modular test utilities\nSingle responsibility: Common test setup utilities",
      "functions": [
        {
          "name": "create_mock_router",
          "docstring": "Create standardized mock ModelRouter for testing",
          "line_range": [
            15,
            39
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "create_mock_classification",
          "docstring": "Create standardized mock classification for testing",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "task_type",
            "confidence"
          ],
          "decorators": []
        },
        {
          "name": "mock_agent_routers",
          "docstring": "Standard set of mock agent routers for testing",
          "line_range": [
            60,
            66
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_task",
          "docstring": "Standard orchestration task for testing",
          "line_range": [
            70,
            79
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        }
      ],
      "classes": [
        {
          "name": "MockClassification",
          "docstring": "Mock classification result for testing",
          "line_range": [
            43,
            47
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "create_mock_router": [
          "RoutingDecision",
          "AsyncMock",
          "Mock"
        ],
        "create_mock_classification": [
          "MockClassification"
        ],
        "mock_agent_routers": [
          "create_mock_router"
        ],
        "sample_task": [
          "OrchestrationTask"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationTask",
        "RoutingDecision",
        "dataclass",
        "dataclasses",
        "pytest",
        "src.llmgenie.orchestration.core",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "336e9732d4a736487f06c17e382e2a4c901a3c91d1832fa7cdfa1275d305a844",
      "artifact_id": "2dff30a6-c7d8-4267-9605-8d74315253b3"
    },
    {
      "module_id": "tests.orchestration.integration.__init__",
      "path": "tests/orchestration/integration/__init__.py",
      "category": "test",
      "module_doc": "Integration tests\n\nEpic 5 Phase 3.2: Modular integration tests\n- Epic 5 component integration\n- Quality pipeline integration\n- Performance validation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "f6395a280dab5eed75eab816a2952b83e20a8cbc99d7bb71f286bee531d1b946",
      "artifact_id": "90dfd76d-a8c0-453d-8344-c5a17baa31ba"
    },
    {
      "module_id": "tests.orchestration.integration.test_epic5_components",
      "path": "tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "module_doc": "Test integration with Epic 5 components\n\nEpic 5 Phase 3.2: Modular integration tests\nSingle responsibility: Test Epic 5 TaskRouter/ModelRouter integration only",
      "functions": [
        {
          "name": "orchestrator_with_classifier",
          "docstring": "Create orchestrator with TaskClassifier integration",
          "line_range": [
            20,
            32
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_auto_mode_selection",
          "docstring": "Test automatic mode selection using TaskClassifier",
          "line_range": [
            35,
            47
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_model_router_interface_compliance",
          "docstring": "Test that orchestration correctly uses ModelRouter interface",
          "line_range": [
            50,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_orchestrator_stats_with_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is available",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestrator_stats_without_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is not available",
          "line_range": [
            81,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEpic5Integration",
          "docstring": "Test integration with Epic 5 TaskRouter components",
          "line_range": [
            16,
            90
          ],
          "methods": [
            {
              "name": "orchestrator_with_classifier",
              "docstring": "Create orchestrator with TaskClassifier integration",
              "line_range": [
                20,
                32
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_auto_mode_selection",
              "docstring": "Test automatic mode selection using TaskClassifier",
              "line_range": [
                35,
                47
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_model_router_interface_compliance",
              "docstring": "Test that orchestration correctly uses ModelRouter interface",
              "line_range": [
                50,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestrator_stats_with_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is available",
              "line_range": [
                72,
                79
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_orchestrator_stats_without_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is not available",
              "line_range": [
                81,
                90
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "orchestrator_with_classifier": [
          "AsyncMock",
          "create_mock_classification",
          "AgentOrchestrator",
          "create_mock_router",
          "Mock"
        ],
        "test_auto_mode_selection": [
          "orchestrator_with_classifier.orchestrate",
          "create_mock_classification"
        ],
        "test_model_router_interface_compliance": [
          "AgentOrchestrator",
          "create_mock_router",
          "orchestrator.orchestrate"
        ],
        "test_orchestrator_stats_with_classifier": [
          "len",
          "orchestrator_with_classifier.get_orchestration_stats"
        ],
        "test_orchestrator_stats_without_classifier": [
          "AgentOrchestrator",
          "create_mock_router",
          "orchestrator.get_orchestration_stats"
        ]
      },
      "dependencies": [
        "AgentOrchestrator",
        "AsyncMock",
        "ExecutionMode",
        "Mock",
        "TaskClassifier",
        "create_mock_classification",
        "create_mock_router",
        "fixtures",
        "pytest",
        "src.llmgenie.orchestration",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "6edc2562c8a82e152096729256d57da4f3c2ec9bd2172eab691f18e5b87ba0fe",
      "artifact_id": "0452ccea-0afa-4ecd-8664-3991c7e5df8b"
    },
    {
      "module_id": "tests.orchestration.core.test_task_models",
      "path": "tests/orchestration/core/test_task_models.py",
      "category": "test",
      "module_doc": "Test OrchestrationTask and OrchestrationResult models\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test task dataclass models only",
      "functions": [
        {
          "name": "test_orchestration_task_creation",
          "docstring": "Test basic task creation",
          "line_range": [
            21,
            37
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_context",
          "docstring": "Test task creation with context",
          "line_range": [
            39,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_subtasks",
          "docstring": "Test task creation with predefined subtasks",
          "line_range": [
            51,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_creation",
          "docstring": "Test basic result creation",
          "line_range": [
            67,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_with_quality_score",
          "docstring": "Test result creation with quality metrics",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_metadata",
          "docstring": "Test result with comprehensive metadata",
          "line_range": [
            99,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_status_values",
          "docstring": "Test valid status values",
          "line_range": [
            121,
            134
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_efficiency_bounds",
          "docstring": "Test coordination efficiency is properly bounded",
          "line_range": [
            136,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestOrchestrationTask",
          "docstring": "Test OrchestrationTask dataclass",
          "line_range": [
            18,
            61
          ],
          "methods": [
            {
              "name": "test_orchestration_task_creation",
              "docstring": "Test basic task creation",
              "line_range": [
                21,
                37
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_context",
              "docstring": "Test task creation with context",
              "line_range": [
                39,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_subtasks",
              "docstring": "Test task creation with predefined subtasks",
              "line_range": [
                51,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestOrchestrationResult",
          "docstring": "Test OrchestrationResult dataclass",
          "line_range": [
            64,
            150
          ],
          "methods": [
            {
              "name": "test_orchestration_result_creation",
              "docstring": "Test basic result creation",
              "line_range": [
                67,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_with_quality_score",
              "docstring": "Test result creation with quality metrics",
              "line_range": [
                84,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_metadata",
              "docstring": "Test result with comprehensive metadata",
              "line_range": [
                99,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_status_values",
              "docstring": "Test valid status values",
              "line_range": [
                121,
                134
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_efficiency_bounds",
              "docstring": "Test coordination efficiency is properly bounded",
              "line_range": [
                136,
                150
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_orchestration_task_creation": [
          "OrchestrationTask",
          "isinstance"
        ],
        "test_orchestration_task_with_context": [
          "OrchestrationTask"
        ],
        "test_orchestration_task_with_subtasks": [
          "len",
          "OrchestrationTask"
        ],
        "test_orchestration_result_creation": [
          "len",
          "OrchestrationResult"
        ],
        "test_orchestration_result_with_quality_score": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_metadata": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_status_values": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_efficiency_bounds": [
          "OrchestrationResult"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "datetime",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "a2fcc262d9288f06079ee513b812befe385aaef043e85f7e014c1b1dd722c9cb",
      "artifact_id": "420e4209-f13e-46bf-b501-c85cca54400b"
    },
    {
      "module_id": "tests.orchestration.core.__init__",
      "path": "tests/orchestration/core/__init__.py",
      "category": "test",
      "module_doc": "Core orchestration component tests\n\nEpic 5 Phase 3.2: Modular core tests\n- ExecutionMode functionality\n- AgentCoordination types  \n- Task/Result dataclasses",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "8d4d25334b396f653cd7e2e27e12e65f8c6a9c11e31de4f9388e7fb8a33630f5",
      "artifact_id": "91f13d72-6d0b-4993-82ee-19d6ddb93c22"
    },
    {
      "module_id": "tests.orchestration.core.test_execution_modes",
      "path": "tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "module_doc": "Test ExecutionMode enum and smart suggestions\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test ExecutionMode functionality only",
      "functions": [
        {
          "name": "test_execution_mode_values",
          "docstring": "Test that all execution modes have correct values",
          "line_range": [
            15,
            19
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_collaborative_tasks",
          "docstring": "Test mode suggestion for collaborative tasks",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_sequential_tasks",
          "docstring": "Test mode suggestion for sequential tasks",
          "line_range": [
            33,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_parallel_tasks",
          "docstring": "Test mode suggestion for parallel tasks",
          "line_range": [
            45,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_descriptions",
          "docstring": "Test mode descriptions are available",
          "line_range": [
            57,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_use_cases",
          "docstring": "Test use cases are available for each mode",
          "line_range": [
            64,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_enum_completeness",
          "docstring": "Test that we have expected number of execution modes",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestExecutionMode",
          "docstring": "Test ExecutionMode enum functionality",
          "line_range": [
            12,
            77
          ],
          "methods": [
            {
              "name": "test_execution_mode_values",
              "docstring": "Test that all execution modes have correct values",
              "line_range": [
                15,
                19
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_collaborative_tasks",
              "docstring": "Test mode suggestion for collaborative tasks",
              "line_range": [
                21,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_sequential_tasks",
              "docstring": "Test mode suggestion for sequential tasks",
              "line_range": [
                33,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_parallel_tasks",
              "docstring": "Test mode suggestion for parallel tasks",
              "line_range": [
                45,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_descriptions",
              "docstring": "Test mode descriptions are available",
              "line_range": [
                57,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_use_cases",
              "docstring": "Test use cases are available for each mode",
              "line_range": [
                64,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_enum_completeness",
              "docstring": "Test that we have expected number of execution modes",
              "line_range": [
                71,
                77
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_execution_mode_values": [],
        "test_suggest_mode_for_collaborative_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_sequential_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_parallel_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_mode_descriptions": [
          "len",
          "mode.get_description",
          "isinstance"
        ],
        "test_mode_use_cases": [
          "len",
          "mode.get_use_cases",
          "isinstance"
        ],
        "test_mode_enum_completeness": [
          "len",
          "list"
        ]
      },
      "dependencies": [
        "ExecutionMode",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "c0e34fcebe8e3ba2587f21831cb05149040ff783b53e99d7d2ed01d67b328794",
      "artifact_id": "db8bd2f3-b9eb-4a74-ac38-c36d01f57046"
    },
    {
      "module_id": "tests.orchestration.executors.test_parallel_executor",
      "path": "tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "module_doc": "Test ParallelExecutor implementation\n\nEpic 5 Phase 3.2: Modular executor tests\nSingle responsibility: Test ParallelExecutor only",
      "functions": [
        {
          "name": "parallel_executor",
          "docstring": "Create ParallelExecutor with mock routers",
          "line_range": [
            20,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_parallel_execution_success",
          "docstring": "Test successful parallel execution",
          "line_range": [
            29,
            37
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_parallel_execution_partial_failure",
          "docstring": "Test parallel execution with one agent failing",
          "line_range": [
            40,
            55
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_subtask_decomposition",
          "docstring": "Test automatic subtask decomposition",
          "line_range": [
            58,
            65
          ],
          "parameters": [
            "self",
            "parallel_executor"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_timing_efficiency",
          "docstring": "Test that parallel execution is actually parallel",
          "line_range": [
            68,
            85
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "delayed_execute",
          "docstring": "",
          "line_range": [
            71,
            73
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestParallelExecutor",
          "docstring": "Test parallel execution strategy",
          "line_range": [
            16,
            85
          ],
          "methods": [
            {
              "name": "parallel_executor",
              "docstring": "Create ParallelExecutor with mock routers",
              "line_range": [
                20,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_parallel_execution_success",
              "docstring": "Test successful parallel execution",
              "line_range": [
                29,
                37
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_parallel_execution_partial_failure",
              "docstring": "Test parallel execution with one agent failing",
              "line_range": [
                40,
                55
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_subtask_decomposition",
              "docstring": "Test automatic subtask decomposition",
              "line_range": [
                58,
                65
              ],
              "parameters": [
                "self",
                "parallel_executor"
              ]
            },
            {
              "name": "test_timing_efficiency",
              "docstring": "Test that parallel execution is actually parallel",
              "line_range": [
                68,
                85
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parallel_executor": [
          "ParallelExecutor",
          "create_mock_router"
        ],
        "test_parallel_execution_success": [
          "len",
          "parallel_executor.execute"
        ],
        "test_parallel_execution_partial_failure": [
          "len",
          "parallel_executor.execute",
          "Exception"
        ],
        "test_subtask_decomposition": [
          "parallel_executor._decompose_task",
          "any",
          "len",
          "subtask.lower"
        ],
        "test_timing_efficiency": [],
        "delayed_execute": [
          "asyncio.sleep"
        ]
      },
      "dependencies": [
        "Mock",
        "ParallelExecutor",
        "asyncio",
        "create_mock_router",
        "fixtures",
        "pytest",
        "sample_task",
        "src.llmgenie.orchestration.executors",
        "time",
        "unittest.mock"
      ],
      "hash": "ddcd4b096d4dc729b3e684bba692064d2767fe18826b66775122089d1140c562",
      "artifact_id": "f5d96d3b-daef-4f39-81c2-9a7dec00924e"
    },
    {
      "module_id": "tests.orchestration.executors.__init__",
      "path": "tests/orchestration/executors/__init__.py",
      "category": "test",
      "module_doc": "Executor strategy tests\n\nEpic 5 Phase 3.2: Modular executor tests\n- ParallelExecutor tests\n- SequentialExecutor tests  \n- CollaborativeExecutor tests",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "d878102fd65f0224ee4e226de4fb6ffeaf2f4628b87f0d92753e3585ac2aa9dc",
      "artifact_id": "7f27e094-bb73-4cd6-8bcb-8cd0e32f233a"
    },
    {
      "module_id": "restructure.tests.test_task_router",
      "path": "restructure/tests/test_task_router.py",
      "category": "test",
      "module_doc": "Comprehensive tests for Epic 5 TaskRouter implementation\n\nTests task classification, model routing, and integration with FastAPI",
      "functions": [
        {
          "name": "setup_method",
          "docstring": "Setup classifier for each test",
          "line_range": [
            20,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_code_generation_classification",
          "docstring": "Test code generation task classification",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_classification",
          "docstring": "Test documentation task classification",
          "line_range": [
            33,
            39
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complex_reasoning_classification",
          "docstring": "Test complex reasoning task classification",
          "line_range": [
            41,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_debugging_classification",
          "docstring": "Test debugging task classification",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_complexity_scoring",
          "docstring": "Test complexity level calculation",
          "line_range": [
            58,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_based_classification",
          "docstring": "Test classification with context information",
          "line_range": [
            75,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_method",
          "docstring": "Setup router for each test",
          "line_range": [
            92,
            95
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ollama_routing_preference",
          "docstring": "Test routing to Ollama for code generation",
          "line_range": [
            98,
            106
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_claude_routing_preference",
          "docstring": "Test routing to Claude for complex reasoning",
          "line_range": [
            109,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_user_model_preference",
          "docstring": "Test user model preference override",
          "line_range": [
            119,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_fallback_model_selection",
          "docstring": "Test fallback model logic",
          "line_range": [
            133,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_ollama_execution",
          "docstring": "Test actual Ollama execution",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "test_claude_execution_placeholder",
          "docstring": "Test Claude execution (placeholder implementation)",
          "line_range": [
            165,
            174
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_error_handling",
          "docstring": "Test error handling in execution",
          "line_range": [
            178,
            190
          ],
          "parameters": [
            "self",
            "mock_post"
          ],
          "decorators": [
            "pytest.mark.asyncio",
            "patch('httpx.AsyncClient.post')"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for performance tests",
          "line_range": [
            196,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_model_performance_baselines",
          "docstring": "Test that performance baselines match Epic 5 findings",
          "line_range": [
            200,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_optimization",
          "docstring": "Test routing optimization for performance",
          "line_range": [
            213,
            221
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_quality_threshold_calculation",
          "docstring": "Test quality threshold based on task complexity",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_agent_request_compatibility",
          "docstring": "Test compatibility with existing AgentRequest model",
          "line_range": [
            240,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_routing_decision_serialization",
          "docstring": "Test that RoutingDecision can be serialized for API responses",
          "line_range": [
            263,
            279
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "setup_method",
          "docstring": "Setup for quality validator tests",
          "line_range": [
            285,
            287
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_success",
          "docstring": "Test successful Python code validation",
          "line_range": [
            289,
            311
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_python_code_validation_syntax_error",
          "docstring": "Test Python code with syntax errors",
          "line_range": [
            313,
            326
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_javascript_code_validation",
          "docstring": "Test JavaScript code validation",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_high_quality",
          "docstring": "Test high-quality text validation",
          "line_range": [
            351,
            374
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_text_validation_poor_quality",
          "docstring": "Test poor quality text validation",
          "line_range": [
            376,
            385
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_documentation_specific_validation",
          "docstring": "Test documentation-specific validation",
          "line_range": [
            387,
            411
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_fallback_decision_making",
          "docstring": "Test fallback decision based on task type and quality",
          "line_range": [
            413,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_thresholds_by_task_type",
          "docstring": "Test different quality thresholds for different task types",
          "line_range": [
            457,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_coherence_score_calculation",
          "docstring": "Test text coherence scoring",
          "line_range": [
            468,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_completeness_score_calculation",
          "docstring": "Test text completeness scoring",
          "line_range": [
            483,
            499
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_input_handling",
          "docstring": "Test handling of empty inputs",
          "line_range": [
            501,
            513
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_quality_metrics_extraction",
          "docstring": "Test quality metrics extraction for monitoring",
          "line_range": [
            515,
            532
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_generic_code_validation",
          "docstring": "Test generic code validation for unknown languages",
          "line_range": [
            534,
            547
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestTaskClassifier",
          "docstring": "Test TaskClassifier with Epic 5 research patterns",
          "line_range": [
            17,
            86
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup classifier for each test",
              "line_range": [
                20,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_code_generation_classification",
              "docstring": "Test code generation task classification",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_classification",
              "docstring": "Test documentation task classification",
              "line_range": [
                33,
                39
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complex_reasoning_classification",
              "docstring": "Test complex reasoning task classification",
              "line_range": [
                41,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_debugging_classification",
              "docstring": "Test debugging task classification",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_complexity_scoring",
              "docstring": "Test complexity level calculation",
              "line_range": [
                58,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_based_classification",
              "docstring": "Test classification with context information",
              "line_range": [
                75,
                86
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestModelRouter",
          "docstring": "Test ModelRouter with Epic 5 integration patterns",
          "line_range": [
            89,
            190
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup router for each test",
              "line_range": [
                92,
                95
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_routing_preference",
              "docstring": "Test routing to Ollama for code generation",
              "line_range": [
                98,
                106
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_claude_routing_preference",
              "docstring": "Test routing to Claude for complex reasoning",
              "line_range": [
                109,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_user_model_preference",
              "docstring": "Test user model preference override",
              "line_range": [
                119,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_model_selection",
              "docstring": "Test fallback model logic",
              "line_range": [
                133,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ollama_execution",
              "docstring": "Test actual Ollama execution",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            },
            {
              "name": "test_claude_execution_placeholder",
              "docstring": "Test Claude execution (placeholder implementation)",
              "line_range": [
                165,
                174
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_error_handling",
              "docstring": "Test error handling in execution",
              "line_range": [
                178,
                190
              ],
              "parameters": [
                "self",
                "mock_post"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestPerformanceOptimization",
          "docstring": "Test performance optimization based on Epic 5 baselines",
          "line_range": [
            193,
            234
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for performance tests",
              "line_range": [
                196,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_model_performance_baselines",
              "docstring": "Test that performance baselines match Epic 5 findings",
              "line_range": [
                200,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_optimization",
              "docstring": "Test routing optimization for performance",
              "line_range": [
                213,
                221
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_threshold_calculation",
              "docstring": "Test quality threshold based on task complexity",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestIntegrationWithFastAPI",
          "docstring": "Test integration with existing FastAPI infrastructure",
          "line_range": [
            237,
            279
          ],
          "methods": [
            {
              "name": "test_agent_request_compatibility",
              "docstring": "Test compatibility with existing AgentRequest model",
              "line_range": [
                240,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_routing_decision_serialization",
              "docstring": "Test that RoutingDecision can be serialized for API responses",
              "line_range": [
                263,
                279
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestQualityValidator",
          "docstring": "Test enhanced Quality Validator with real validation logic",
          "line_range": [
            282,
            547
          ],
          "methods": [
            {
              "name": "setup_method",
              "docstring": "Setup for quality validator tests",
              "line_range": [
                285,
                287
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_success",
              "docstring": "Test successful Python code validation",
              "line_range": [
                289,
                311
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_python_code_validation_syntax_error",
              "docstring": "Test Python code with syntax errors",
              "line_range": [
                313,
                326
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_javascript_code_validation",
              "docstring": "Test JavaScript code validation",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_high_quality",
              "docstring": "Test high-quality text validation",
              "line_range": [
                351,
                374
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_text_validation_poor_quality",
              "docstring": "Test poor quality text validation",
              "line_range": [
                376,
                385
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_documentation_specific_validation",
              "docstring": "Test documentation-specific validation",
              "line_range": [
                387,
                411
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_fallback_decision_making",
              "docstring": "Test fallback decision based on task type and quality",
              "line_range": [
                413,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_thresholds_by_task_type",
              "docstring": "Test different quality thresholds for different task types",
              "line_range": [
                457,
                466
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_coherence_score_calculation",
              "docstring": "Test text coherence scoring",
              "line_range": [
                468,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_completeness_score_calculation",
              "docstring": "Test text completeness scoring",
              "line_range": [
                483,
                499
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_empty_input_handling",
              "docstring": "Test handling of empty inputs",
              "line_range": [
                501,
                513
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_quality_metrics_extraction",
              "docstring": "Test quality metrics extraction for monitoring",
              "line_range": [
                515,
                532
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_generic_code_validation",
              "docstring": "Test generic code validation for unknown languages",
              "line_range": [
                534,
                547
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "setup_method": [
          "QualityValidator"
        ],
        "test_code_generation_classification": [],
        "test_documentation_classification": [],
        "test_complex_reasoning_classification": [],
        "test_debugging_classification": [],
        "test_complexity_scoring": [],
        "test_context_based_classification": [],
        "test_ollama_routing_preference": [],
        "test_claude_routing_preference": [],
        "test_user_model_preference": [],
        "test_fallback_model_selection": [],
        "test_ollama_execution": [
          "patch",
          "Mock"
        ],
        "test_claude_execution_placeholder": [],
        "test_error_handling": [
          "patch",
          "Exception"
        ],
        "test_model_performance_baselines": [
          "expected_baselines.items"
        ],
        "test_routing_decision_optimization": [],
        "test_quality_threshold_calculation": [
          "classifier.classify_task",
          "TaskClassifier"
        ],
        "test_agent_request_compatibility": [
          "classifier.classify_task",
          "TaskClassifier",
          "isinstance"
        ],
        "test_routing_decision_serialization": [
          "isinstance",
          "router.route_task",
          "ModelRouter"
        ],
        "test_python_code_validation_success": [],
        "test_python_code_validation_syntax_error": [
          "any",
          "issue.lower"
        ],
        "test_javascript_code_validation": [],
        "test_text_validation_high_quality": [],
        "test_text_validation_poor_quality": [],
        "test_documentation_specific_validation": [
          "len"
        ],
        "test_fallback_decision_making": [
          "QualityResult"
        ],
        "test_quality_thresholds_by_task_type": [],
        "test_coherence_score_calculation": [],
        "test_completeness_score_calculation": [
          "complete_text.lower"
        ],
        "test_empty_input_handling": [],
        "test_quality_metrics_extraction": [
          "QualityResult"
        ],
        "test_generic_code_validation": []
      },
      "dependencies": [
        "AsyncMock",
        "ComplexityLevel",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "asyncio",
        "patch",
        "pytest",
        "src.llmgenie.task_router",
        "src.llmgenie.task_router.task_classifier",
        "unittest.mock"
      ],
      "hash": "07b8ae843db69e19353cb6bd830e348ff42e34847c774212be84ff248f3dd137",
      "artifact_id": "b0e3ab0a-6644-4258-8af3-dffb646aec5e"
    },
    {
      "module_id": "restructure.tests.test_ollama_function_calling",
      "path": "restructure/tests/test_ollama_function_calling.py",
      "category": "test",
      "module_doc": "Test script for Ollama function calling capability\nPart of Epic 5: MCP-Ollama Integration\n\nThis script tests:\n1. Basic function calling with different models\n2. Performance measurement\n3. Quality validation",
      "functions": [
        {
          "name": "get_current_weather",
          "docstring": "Get the current weather for a city (mock function for testing)\n\nArgs:\n    city: The name of the city\n    \nReturns:\n    dict: Weather information",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "city"
          ],
          "decorators": []
        },
        {
          "name": "add_two_numbers",
          "docstring": "Add two numbers together\n\nArgs:\n    a: The first integer number\n    b: The second integer number\n    \nReturns:\n    int: The sum of the two numbers",
          "line_range": [
            40,
            51
          ],
          "parameters": [
            "a",
            "b"
          ],
          "decorators": []
        },
        {
          "name": "test_model_function_calling",
          "docstring": "Test function calling capability for a specific model\n\nArgs:\n    model_name: Name of the Ollama model to test\n    \nReturns:\n    dict: Test results including performance metrics",
          "line_range": [
            54,
            128
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "test_openai_compatible_endpoint",
          "docstring": "Test OpenAI compatible endpoint functionality\n\nReturns:\n    dict: Test results for OpenAI compatibility",
          "line_range": [
            131,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main test execution function",
          "line_range": [
            181,
            265
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_current_weather": [
          "weather_data.get"
        ],
        "add_two_numbers": [],
        "test_model_function_calling": [
          "ollama.chat",
          "len",
          "str",
          "print",
          "add_two_numbers",
          "get_current_weather",
          "time.time"
        ],
        "test_openai_compatible_endpoint": [
          "len",
          "str",
          "print",
          "requests.post",
          "response.json",
          "time.time",
          "data.get"
        ],
        "main": [
          "sum",
          "len",
          "open",
          "json.dump",
          "print",
          "test_openai_compatible_endpoint",
          "test_results.items",
          "isinstance",
          "hasattr",
          "result.get",
          "test_model_function_calling",
          "ollama.list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "json",
        "ollama",
        "requests",
        "time",
        "typing"
      ],
      "hash": "ee0ccf1cf8a278a300a6c166371f0df26dd9bc8843a50e0fbda21bd40c742b25",
      "artifact_id": "0aa6b182-ed2e-4c66-9441-77b06447b88a"
    },
    {
      "module_id": "restructure.tests.test_api",
      "path": "restructure/tests/test_api.py",
      "category": "test",
      "module_doc": "Tests for llmgenie FastAPI application",
      "functions": [
        {
          "name": "test_health_check",
          "docstring": "Test health check endpoint",
          "line_range": [
            17,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_workflow_modes",
          "docstring": "Test workflow modes endpoint",
          "line_range": [
            26,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_agent_execute",
          "docstring": "Test agent execution endpoint",
          "line_range": [
            36,
            48
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_placeholder",
          "docstring": "Test MCP tools placeholder endpoint",
          "line_range": [
            50,
            56
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_health_check": [
          "response.json",
          "client.get"
        ],
        "test_workflow_modes": [
          "response.json",
          "client.get"
        ],
        "test_agent_execute": [
          "response.json",
          "client.post"
        ],
        "test_mcp_tools_placeholder": [
          "response.json",
          "client.post"
        ]
      },
      "dependencies": [
        "TestClient",
        "app",
        "core.llmgenie.api.main",
        "fastapi.testclient",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "f03b68cc3ee17250796fcf93c634c80d2e860681a50ef1a74580e32102289f59",
      "artifact_id": "11570fb9-70b9-4011-9bb7-4954aa0db330"
    },
    {
      "module_id": "restructure.tests.test_cli",
      "path": "restructure/tests/test_cli.py",
      "category": "test",
      "module_doc": "Tests for llmgenie CLI module",
      "functions": [
        {
          "name": "test_cli_import",
          "docstring": "Test that CLI module can be imported",
          "line_range": [
            12,
            18
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_llm_client_import",
          "docstring": "Test that LLM client can be imported",
          "line_range": [
            20,
            26
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_cli_import": [
          "pytest.fail"
        ],
        "test_llm_client_import": [
          "pytest.fail"
        ]
      },
      "dependencies": [
        "cli",
        "core.llmgenie",
        "llm_client",
        "os",
        "pytest",
        "sys"
      ],
      "hash": "d7fc337b7a3a8fa484d5ae7301a345bd0226eccb8f5262fa880ce331e1542adc",
      "artifact_id": "5190cd58-b0fa-4ed0-9b13-ee5637b65a90"
    },
    {
      "module_id": "restructure.tests.test_self_refine_pipeline",
      "path": "restructure/tests/test_self_refine_pipeline.py",
      "category": "test",
      "module_doc": "Tests for Self-Refine Pipeline System\nComprehensive testing of MCP-enhanced iterative improvement",
      "functions": [
        {
          "name": "pipeline",
          "docstring": "Create a test pipeline instance",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_code",
          "docstring": "Sample code for testing",
          "line_range": [
            29,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_text",
          "docstring": "Sample text for testing",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_pipeline_initialization",
          "docstring": "Test pipeline initialization",
          "line_range": [
            47,
            51
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code",
          "docstring": "Test code refinement",
          "line_range": [
            53,
            61
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_text",
          "docstring": "Test text refinement",
          "line_range": [
            63,
            69
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_confidence_threshold_reached",
          "docstring": "Test that refinement stops when confidence threshold is reached",
          "line_range": [
            72,
            82
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_max_iterations_limit",
          "docstring": "Test that refinement respects max iterations limit",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_mcp_tools_integration",
          "docstring": "Test MCP tools integration in refinement process",
          "line_range": [
            95,
            104
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refine_code_file",
          "docstring": "Test refinement of entire code file",
          "line_range": [
            106,
            128
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_report_generation",
          "docstring": "Test refinement report generation",
          "line_range": [
            130,
            148
          ],
          "parameters": [
            "self",
            "pipeline",
            "sample_code"
          ],
          "decorators": []
        },
        {
          "name": "test_quick_refine_functions",
          "docstring": "Test convenience quick refine functions",
          "line_range": [
            150,
            159
          ],
          "parameters": [
            "self",
            "sample_code",
            "sample_text"
          ],
          "decorators": []
        },
        {
          "name": "test_enhancement_context_building",
          "docstring": "Test context enhancement with MCP tools",
          "line_range": [
            161,
            171
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_critique_generation",
          "docstring": "Test critique generation with MCP integration",
          "line_range": [
            173,
            186
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_validation_logic",
          "docstring": "Test improvement validation logic",
          "line_range": [
            188,
            203
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_error_handling_file_not_found",
          "docstring": "Test error handling for non-existent files",
          "line_range": [
            205,
            208
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_empty_results_report",
          "docstring": "Test report generation with empty results",
          "line_range": [
            210,
            214
          ],
          "parameters": [
            "self",
            "pipeline"
          ],
          "decorators": []
        },
        {
          "name": "test_auto_logging_integration",
          "docstring": "Test integration with auto-logging system",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "mock_auto_logger",
            "pipeline",
            "sample_code"
          ],
          "decorators": [
            "patch('src.rag_context.interfaces.self_refine_pipeline.AUTO_LOGGING_AVAILABLE', True)",
            "patch('src.rag_context.interfaces.self_refine_pipeline.auto_logger')"
          ]
        },
        {
          "name": "test_all_refinement_types",
          "docstring": "Test that all refinement types are properly defined",
          "line_range": [
            237,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_refinement_result_creation",
          "docstring": "Test RefinementResult creation and attributes",
          "line_range": [
            249,
            269
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestSelfRefinePipeline",
          "docstring": "Test suite for Self-Refine Pipeline",
          "line_range": [
            20,
            231
          ],
          "methods": [
            {
              "name": "pipeline",
              "docstring": "Create a test pipeline instance",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_code",
              "docstring": "Sample code for testing",
              "line_range": [
                29,
                40
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sample_text",
              "docstring": "Sample text for testing",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_pipeline_initialization",
              "docstring": "Test pipeline initialization",
              "line_range": [
                47,
                51
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_refine_code",
              "docstring": "Test code refinement",
              "line_range": [
                53,
                61
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_text",
              "docstring": "Test text refinement",
              "line_range": [
                63,
                69
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_text"
              ]
            },
            {
              "name": "test_confidence_threshold_reached",
              "docstring": "Test that refinement stops when confidence threshold is reached",
              "line_range": [
                72,
                82
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_max_iterations_limit",
              "docstring": "Test that refinement respects max iterations limit",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_mcp_tools_integration",
              "docstring": "Test MCP tools integration in refinement process",
              "line_range": [
                95,
                104
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refine_code_file",
              "docstring": "Test refinement of entire code file",
              "line_range": [
                106,
                128
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_refinement_report_generation",
              "docstring": "Test refinement report generation",
              "line_range": [
                130,
                148
              ],
              "parameters": [
                "self",
                "pipeline",
                "sample_code"
              ]
            },
            {
              "name": "test_quick_refine_functions",
              "docstring": "Test convenience quick refine functions",
              "line_range": [
                150,
                159
              ],
              "parameters": [
                "self",
                "sample_code",
                "sample_text"
              ]
            },
            {
              "name": "test_enhancement_context_building",
              "docstring": "Test context enhancement with MCP tools",
              "line_range": [
                161,
                171
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_critique_generation",
              "docstring": "Test critique generation with MCP integration",
              "line_range": [
                173,
                186
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_validation_logic",
              "docstring": "Test improvement validation logic",
              "line_range": [
                188,
                203
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_error_handling_file_not_found",
              "docstring": "Test error handling for non-existent files",
              "line_range": [
                205,
                208
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_empty_results_report",
              "docstring": "Test report generation with empty results",
              "line_range": [
                210,
                214
              ],
              "parameters": [
                "self",
                "pipeline"
              ]
            },
            {
              "name": "test_auto_logging_integration",
              "docstring": "Test integration with auto-logging system",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "mock_auto_logger",
                "pipeline",
                "sample_code"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementTypes",
          "docstring": "Test different refinement types",
          "line_range": [
            234,
            243
          ],
          "methods": [
            {
              "name": "test_all_refinement_types",
              "docstring": "Test that all refinement types are properly defined",
              "line_range": [
                237,
                243
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestRefinementResult",
          "docstring": "Test RefinementResult dataclass",
          "line_range": [
            246,
            269
          ],
          "methods": [
            {
              "name": "test_refinement_result_creation",
              "docstring": "Test RefinementResult creation and attributes",
              "line_range": [
                249,
                269
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "pipeline": [
          "SelfRefinePipeline"
        ],
        "sample_code": [],
        "sample_text": [],
        "test_pipeline_initialization": [
          "isinstance"
        ],
        "test_refine_code": [
          "all",
          "len",
          "pipeline.refine",
          "isinstance"
        ],
        "test_refine_text": [
          "len",
          "pipeline.refine"
        ],
        "test_confidence_threshold_reached": [
          "len",
          "patch.object",
          "pipeline.refine"
        ],
        "test_max_iterations_limit": [
          "len",
          "patch.object",
          "pipeline.refine"
        ],
        "test_mcp_tools_integration": [
          "len",
          "pipeline.refine",
          "isinstance"
        ],
        "test_refine_code_file": [
          "Path",
          "tempfile.NamedTemporaryFile",
          "str",
          "len",
          "temp_file.with_suffix",
          "temp_file.unlink",
          "backup_file.unlink",
          "f.write",
          "pipeline.refine_code_file",
          "backup_file.read_text",
          "backup_file.exists",
          "temp_file.read_text"
        ],
        "test_refinement_report_generation": [
          "len",
          "pipeline.refine",
          "pipeline.generate_refinement_report"
        ],
        "test_quick_refine_functions": [
          "len",
          "quick_refine_text",
          "isinstance",
          "quick_refine_code"
        ],
        "test_enhancement_context_building": [
          "len",
          "pipeline._enhance_context"
        ],
        "test_critique_generation": [
          "pipeline._critique_with_mcp",
          "len",
          "isinstance"
        ],
        "test_validation_logic": [
          "pipeline._validate_improvements"
        ],
        "test_error_handling_file_not_found": [
          "pipeline.refine_code_file",
          "pytest.raises"
        ],
        "test_empty_results_report": [
          "pipeline.generate_refinement_report"
        ],
        "test_auto_logging_integration": [
          "patch",
          "len",
          "pipeline.refine"
        ],
        "test_all_refinement_types": [],
        "test_refinement_result_creation": [
          "RefinementResult"
        ]
      },
      "dependencies": [
        "Mock",
        "Path",
        "RefinementResult",
        "RefinementType",
        "SelfRefinePipeline",
        "patch",
        "pathlib",
        "pytest",
        "quick_refine_code",
        "quick_refine_text",
        "src.rag_context.interfaces.self_refine_pipeline",
        "tempfile",
        "unittest.mock"
      ],
      "hash": "05a17d4148ab1b8353ab668170382fc22d156d6746c10cd6bb09241703f4f0c8",
      "artifact_id": "83be64fe-5ee4-4d08-9f8e-5f69d6864ca0"
    },
    {
      "module_id": "restructure.tests.test_smoke",
      "path": "restructure/tests/test_smoke.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_smoke",
          "docstring": "",
          "line_range": [
            1,
            2
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_smoke": []
      },
      "dependencies": [],
      "hash": "a6845264444e66537bcf4ff95e3560a9deb6764c4ad8fda31f59580707d69a97",
      "artifact_id": "3492f65b-c75e-4c36-81a4-c5dce5c8fdbe"
    },
    {
      "module_id": "restructure.core.struct_tools.structure_analyzer",
      "path": "restructure/core/struct_tools/structure_analyzer.py",
      "category": "core",
      "module_doc": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0443\u043b\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e struct.json\n\u0438 modular index (.llmstruct_index/)\n\n\u0426\u0435\u043b\u044c: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430,\n\u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, call graphs, \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            32,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            46
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "generate_structure",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
          "line_range": [
            48,
            92
          ],
          "parameters": [
            "self",
            "target_dir",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "load_structure",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
          "line_range": [
            94,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_modular_index",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
          "line_range": [
            116,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_overview",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module_dependencies",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            158,
            193
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "find_function_callers",
          "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "function_name",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "get_module_complexity_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            218,
            254
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self",
            "functions",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "generate_architecture_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            276,
            337
          ],
          "parameters": [
            "self",
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "search_functions_by_pattern",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
          "line_range": [
            339,
            355
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "get_refactoring_impact",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            357,
            394
          ],
          "parameters": [
            "self",
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "_assess_refactoring_risk",
          "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            396,
            407
          ],
          "parameters": [
            "self",
            "importers_count",
            "called_functions_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            19,
            36
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                32,
                36
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructureAnalyzer",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 struct.json \u0438 modular index",
          "line_range": [
            39,
            407
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                46
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "generate_structure",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f struct.json \u0438 modular index \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e llmstruct",
              "line_range": [
                48,
                92
              ],
              "parameters": [
                "self",
                "target_dir",
                "force"
              ]
            },
            {
              "name": "load_structure",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 struct.json \u0438 modular index \u0432 \u043f\u0430\u043c\u044f\u0442\u044c",
              "line_range": [
                94,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_modular_index",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 modular index",
              "line_range": [
                116,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_overview",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                139,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_module_dependencies",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                158,
                193
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "find_function_callers",
              "docstring": "\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043c\u0435\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "function_name",
                "module_path"
              ]
            },
            {
              "name": "get_module_complexity_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                218,
                254
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                256,
                274
              ],
              "parameters": [
                "self",
                "functions",
                "classes"
              ]
            },
            {
              "name": "generate_architecture_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043e\u0431 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                276,
                337
              ],
              "parameters": [
                "self",
                "output_path"
              ]
            },
            {
              "name": "search_functions_by_pattern",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438",
              "line_range": [
                339,
                355
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "get_refactoring_impact",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                357,
                394
              ],
              "parameters": [
                "self",
                "module_path"
              ]
            },
            {
              "name": "_assess_refactoring_risk",
              "docstring": "\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
              "line_range": [
                396,
                407
              ],
              "parameters": [
                "self",
                "importers_count",
                "called_functions_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "StructureConfig",
          "logging.getLogger"
        ],
        "generate_structure": [
          "str",
          "subprocess.run",
          "datetime.now",
          "cmd.extend"
        ],
        "load_structure": [
          "self._load_modular_index",
          "open",
          "len",
          "json.load"
        ],
        "_load_modular_index": [
          "str",
          "len",
          "list",
          "open",
          "module_data.get",
          "json.load"
        ],
        "get_project_overview": [
          "sum",
          "len",
          "mod.get"
        ],
        "analyze_module_dependencies": [
          "f.get",
          "len",
          "target_module.get",
          "c.get",
          "module.get"
        ],
        "find_function_callers": [
          "callers.append",
          "edge.get",
          "call_graph.get",
          "target.get"
        ],
        "get_module_complexity_metrics": [
          "sum",
          "len",
          "function_lines.append",
          "module_data.get",
          "max",
          "self._calculate_complexity_score",
          "class_lines.append"
        ],
        "_calculate_complexity_score": [
          "round",
          "len",
          "func.get",
          "cls.get"
        ],
        "generate_architecture_report": [
          "self.get_project_overview",
          "report_lines.extend",
          "open",
          "f.write",
          "enumerate",
          "complexity_analysis.sort",
          "self.get_module_complexity_metrics",
          "datetime.now",
          "complexity_analysis.append"
        ],
        "search_functions_by_pattern": [
          "module.get",
          "pattern.lower",
          "results.append",
          "function.get"
        ],
        "get_refactoring_impact": [
          "len",
          "edge.get",
          "self._assess_refactoring_risk",
          "call_graph.get",
          "source.get",
          "import_item.get",
          "module.get",
          "importers.append",
          "target.get",
          "called_functions.append"
        ],
        "_assess_refactoring_risk": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "typing"
      ],
      "hash": "3b33899511ecb08c4d0c0f2400c74c15e97b81ba1866741ad68bf7f2c680d9d9",
      "artifact_id": "dfdc5d4b-ffc1-4d22-bb2d-7cc3f761a5fb"
    },
    {
      "module_id": "restructure.core.struct_tools.mcp_interface",
      "path": "restructure/core/struct_tools/mcp_interface.py",
      "category": "core",
      "module_doc": "MCP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f struct_tools \u0441 Model Context Protocol \u0434\u043b\u044f Cursor IDE",
      "functions": [
        {
          "name": "run_struct_mcp_server",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f struct_tools",
          "line_range": [
            358,
            361
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            44
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_tools",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
          "line_range": [
            46,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            164,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            197,
            224
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_overview",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            226,
            239
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_analyze_module",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            241,
            272
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_search_functions",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            274,
            294
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_find_callers",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            296,
            319
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_handle_generate_report",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            321,
            341
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            343,
            354
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            168,
            195
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            20,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureMCPServer",
          "docstring": "MCP \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
          "line_range": [
            31,
            354
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                44
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_tools",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 MCP",
              "line_range": [
                46,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                164,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_generate",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                197,
                224
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_overview",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                226,
                239
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_analyze_module",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                241,
                272
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_search_functions",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                274,
                294
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_find_callers",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                296,
                319
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_handle_generate_report",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                321,
                341
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435",
              "line_range": [
                343,
                354
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "types",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "Tool",
          "docstring": "",
          "line_range": [
            19,
            20
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                20,
                20
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TextContent",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                22
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolRequest",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                24
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CallToolResult",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                26
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "StructureAnalyzer",
          "ImportError",
          "Server",
          "StructureConfig",
          "logging.getLogger",
          "self._setup_handlers",
          "self._setup_tools"
        ],
        "_setup_tools": [],
        "_setup_handlers": [],
        "handle_call_tool": [
          "str",
          "self._handle_search_functions",
          "types.TextContent",
          "self._handle_generate",
          "self._handle_analyze_module",
          "self._handle_find_callers",
          "self._handle_generate_report",
          "json.dumps",
          "self._handle_overview"
        ],
        "_handle_generate": [
          "result.update",
          "args.get",
          "json.dumps",
          "types.TextContent"
        ],
        "_handle_overview": [
          "types.TextContent",
          "json.dumps"
        ],
        "_handle_analyze_module": [
          "types.TextContent",
          "args.get",
          "json.dumps"
        ],
        "_handle_search_functions": [
          "types.TextContent",
          "len",
          "json.dumps"
        ],
        "_handle_find_callers": [
          "types.TextContent",
          "len",
          "args.get",
          "json.dumps"
        ],
        "_handle_generate_report": [
          "types.TextContent",
          "args.get",
          "json.dumps"
        ],
        "run_stdio": [
          "stdio_server",
          "ImportError"
        ],
        "run_struct_mcp_server": [
          "server.run_stdio",
          "StructureMCPServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "json",
        "logging",
        "mcp",
        "mcp.server",
        "mcp.server.stdio",
        "pathlib",
        "stdio_server",
        "structure_analyzer",
        "types",
        "typing"
      ],
      "hash": "b72078d01e40ffab9133d1701757ae12de3ed0b7d0d837fb2a3c04e035afe3e8",
      "artifact_id": "c4a4c0a0-df2b-452a-a10c-0780c5e6956c"
    },
    {
      "module_id": "restructure.core.struct_tools.__init__",
      "path": "restructure/core/struct_tools/__init__.py",
      "category": "cli",
      "module_doc": "struct_tools - \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n\u042d\u0442\u043e\u0442 \u043f\u0430\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f:\n- \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 struct.json\n- \u0420\u0430\u0431\u043e\u0442\u044b \u0441 modular index (.llmstruct_index/)\n- \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430  \n- \u041e\u0446\u0435\u043d\u043a\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430\n- \u0410\u043d\u0430\u043b\u0438\u0437\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 call graphs",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "StructureAnalyzer",
        "StructureCLI",
        "StructureConfig",
        "cli_interface",
        "structure_analyzer"
      ],
      "hash": "b0756092205908aa270fe5bbe802e388145c4e7f458c4f96a738f4d5c0e5fcc1",
      "artifact_id": "6c4fbe45-86c7-49e9-aaad-9731a51628d4"
    },
    {
      "module_id": "restructure.core.struct_tools.cli_interface",
      "path": "restructure/core/struct_tools/cli_interface.py",
      "category": "core",
      "module_doc": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f CLI",
          "line_range": [
            383,
            386
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            22,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "initialize_analyzer",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            159,
            172
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_generate",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            174,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_overview",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            190,
            213
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_module",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            215,
            285
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_search",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            287,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_callers",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            310,
            335
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_report",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
          "line_range": [
            337,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
          "line_range": [
            350,
            380
          ],
          "parameters": [
            "self",
            "argv"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructureCLI",
          "docstring": "CLI \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c",
          "line_range": [
            15,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_parser",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
              "line_range": [
                22,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "verbose"
              ]
            },
            {
              "name": "initialize_analyzer",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                159,
                172
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_generate",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                174,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_overview",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                190,
                213
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_module",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                215,
                285
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_search",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                287,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_callers",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                310,
                335
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_report",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0447\u0451\u0442\u0430",
              "line_range": [
                337,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a CLI",
              "line_range": [
                350,
                380
              ],
              "parameters": [
                "self",
                "argv"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger"
        ],
        "create_parser": [
          "Path",
          "mod_parser.add_argument",
          "report_parser.add_argument",
          "callers_parser.add_argument",
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "gen_parser.add_argument",
          "search_parser.add_argument"
        ],
        "setup_logging": [
          "logging.basicConfig"
        ],
        "initialize_analyzer": [
          "StructureAnalyzer",
          "StructureConfig",
          "hasattr"
        ],
        "cmd_generate": [
          "print"
        ],
        "cmd_overview": [
          "print"
        ],
        "cmd_module": [
          "print"
        ],
        "cmd_search": [
          "len",
          "print"
        ],
        "cmd_callers": [
          "len",
          "print"
        ],
        "cmd_report": [
          "print"
        ],
        "run": [
          "self.cmd_callers",
          "print",
          "parser.parse_args",
          "self.setup_logging",
          "self.cmd_module",
          "parser.print_help",
          "self.initialize_analyzer",
          "self.cmd_generate",
          "self.cmd_overview",
          "self.cmd_search",
          "self.create_parser",
          "self.cmd_report"
        ],
        "main": [
          "StructureCLI",
          "cli.run"
        ]
      },
      "dependencies": [
        "Optional",
        "Path",
        "StructureAnalyzer",
        "StructureConfig",
        "argparse",
        "json",
        "logging",
        "pathlib",
        "structure_analyzer",
        "sys",
        "typing"
      ],
      "hash": "3ada7ae986e24db35a509f66751ae1b53710ffaa9135c7aced362404fdf7917e",
      "artifact_id": "a07d9e52-89c2-40a5-a15b-8f2bfdf45946"
    },
    {
      "module_id": "restructure.core.rag_context.active_knowledge_integration",
      "path": "restructure/core/rag_context/active_knowledge_integration.py",
      "category": "core",
      "module_doc": "Active Knowledge Integration - Phase 4A.2.4 Safe Implementation\nIntegrates Phase 4A.2.1 (extraction), 4A.2.2 (discovery), 4A.2.3 (context) into active workflow.",
      "functions": [
        {
          "name": "create_active_integrator",
          "docstring": "Create active integrator safely",
          "line_range": [
            456,
            467
          ],
          "parameters": [
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            55,
            71
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery",
            "context_manager"
          ],
          "decorators": []
        },
        {
          "name": "start_active_session",
          "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
          "line_range": [
            73,
            112
          ],
          "parameters": [
            "self",
            "task_description",
            "files_involved"
          ],
          "decorators": []
        },
        {
          "name": "get_contextual_suggestions",
          "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
          "line_range": [
            114,
            149
          ],
          "parameters": [
            "self",
            "current_code",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "notify_solution_implemented",
          "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
          "line_range": [
            151,
            192
          ],
          "parameters": [
            "self",
            "solution_description",
            "code_snippet"
          ],
          "decorators": []
        },
        {
          "name": "suggest_related_sessions",
          "docstring": "Suggest related sessions that might have relevant context.",
          "line_range": [
            194,
            239
          ],
          "parameters": [
            "self",
            "current_problem"
          ],
          "decorators": []
        },
        {
          "name": "_generate_proactive_suggestions",
          "docstring": "Generate proactive suggestions for a new task",
          "line_range": [
            241,
            258
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_convert_discovery_to_suggestions",
          "docstring": "Convert discovery results to knowledge suggestions",
          "line_range": [
            260,
            281
          ],
          "parameters": [
            "self",
            "discovery_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_based_suggestions",
          "docstring": "Get suggestions based on previous session contexts",
          "line_range": [
            283,
            307
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_based_suggestions",
          "docstring": "Get suggestions based on current file context",
          "line_range": [
            309,
            327
          ],
          "parameters": [
            "self",
            "current_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on problem type",
          "line_range": [
            329,
            350
          ],
          "parameters": [
            "self",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_classify_problem_type",
          "docstring": "Classify problem type from task description",
          "line_range": [
            352,
            365
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "_save_solution_pattern",
          "docstring": "Save new solution pattern to knowledge base",
          "line_range": [
            367,
            389
          ],
          "parameters": [
            "self",
            "pattern"
          ],
          "decorators": []
        },
        {
          "name": "_log_session_event",
          "docstring": "Log session events for integration tracking",
          "line_range": [
            391,
            407
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "_suggestion_to_dict",
          "docstring": "Convert suggestion to dict for JSON serialization",
          "line_range": [
            409,
            418
          ],
          "parameters": [
            "self",
            "suggestion"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_stats",
          "docstring": "Get integration system statistics",
          "line_range": [
            420,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable integration system safely",
          "line_range": [
            444,
            448
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable integration system",
          "line_range": [
            450,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "KnowledgeSuggestion",
          "docstring": "Proactive knowledge suggestion for active workflow",
          "line_range": [
            17,
            24
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveSessionState",
          "docstring": "Current active session state for context-aware suggestions",
          "line_range": [
            28,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ActiveKnowledgeIntegrator",
          "docstring": "Active Knowledge Integration system - the intelligence layer.\n\nBrings together all knowledge preservation components into active workflow:\n- Proactive suggestions during coding\n- \"You solved this before\" notifications  \n- Auto-tagging of new solutions\n- Smart context switching\n\nSafe design principles:\n- Builds on all previous Phase 4A.2.1-3 components\n- Non-intrusive suggestions (can be ignored)\n- Performance-conscious (fast suggestions)\n- Easy disable without workflow disruption",
          "line_range": [
            38,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                55,
                71
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery",
                "context_manager"
              ]
            },
            {
              "name": "start_active_session",
              "docstring": "Start active knowledge-aware session.\n\nImmediately provides proactive suggestions based on task.",
              "line_range": [
                73,
                112
              ],
              "parameters": [
                "self",
                "task_description",
                "files_involved"
              ]
            },
            {
              "name": "get_contextual_suggestions",
              "docstring": "Get contextual suggestions based on current coding context.\n\n\"You solved this before\" type suggestions.",
              "line_range": [
                114,
                149
              ],
              "parameters": [
                "self",
                "current_code",
                "current_file"
              ]
            },
            {
              "name": "notify_solution_implemented",
              "docstring": "Notify that a solution was implemented - auto-tag for future discovery.",
              "line_range": [
                151,
                192
              ],
              "parameters": [
                "self",
                "solution_description",
                "code_snippet"
              ]
            },
            {
              "name": "suggest_related_sessions",
              "docstring": "Suggest related sessions that might have relevant context.",
              "line_range": [
                194,
                239
              ],
              "parameters": [
                "self",
                "current_problem"
              ]
            },
            {
              "name": "_generate_proactive_suggestions",
              "docstring": "Generate proactive suggestions for a new task",
              "line_range": [
                241,
                258
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_convert_discovery_to_suggestions",
              "docstring": "Convert discovery results to knowledge suggestions",
              "line_range": [
                260,
                281
              ],
              "parameters": [
                "self",
                "discovery_result"
              ]
            },
            {
              "name": "_get_context_based_suggestions",
              "docstring": "Get suggestions based on previous session contexts",
              "line_range": [
                283,
                307
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_get_file_based_suggestions",
              "docstring": "Get suggestions based on current file context",
              "line_range": [
                309,
                327
              ],
              "parameters": [
                "self",
                "current_file"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on problem type",
              "line_range": [
                329,
                350
              ],
              "parameters": [
                "self",
                "problem_type"
              ]
            },
            {
              "name": "_classify_problem_type",
              "docstring": "Classify problem type from task description",
              "line_range": [
                352,
                365
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "_save_solution_pattern",
              "docstring": "Save new solution pattern to knowledge base",
              "line_range": [
                367,
                389
              ],
              "parameters": [
                "self",
                "pattern"
              ]
            },
            {
              "name": "_log_session_event",
              "docstring": "Log session events for integration tracking",
              "line_range": [
                391,
                407
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "_suggestion_to_dict",
              "docstring": "Convert suggestion to dict for JSON serialization",
              "line_range": [
                409,
                418
              ],
              "parameters": [
                "self",
                "suggestion"
              ]
            },
            {
              "name": "get_integration_stats",
              "docstring": "Get integration system statistics",
              "line_range": [
                420,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable integration system safely",
              "line_range": [
                444,
                448
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable integration system",
              "line_range": [
                450,
                452
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "SessionContextManager",
          "SafeKnowledgeExtractor",
          "SmartCodeDiscovery",
          "Path"
        ],
        "start_active_session": [
          "len",
          "str",
          "self._classify_problem_type",
          "ActiveSessionState",
          "self._log_session_event",
          "int",
          "self._suggestion_to_dict",
          "self._generate_proactive_suggestions",
          "time.time"
        ],
        "get_contextual_suggestions": [
          "sorted",
          "suggestions.extend",
          "self._get_context_based_suggestions",
          "self._convert_discovery_to_suggestions",
          "self._get_file_based_suggestions"
        ],
        "notify_solution_implemented": [
          "str",
          "self._log_session_event",
          "int",
          "time.time",
          "self._save_solution_pattern"
        ],
        "suggest_related_sessions": [
          "Path",
          "len",
          "set",
          "open",
          "context_stats.get",
          "json.load",
          "current_problem.lower",
          "description.split",
          "related_sessions.append",
          "snapshot.get",
          "related_sessions.sort",
          "bool"
        ],
        "_generate_proactive_suggestions": [
          "suggestions.extend",
          "self._convert_discovery_to_suggestions",
          "self._classify_problem_type",
          "self._get_workflow_suggestions"
        ],
        "_convert_discovery_to_suggestions": [
          "Path",
          "len",
          "KnowledgeSuggestion",
          "enumerate",
          "suggestions.append"
        ],
        "_get_context_based_suggestions": [
          "min",
          "KnowledgeSuggestion",
          "suggestions.append",
          "self.suggest_related_sessions"
        ],
        "_get_file_based_suggestions": [
          "Path",
          "KnowledgeSuggestion",
          "suggestions.append"
        ],
        "_get_workflow_suggestions": [
          "problem_type.title",
          "KnowledgeSuggestion",
          "suggestions.append"
        ],
        "_classify_problem_type": [
          "any",
          "task_description.lower"
        ],
        "_save_solution_pattern": [
          "Path",
          "patterns_file.exists",
          "open",
          "json.dump",
          "patterns.append",
          "json.load"
        ],
        "_log_session_event": [
          "open",
          "time.time",
          "json.dumps",
          "f.write"
        ],
        "_suggestion_to_dict": [],
        "get_integration_stats": [
          "log_file.exists",
          "open",
          "sum"
        ],
        "disable": [
          "self._log_session_event"
        ],
        "enable": [],
        "create_active_integrator": [
          "print",
          "integrator.disable",
          "ActiveKnowledgeIntegrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "DiscoveryResult",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SessionContextManager",
        "SmartCodeDiscovery",
        "Tuple",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "session_context_manager",
        "time",
        "typing"
      ],
      "hash": "80e046baa4fc0e0d227447432806987fef70e8ec0dab38f131cdb0160f876c92",
      "artifact_id": "e8f69cf1-247b-4ad2-a12d-7c6267fccb86"
    },
    {
      "module_id": "restructure.core.rag_context.cursor_intelligence",
      "path": "restructure/core/rag_context/cursor_intelligence.py",
      "category": "core",
      "module_doc": "Cursor Intelligence System for Workflow Enhancement\n\nPhase 4A.4: Intelligent synthesis of Cursor history patterns for enhanced development workflow.\nIntegrates with Phase 4A.2 Knowledge Preservation System for comprehensive intelligence.",
      "functions": [
        {
          "name": "create_cursor_intelligence",
          "docstring": "Create and initialize Cursor Intelligence System",
          "line_range": [
            278,
            280
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_module_placement",
          "docstring": "Suggest optimal module placement based on architectural patterns",
          "line_range": [
            49,
            68
          ],
          "parameters": [
            "self",
            "functionality_description"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_pattern_relevance",
          "docstring": "Calculate how relevant patterns are to description",
          "line_range": [
            70,
            74
          ],
          "parameters": [
            "self",
            "description",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            84,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_workflow_context",
          "docstring": "Comprehensive workflow analysis combining all intelligence sources",
          "line_range": [
            90,
            148
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_proactive_suggestions",
          "docstring": "Get proactive suggestions based on current session state",
          "line_range": [
            150,
            170
          ],
          "parameters": [
            "self",
            "session_state"
          ],
          "decorators": []
        },
        {
          "name": "_assess_complexity",
          "docstring": "Assess task complexity",
          "line_range": [
            172,
            187
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_assess_quality_risk",
          "docstring": "Assess quality risk (0.0 to 1.0)",
          "line_range": [
            189,
            197
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_time",
          "docstring": "Estimate implementation time",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "self",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_get_recommended_approach",
          "docstring": "Get recommended implementation approach",
          "line_range": [
            208,
            227
          ],
          "parameters": [
            "self",
            "complexity",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_risk_factors",
          "docstring": "Get risk factors based on risk level",
          "line_range": [
            229,
            236
          ],
          "parameters": [
            "self",
            "risk"
          ],
          "decorators": []
        },
        {
          "name": "_get_success_factors",
          "docstring": "Get success factors",
          "line_range": [
            238,
            247
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_insight_to_dict",
          "docstring": "Convert insight to dictionary format",
          "line_range": [
            249,
            259
          ],
          "parameters": [
            "self",
            "insight"
          ],
          "decorators": []
        },
        {
          "name": "_generate_summary",
          "docstring": "Generate human-readable summary",
          "line_range": [
            261,
            276
          ],
          "parameters": [
            "self",
            "insights",
            "prediction"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "IntelligenceInsight",
          "docstring": "Single intelligence insight from pattern analysis",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "WorkflowPrediction",
          "docstring": "Prediction about workflow complexity and quality",
          "line_range": [
            29,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ArchitecturalIntelligence",
          "docstring": "Intelligence patterns from architectural analysis",
          "line_range": [
            38,
            74
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_module_placement",
              "docstring": "Suggest optimal module placement based on architectural patterns",
              "line_range": [
                49,
                68
              ],
              "parameters": [
                "self",
                "functionality_description"
              ]
            },
            {
              "name": "_calculate_pattern_relevance",
              "docstring": "Calculate how relevant patterns are to description",
              "line_range": [
                70,
                74
              ],
              "parameters": [
                "self",
                "description",
                "patterns"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntelligenceOrchestrator",
          "docstring": "Main orchestrator for Cursor Intelligence System\n\nSynthesizes all intelligence patterns for comprehensive workflow enhancement.\nIntegrates with Phase 4A.2 Knowledge Preservation System.",
          "line_range": [
            76,
            276
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                84,
                88
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_workflow_context",
              "docstring": "Comprehensive workflow analysis combining all intelligence sources",
              "line_range": [
                90,
                148
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "get_proactive_suggestions",
              "docstring": "Get proactive suggestions based on current session state",
              "line_range": [
                150,
                170
              ],
              "parameters": [
                "self",
                "session_state"
              ]
            },
            {
              "name": "_assess_complexity",
              "docstring": "Assess task complexity",
              "line_range": [
                172,
                187
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_assess_quality_risk",
              "docstring": "Assess quality risk (0.0 to 1.0)",
              "line_range": [
                189,
                197
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_time",
              "docstring": "Estimate implementation time",
              "line_range": [
                199,
                206
              ],
              "parameters": [
                "self",
                "complexity"
              ]
            },
            {
              "name": "_get_recommended_approach",
              "docstring": "Get recommended implementation approach",
              "line_range": [
                208,
                227
              ],
              "parameters": [
                "self",
                "complexity",
                "risk"
              ]
            },
            {
              "name": "_get_risk_factors",
              "docstring": "Get risk factors based on risk level",
              "line_range": [
                229,
                236
              ],
              "parameters": [
                "self",
                "risk"
              ]
            },
            {
              "name": "_get_success_factors",
              "docstring": "Get success factors",
              "line_range": [
                238,
                247
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_insight_to_dict",
              "docstring": "Convert insight to dictionary format",
              "line_range": [
                249,
                259
              ],
              "parameters": [
                "self",
                "insight"
              ]
            },
            {
              "name": "_generate_summary",
              "docstring": "Generate human-readable summary",
              "line_range": [
                261,
                276
              ],
              "parameters": [
                "self",
                "insights",
                "prediction"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "ArchitecturalIntelligence"
        ],
        "suggest_module_placement": [
          "self._calculate_pattern_relevance",
          "insights.append",
          "IntelligenceInsight",
          "category.lower"
        ],
        "_calculate_pattern_relevance": [
          "sum",
          "len",
          "min",
          "pattern.lower",
          "description.lower"
        ],
        "analyze_workflow_context": [
          "WorkflowPrediction",
          "len",
          "self._insight_to_dict",
          "str",
          "self._generate_summary",
          "self._assess_quality_risk",
          "self._get_success_factors",
          "self._estimate_time",
          "logger.info",
          "self._assess_complexity",
          "logger.error",
          "self._get_risk_factors",
          "context.get",
          "datetime.now",
          "self._get_recommended_approach",
          "bool"
        ],
        "get_proactive_suggestions": [
          "str",
          "any",
          "suggestions.append"
        ],
        "_assess_complexity": [
          "sum",
          "str",
          "len"
        ],
        "_assess_quality_risk": [
          "sum",
          "str",
          "min",
          "len"
        ],
        "_estimate_time": [
          "time_mapping.get"
        ],
        "_get_recommended_approach": [
          "approach.extend"
        ],
        "_get_risk_factors": [],
        "_get_success_factors": [
          "factors.append",
          "str"
        ],
        "_insight_to_dict": [],
        "_generate_summary": [
          "len"
        ],
        "create_cursor_intelligence": [
          "CursorIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "df53087815726c54c0bb11a7c2de0495692fc727dbec2f09f94575ddb7ff5c3f",
      "artifact_id": "a992eeaf-3449-4d25-9396-09f85c5ba50a"
    },
    {
      "module_id": "restructure.core.rag_context.knowledge_extractor",
      "path": "restructure/core/rag_context/knowledge_extractor.py",
      "category": "core",
      "module_doc": "Knowledge Extractor - Phase 4A.2.1 Safe Implementation\nBuilds on existing RAG infrastructure without breaking existing tools.\nLessons learned from struct tools issues applied.",
      "functions": [
        {
          "name": "create_knowledge_extractor",
          "docstring": "Create knowledge extractor safely",
          "line_range": [
            164,
            173
          ],
          "parameters": [
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing enhancer",
          "line_range": [
            50,
            61
          ],
          "parameters": [
            "self",
            "enhancer"
          ],
          "decorators": []
        },
        {
          "name": "extract_code_knowledge",
          "docstring": "Extract code knowledge safely",
          "line_range": [
            63,
            85
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_patterns_from_document",
          "docstring": "Extract patterns from document",
          "line_range": [
            87,
            108
          ],
          "parameters": [
            "self",
            "doc"
          ],
          "decorators": []
        },
        {
          "name": "_save_patterns",
          "docstring": "Save patterns to JSON",
          "line_range": [
            110,
            131
          ],
          "parameters": [
            "self",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "get_extraction_stats",
          "docstring": "Get extraction statistics",
          "line_range": [
            133,
            152
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable safely",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable knowledge extraction",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CodePattern",
          "docstring": "Extracted code pattern for knowledge base",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "KnowledgeExtractionResult",
          "docstring": "Result of knowledge extraction operation",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SafeKnowledgeExtractor",
          "docstring": "Safe knowledge extractor that builds on existing RAG infrastructure.\n\nDesign principles:\n- NO breaking changes to existing components\n- Graceful fallbacks if anything fails  \n- Self-contained with minimal dependencies\n- Can be disabled without trace",
          "line_range": [
            39,
            160
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing enhancer",
              "line_range": [
                50,
                61
              ],
              "parameters": [
                "self",
                "enhancer"
              ]
            },
            {
              "name": "extract_code_knowledge",
              "docstring": "Extract code knowledge safely",
              "line_range": [
                63,
                85
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_patterns_from_document",
              "docstring": "Extract patterns from document",
              "line_range": [
                87,
                108
              ],
              "parameters": [
                "self",
                "doc"
              ]
            },
            {
              "name": "_save_patterns",
              "docstring": "Save patterns to JSON",
              "line_range": [
                110,
                131
              ],
              "parameters": [
                "self",
                "patterns"
              ]
            },
            {
              "name": "get_extraction_stats",
              "docstring": "Get extraction statistics",
              "line_range": [
                133,
                152
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable safely",
              "line_range": [
                154,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable knowledge extraction",
              "line_range": [
                158,
                160
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "PromptEnhancer"
        ],
        "extract_code_knowledge": [
          "len",
          "str",
          "patterns.extend",
          "self._extract_patterns_from_document",
          "self._save_patterns",
          "time.time"
        ],
        "_extract_patterns_from_document": [
          "patterns.append",
          "CodePattern",
          "content.split",
          "line.strip",
          "enumerate"
        ],
        "_save_patterns": [
          "open",
          "patterns_data.append",
          "time.time",
          "json.dump"
        ],
        "get_extraction_stats": [
          "patterns_file.exists",
          "open",
          "len",
          "json.load"
        ],
        "disable": [],
        "enable": [],
        "create_knowledge_extractor": [
          "extractor.disable",
          "SafeKnowledgeExtractor",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "dataclass",
        "dataclasses",
        "enhancer",
        "json",
        "loader",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9d90819f91f32cb6cb28ee6a06ffa952263058f6d93b48662014299b2cc3fd6f",
      "artifact_id": "258cdfc1-efaa-493a-9223-ef79fc4cc3b0"
    },
    {
      "module_id": "restructure.core.rag_context.code_discovery",
      "path": "restructure/core/rag_context/code_discovery.py",
      "category": "core",
      "module_doc": "Smart Code Discovery - Phase 4A.2.2 Safe Implementation\nBuilds on Phase 4A.2.1 knowledge extraction safely.",
      "functions": [
        {
          "name": "create_discovery_system",
          "docstring": "Create discovery system safely",
          "line_range": [
            266,
            275
          ],
          "parameters": [
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing extractor",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self",
            "extractor"
          ],
          "decorators": []
        },
        {
          "name": "search_solutions",
          "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
          "line_range": [
            42,
            91
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_load_patterns_safely",
          "docstring": "Load patterns from JSON safely",
          "line_range": [
            93,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_search_patterns_simple",
          "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
          "line_range": [
            122,
            172
          ],
          "parameters": [
            "self",
            "query",
            "patterns",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_generate_suggestions",
          "docstring": "Generate practical suggestions based on found patterns",
          "line_range": [
            174,
            204
          ],
          "parameters": [
            "self",
            "query",
            "patterns"
          ],
          "decorators": []
        },
        {
          "name": "quick_search",
          "docstring": "Quick keyword-based search for rapid discovery",
          "line_range": [
            206,
            233
          ],
          "parameters": [
            "self",
            "keywords"
          ],
          "decorators": []
        },
        {
          "name": "get_discovery_stats",
          "docstring": "Get discovery system statistics",
          "line_range": [
            235,
            254
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable discovery system safely",
          "line_range": [
            256,
            258
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable discovery system",
          "line_range": [
            260,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DiscoveryResult",
          "docstring": "Result of code discovery search",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartCodeDiscovery",
          "docstring": "Smart code discovery system for \"Have I solved this before?\" queries.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1 infrastructure\n- No breaking changes to existing components\n- Graceful degradation if knowledge base missing\n- Simple text search (no complex NLP that could break)",
          "line_range": [
            24,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing extractor",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self",
                "extractor"
              ]
            },
            {
              "name": "search_solutions",
              "docstring": "Search for existing solutions to a coding problem.\n\nAnswers \"Have I solved this before?\" type queries.",
              "line_range": [
                42,
                91
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_load_patterns_safely",
              "docstring": "Load patterns from JSON safely",
              "line_range": [
                93,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_search_patterns_simple",
              "docstring": "Simple text-based pattern search (no complex NLP dependencies)",
              "line_range": [
                122,
                172
              ],
              "parameters": [
                "self",
                "query",
                "patterns",
                "max_results"
              ]
            },
            {
              "name": "_generate_suggestions",
              "docstring": "Generate practical suggestions based on found patterns",
              "line_range": [
                174,
                204
              ],
              "parameters": [
                "self",
                "query",
                "patterns"
              ]
            },
            {
              "name": "quick_search",
              "docstring": "Quick keyword-based search for rapid discovery",
              "line_range": [
                206,
                233
              ],
              "parameters": [
                "self",
                "keywords"
              ]
            },
            {
              "name": "get_discovery_stats",
              "docstring": "Get discovery system statistics",
              "line_range": [
                235,
                254
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable discovery system safely",
              "line_range": [
                256,
                258
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable discovery system",
              "line_range": [
                260,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SafeKnowledgeExtractor"
        ],
        "search_solutions": [
          "self._load_patterns_safely",
          "self._search_patterns_simple",
          "DiscoveryResult",
          "self._generate_suggestions",
          "time.time"
        ],
        "_load_patterns_safely": [
          "patterns_file.exists",
          "item.get",
          "open",
          "json.load",
          "patterns.append",
          "CodePattern"
        ],
        "_search_patterns_simple": [
          "Path",
          "set",
          "pattern_scores.sort",
          "any",
          "pattern_scores.append",
          "query_lower.split",
          "query.lower"
        ],
        "_generate_suggestions": [
          "Path",
          "len",
          "set",
          "list",
          "any",
          "name.lower",
          "suggestions.append"
        ],
        "quick_search": [
          "Path",
          "str",
          "self._load_patterns_safely",
          "keyword.lower",
          "matches.append",
          "time.time"
        ],
        "get_discovery_stats": [
          "patterns_file.exists",
          "open",
          "len",
          "json.load"
        ],
        "disable": [],
        "enable": [],
        "create_discovery_system": [
          "discovery.disable",
          "SmartCodeDiscovery",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CodePattern",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "Tuple",
        "dataclass",
        "dataclasses",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "6cbc46e2dd7df1aad1c053912305e81c765be1c724588114984d7c2c39c1460b",
      "artifact_id": "ff2a56a7-e258-450a-9cac-4bbcc29a853e"
    },
    {
      "module_id": "restructure.core.rag_context.embedder",
      "path": "restructure/core/rag_context/embedder.py",
      "category": "core",
      "module_doc": "Embedding \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f RAG \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "parameters": [
            "self",
            "model_name",
            "cache_dir"
          ],
          "decorators": []
        },
        {
          "name": "model",
          "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "embed_text",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            32,
            54
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "embed_batch",
          "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            56,
            91
          ],
          "parameters": [
            "self",
            "texts"
          ],
          "decorators": []
        },
        {
          "name": "_hash_text",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            93,
            95
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_cache",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            97,
            105
          ],
          "parameters": [
            "self",
            "text_hash"
          ],
          "decorators": []
        },
        {
          "name": "_save_to_cache",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
          "line_range": [
            107,
            125
          ],
          "parameters": [
            "self",
            "text_hash",
            "embedding",
            "text_preview"
          ],
          "decorators": []
        },
        {
          "name": "similarity",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
          "line_range": [
            127,
            129
          ],
          "parameters": [
            "self",
            "embedding1",
            "embedding2"
          ],
          "decorators": []
        },
        {
          "name": "find_most_similar",
          "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
          "line_range": [
            131,
            144
          ],
          "parameters": [
            "self",
            "query_embedding",
            "candidate_embeddings",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
          "line_range": [
            146,
            153
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleEmbedder",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 embeddings \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            13,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                22
              ],
              "parameters": [
                "self",
                "model_name",
                "cache_dir"
              ]
            },
            {
              "name": "model",
              "docstring": "Lazy loading \u043c\u043e\u0434\u0435\u043b\u0438",
              "line_range": [
                25,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "embed_text",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 embedding \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
              "line_range": [
                32,
                54
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "embed_batch",
              "docstring": "Batch \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                56,
                91
              ],
              "parameters": [
                "self",
                "texts"
              ]
            },
            {
              "name": "_hash_text",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 hash \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                93,
                95
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_load_from_cache",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 embedding \u0438\u0437 \u043a\u044d\u0448\u0430 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                97,
                105
              ],
              "parameters": [
                "self",
                "text_hash"
              ]
            },
            {
              "name": "_save_to_cache",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 embedding \u0432 \u043a\u044d\u0448 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435",
              "line_range": [
                107,
                125
              ],
              "parameters": [
                "self",
                "text_hash",
                "embedding",
                "text_preview"
              ]
            },
            {
              "name": "similarity",
              "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 cosine similarity \u043c\u0435\u0436\u0434\u0443 embeddings",
              "line_range": [
                127,
                129
              ],
              "parameters": [
                "self",
                "embedding1",
                "embedding2"
              ]
            },
            {
              "name": "find_most_similar",
              "docstring": "\u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 embeddings",
              "line_range": [
                131,
                144
              ],
              "parameters": [
                "self",
                "query_embedding",
                "candidate_embeddings",
                "threshold"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043a\u044d\u0448\u0430",
              "line_range": [
                146,
                153
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "model": [
          "print",
          "SentenceTransformer"
        ],
        "embed_text": [
          "self._save_to_cache",
          "self._load_from_cache",
          "self._hash_text"
        ],
        "embed_batch": [
          "self._save_to_cache",
          "len",
          "print",
          "self._hash_text",
          "range",
          "zip",
          "new_indices.append",
          "new_texts.append",
          "enumerate",
          "self._load_from_cache"
        ],
        "_hash_text": [
          "hashlib.md5",
          "text.encode"
        ],
        "_load_from_cache": [
          "cache_file.exists",
          "print",
          "np.load"
        ],
        "_save_to_cache": [
          "open",
          "print",
          "json.dump",
          "np.save"
        ],
        "similarity": [
          "float",
          "np.dot"
        ],
        "find_most_similar": [
          "self.similarity",
          "enumerate",
          "similarities.sort",
          "similarities.append"
        ],
        "get_cache_stats": [
          "sum",
          "len",
          "list",
          "f.stat"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "SentenceTransformer",
        "Tuple",
        "hashlib",
        "json",
        "numpy",
        "os",
        "pathlib",
        "sentence_transformers",
        "typing"
      ],
      "hash": "d229d61d5b3f22f6b3f7c1b0b0efd293a16f13e53eb3391b24951b70fece349e",
      "artifact_id": "868b6372-8b34-45eb-81b2-29165cc79d30"
    },
    {
      "module_id": "restructure.core.rag_context.enhanced_logging_intelligence",
      "path": "restructure/core/rag_context/enhanced_logging_intelligence.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "create_enhanced_logging_intelligence",
          "docstring": "",
          "line_range": [
            23,
            24
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_current_session",
          "docstring": "",
          "line_range": [
            21,
            22
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionMetrics",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "EnhancedLoggingIntelligenceOrchestrator",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_current_session",
              "docstring": "",
              "line_range": [
                21,
                22
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "logger.info"
        ],
        "analyze_current_session": [],
        "create_enhanced_logging_intelligence": [
          "EnhancedLoggingIntelligenceOrchestrator"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "e5889a76316632b70966b6729f89187fe4510d5a0fd37ff3ae20505cf53aae3f",
      "artifact_id": "0815d501-74dd-4b75-aed2-5d10e6b774cc"
    },
    {
      "module_id": "restructure.core.rag_context.enhancer",
      "path": "restructure/core/rag_context/enhancer.py",
      "category": "core",
      "module_doc": "Prompt Enhancer - \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            33
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "initialize",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            35,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enhance",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            66,
            93
          ],
          "parameters": [
            "self",
            "task_text",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_load_all_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            95,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_build_enhanced_prompt",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            118,
            169
          ],
          "parameters": [
            "self",
            "original_task",
            "relevant_results",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            171,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            191,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PromptEnhancer",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 RAG",
          "line_range": [
            13,
            195
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                33
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "initialize",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                35,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enhance",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                66,
                93
              ],
              "parameters": [
                "self",
                "task_text",
                "context"
              ]
            },
            {
              "name": "_load_all_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                95,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_build_enhanced_prompt",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
              "line_range": [
                118,
                169
              ],
              "parameters": [
                "self",
                "original_task",
                "relevant_results",
                "context"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                171,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refresh_index",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                191,
                195
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "ContextRetriever",
          "SimpleEmbedder"
        ],
        "initialize": [
          "len",
          "print",
          "self._load_all_documents",
          "time.time"
        ],
        "enhance": [
          "self.initialize",
          "print",
          "self._build_enhanced_prompt"
        ],
        "_load_all_documents": [
          "len",
          "rules_loader.load_documents",
          "print",
          "RulesLoader",
          "documents.extend",
          "StructLoader",
          "documents.append",
          "struct_loader.load_document"
        ],
        "_build_enhanced_prompt": [
          "len",
          "context.items",
          "struct_context.append",
          "rules_context.append",
          "prompt_parts.append",
          "prompt_parts.extend"
        ],
        "get_stats": [
          "stats.update"
        ],
        "refresh_index": [
          "self.initialize",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "ContextRetriever",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "RAGConfig",
        "RetrievalResult",
        "RulesLoader",
        "SimpleEmbedder",
        "StructLoader",
        "config",
        "embedder",
        "loader",
        "pathlib",
        "retriever",
        "time",
        "typing"
      ],
      "hash": "8d2cfa893f488404c7818ec2ac83342e72863d59d3aed1de2b460c729d015f12",
      "artifact_id": "fb37b5d4-b960-47b1-b67f-d521ba8d09a2"
    },
    {
      "module_id": "restructure.core.rag_context.loader",
      "path": "restructure/core/rag_context/loader.py",
      "category": "core",
      "module_doc": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            27
          ],
          "parameters": [
            "self",
            "rules_dir",
            "extensions",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "load_documents",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
          "line_range": [
            29,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_rule_files",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            46,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_rule_file",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            68,
            93
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_clean_markdown",
          "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
          "line_range": [
            95,
            109
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_metadata",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            130,
            131
          ],
          "parameters": [
            "self",
            "struct_json"
          ],
          "decorators": []
        },
        {
          "name": "load_document",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
          "line_range": [
            133,
            161
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_format_struct_content",
          "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
          "line_range": [
            163,
            189
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Document",
          "docstring": "\u0423\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            13,
            18
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RulesLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u043f\u0440\u0430\u0432\u0438\u043b \u0438\u0437 .cursor/rules",
          "line_range": [
            21,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                27
              ],
              "parameters": [
                "self",
                "rules_dir",
                "extensions",
                "exclude_patterns"
              ]
            },
            {
              "name": "load_documents",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b",
              "line_range": [
                29,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_rule_files",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                46,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_rule_file",
              "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                68,
                93
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_clean_markdown",
              "docstring": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 markdown \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e embedding",
              "line_range": [
                95,
                109
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_metadata",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "content"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "StructLoader",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            127,
            189
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                130,
                131
              ],
              "parameters": [
                "self",
                "struct_json"
              ]
            },
            {
              "name": "load_document",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 struct.json \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442",
              "line_range": [
                133,
                161
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_format_struct_content",
              "docstring": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 struct.json \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0442\u0435\u043a\u0441\u0442",
              "line_range": [
                163,
                189
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_documents": [
          "self._parse_rule_file",
          "documents.append",
          "print",
          "self._get_rule_files"
        ],
        "_get_rule_files": [
          "filtered_files.append",
          "files.extend",
          "set",
          "list",
          "fnmatch.fnmatch"
        ],
        "_parse_rule_file": [
          "str",
          "self._clean_markdown",
          "self._extract_metadata",
          "print",
          "metadata.update",
          "Document",
          "file_path.stat",
          "file_path.read_text"
        ],
        "_clean_markdown": [
          "line.replace",
          "clean_line.replace",
          "clean_line.strip",
          "content.split",
          "line.strip",
          "cleaned_lines.append"
        ],
        "_extract_metadata": [
          "line.startswith",
          "content.split",
          "line.split"
        ],
        "load_document": [
          "len",
          "str",
          "open",
          "print",
          "json.load",
          "struct_data.get",
          "Document",
          "self._format_struct_content"
        ],
        "_format_struct_content": [
          "content_parts.append",
          "ep_data.get",
          "comp_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "BeautifulSoup",
        "Comment",
        "Dict",
        "List",
        "Optional",
        "Path",
        "bs4",
        "dataclass",
        "dataclasses",
        "fnmatch",
        "json",
        "pathlib",
        "typing"
      ],
      "hash": "fa67b66a2df9b0a735345eed1628571710a243564f5fe9313f7ef8552bccbe91",
      "artifact_id": "5c46ef0f-083c-41fb-aab2-4f71c7deb5bb"
    },
    {
      "module_id": "restructure.core.rag_context.__init__",
      "path": "restructure/core/rag_context/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Enhancement System\n\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 AI-\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \n\u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438\u0437 .cursor/rules \u0438 struct.json",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "PromptEnhancer",
        "RAGConfig",
        "config",
        "enhancer"
      ],
      "hash": "5ac7f7467ea4bcc73c1433be7e9694c8079808150e2e8e8694c10ec1bd963272",
      "artifact_id": "6bc68cd2-ad20-4000-a1a2-9ac7ffe7faee"
    },
    {
      "module_id": "restructure.core.rag_context.config",
      "path": "restructure/core/rag_context/config.py",
      "category": "core",
      "module_doc": "Configuration \u0434\u043b\u044f RAG Context \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
          "line_range": [
            33,
            47
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        },
        {
          "name": "has_struct_support",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            59,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "property"
          ]
        }
      ],
      "classes": [
        {
          "name": "RAGConfig",
          "docstring": "\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f RAG Context Enhancement",
          "line_range": [
            9,
            61
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e",
              "line_range": [
                33,
                47
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",
              "line_range": [
                50,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "has_struct_support",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 struct.json \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                59,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "print"
        ],
        "is_valid": [],
        "has_struct_support": []
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "pathlib",
        "typing"
      ],
      "hash": "8712b8b3a7612eaa6ee083d23b6262f104f0854308b5ef9e98c964a516d649ab",
      "artifact_id": "6a01d4ee-1687-40be-87b9-4e0e4d38c319"
    },
    {
      "module_id": "restructure.core.rag_context.session_context_manager",
      "path": "restructure/core/rag_context/session_context_manager.py",
      "category": "core",
      "module_doc": "Session Context Manager - Phase 4A.2.3 Safe Implementation\nBuilds on Phase 4A.2.1 (knowledge extraction) and 4A.2.2 (discovery) safely.",
      "functions": [
        {
          "name": "create_context_manager",
          "docstring": "Create context manager safely",
          "line_range": [
            377,
            387
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "create_session_context_manager",
          "docstring": "Create session context manager safely (alias for create_context_manager)",
          "line_range": [
            390,
            393
          ],
          "parameters": [
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize with optional existing components",
          "line_range": [
            52,
            67
          ],
          "parameters": [
            "self",
            "extractor",
            "discovery"
          ],
          "decorators": []
        },
        {
          "name": "extract_session_context",
          "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
          "line_range": [
            69,
            121
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_files_safely",
          "docstring": "Get session files safely",
          "line_range": [
            123,
            142
          ],
          "parameters": [
            "self",
            "specific_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_from_session",
          "docstring": "Extract context from a single session file (simple implementation)",
          "line_range": [
            144,
            188
          ],
          "parameters": [
            "self",
            "session_file"
          ],
          "decorators": []
        },
        {
          "name": "_extract_session_description",
          "docstring": "Extract session description from data",
          "line_range": [
            190,
            197
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_decisions",
          "docstring": "Extract key decisions from session data",
          "line_range": [
            199,
            209
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_reasoning",
          "docstring": "Extract reasoning chains from session data",
          "line_range": [
            211,
            225
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_problem_type",
          "docstring": "Extract problem type from session data",
          "line_range": [
            227,
            243
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_solutions",
          "docstring": "Extract solutions used from session data",
          "line_range": [
            245,
            251
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context_files",
          "docstring": "Extract relevant context files from session data",
          "line_range": [
            253,
            265
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_generate_restoration_prompt",
          "docstring": "Generate restoration prompt for session context",
          "line_range": [
            267,
            292
          ],
          "parameters": [
            "self",
            "description",
            "decisions",
            "reasoning",
            "problem_type"
          ],
          "decorators": []
        },
        {
          "name": "_save_snapshots_safely",
          "docstring": "Save session snapshots to JSON safely",
          "line_range": [
            294,
            316
          ],
          "parameters": [
            "self",
            "snapshots"
          ],
          "decorators": []
        },
        {
          "name": "restore_session_context",
          "docstring": "Restore context for a specific session",
          "line_range": [
            318,
            337
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_context_stats",
          "docstring": "Get context management statistics",
          "line_range": [
            339,
            365
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "disable",
          "docstring": "Disable context manager safely",
          "line_range": [
            367,
            369
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable",
          "docstring": "Enable context manager",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SessionSnapshot",
          "docstring": "Captured session context for restoration",
          "line_range": [
            17,
            27
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextExtractionResult",
          "docstring": "Result of context extraction operation",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SessionContextManager",
          "docstring": "Session Context Preservation for maintaining decision-making context.\n\nSafe design principles:\n- Builds on existing Phase 4A.2.1/4A.2.2 components\n- No breaking changes to existing session logging\n- Graceful fallback if session data unavailable\n- Simple file-based storage (no complex dependencies)",
          "line_range": [
            41,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with optional existing components",
              "line_range": [
                52,
                67
              ],
              "parameters": [
                "self",
                "extractor",
                "discovery"
              ]
            },
            {
              "name": "extract_session_context",
              "docstring": "Extract key context from session logs safely.\n\nPreserves \"why we chose X over Y\" decision-making context.",
              "line_range": [
                69,
                121
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_get_session_files_safely",
              "docstring": "Get session files safely",
              "line_range": [
                123,
                142
              ],
              "parameters": [
                "self",
                "specific_file"
              ]
            },
            {
              "name": "_extract_context_from_session",
              "docstring": "Extract context from a single session file (simple implementation)",
              "line_range": [
                144,
                188
              ],
              "parameters": [
                "self",
                "session_file"
              ]
            },
            {
              "name": "_extract_session_description",
              "docstring": "Extract session description from data",
              "line_range": [
                190,
                197
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_decisions",
              "docstring": "Extract key decisions from session data",
              "line_range": [
                199,
                209
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_reasoning",
              "docstring": "Extract reasoning chains from session data",
              "line_range": [
                211,
                225
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_problem_type",
              "docstring": "Extract problem type from session data",
              "line_range": [
                227,
                243
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_solutions",
              "docstring": "Extract solutions used from session data",
              "line_range": [
                245,
                251
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_extract_context_files",
              "docstring": "Extract relevant context files from session data",
              "line_range": [
                253,
                265
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_generate_restoration_prompt",
              "docstring": "Generate restoration prompt for session context",
              "line_range": [
                267,
                292
              ],
              "parameters": [
                "self",
                "description",
                "decisions",
                "reasoning",
                "problem_type"
              ]
            },
            {
              "name": "_save_snapshots_safely",
              "docstring": "Save session snapshots to JSON safely",
              "line_range": [
                294,
                316
              ],
              "parameters": [
                "self",
                "snapshots"
              ]
            },
            {
              "name": "restore_session_context",
              "docstring": "Restore context for a specific session",
              "line_range": [
                318,
                337
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "get_context_stats",
              "docstring": "Get context management statistics",
              "line_range": [
                339,
                365
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "disable",
              "docstring": "Disable context manager safely",
              "line_range": [
                367,
                369
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable",
              "docstring": "Enable context manager",
              "line_range": [
                371,
                373
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "SafeKnowledgeExtractor",
          "SmartCodeDiscovery"
        ],
        "extract_session_context": [
          "sum",
          "len",
          "errors.append",
          "self._get_session_files_safely",
          "self._extract_context_from_session",
          "self._save_snapshots_safely",
          "ContextExtractionResult",
          "snapshots.append",
          "time.time"
        ],
        "_get_session_files_safely": [
          "sorted",
          "file.is_file",
          "f.stat",
          "specific_file.exists",
          "session_files.append"
        ],
        "_extract_context_from_session": [
          "self._extract_session_description",
          "SessionSnapshot",
          "self._extract_context_files",
          "open",
          "session_data.append",
          "self._extract_problem_type",
          "line.strip",
          "json.loads",
          "self._generate_restoration_prompt",
          "self._extract_reasoning",
          "time.time",
          "self._extract_decisions",
          "self._extract_solutions"
        ],
        "_extract_session_description": [
          "len",
          "entry.get"
        ],
        "_extract_decisions": [
          "any",
          "entry.get",
          "decisions.append"
        ],
        "_extract_reasoning": [
          "str",
          "any",
          "reasoning.append",
          "entry.get"
        ],
        "_extract_problem_type": [
          "problem_keywords.items",
          "any",
          "entry.get"
        ],
        "_extract_solutions": [
          "solutions.append",
          "entry.get"
        ],
        "_extract_context_files": [
          "files.add",
          "set",
          "entry.get",
          "list",
          "any",
          "description.split",
          "word.strip"
        ],
        "_generate_restoration_prompt": [
          "enumerate",
          "prompt_parts.append"
        ],
        "_save_snapshots_safely": [
          "snapshots_data.append",
          "asdict",
          "open",
          "json.dump",
          "print",
          "snapshots_file.rename",
          "int",
          "snapshots_file.exists",
          "time.time"
        ],
        "restore_session_context": [
          "open",
          "snapshot_data.get",
          "json.load",
          "snapshots_file.exists"
        ],
        "get_context_stats": [
          "len",
          "open",
          "json.load",
          "snapshots_file.exists",
          "snapshot.get"
        ],
        "disable": [],
        "enable": [],
        "create_context_manager": [
          "SessionContextManager",
          "print",
          "manager.disable"
        ],
        "create_session_context_manager": [
          "create_context_manager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SafeKnowledgeExtractor",
        "SmartCodeDiscovery",
        "asdict",
        "code_discovery",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "knowledge_extractor",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "57328a157757a75b8daf27a187622e30db3b463df38139e30e30205a0cc2ffc8",
      "artifact_id": "62ade6d3-07d5-4f1b-a9ba-d6ecccc2aa79"
    },
    {
      "module_id": "restructure.core.rag_context.retriever",
      "path": "restructure/core/rag_context/retriever.py",
      "category": "core",
      "module_doc": "Context Retriever \u0441 FAISS \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            35
          ],
          "parameters": [
            "self",
            "embedder",
            "max_chunks",
            "similarity_threshold"
          ],
          "decorators": []
        },
        {
          "name": "index_documents",
          "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
          "line_range": [
            37,
            76
          ],
          "parameters": [
            "self",
            "documents"
          ],
          "decorators": []
        },
        {
          "name": "retrieve",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            78,
            112
          ],
          "parameters": [
            "self",
            "query",
            "max_results"
          ],
          "decorators": []
        },
        {
          "name": "_chunk_document",
          "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
          "line_range": [
            114,
            138
          ],
          "parameters": [
            "self",
            "document",
            "chunk_size"
          ],
          "decorators": []
        },
        {
          "name": "_deduplicate_results",
          "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            140,
            154
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "get_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
          "line_range": [
            156,
            164
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RetrievalResult",
          "docstring": "\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            16,
            20
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextRetriever",
          "docstring": "FAISS-based retriever \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            23,
            164
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                35
              ],
              "parameters": [
                "self",
                "embedder",
                "max_chunks",
                "similarity_threshold"
              ]
            },
            {
              "name": "index_documents",
              "docstring": "\u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430",
              "line_range": [
                37,
                76
              ],
              "parameters": [
                "self",
                "documents"
              ]
            },
            {
              "name": "retrieve",
              "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
              "line_range": [
                78,
                112
              ],
              "parameters": [
                "self",
                "query",
                "max_results"
              ]
            },
            {
              "name": "_chunk_document",
              "docstring": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 (\u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)",
              "line_range": [
                114,
                138
              ],
              "parameters": [
                "self",
                "document",
                "chunk_size"
              ]
            },
            {
              "name": "_deduplicate_results",
              "docstring": "\u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0443\u0431\u043b\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                140,
                154
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "get_stats",
              "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 retriever",
              "line_range": [
                156,
                164
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "index_documents": [
          "len",
          "self._chunk_document",
          "np.vstack",
          "normalized_embeddings.append",
          "faiss.IndexFlatIP",
          "texts.extend",
          "print"
        ],
        "retrieve": [
          "len",
          "RetrievalResult",
          "float",
          "self._deduplicate_results",
          "min",
          "print",
          "zip",
          "results.append",
          "query_embedding.reshape"
        ],
        "_chunk_document": [
          "len",
          "content.split",
          "current_chunk.strip",
          "chunks.append"
        ],
        "_deduplicate_results": [
          "source_to_best.values",
          "list",
          "unique_results.sort"
        ],
        "get_stats": [
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Document",
        "List",
        "Optional",
        "Path",
        "SimpleEmbedder",
        "Tuple",
        "dataclass",
        "dataclasses",
        "embedder",
        "faiss",
        "json",
        "loader",
        "numpy",
        "pathlib",
        "typing"
      ],
      "hash": "551fd92175d5e562bef96e127736f97d365d06be58df4b7b543ec72280fe84de",
      "artifact_id": "9d9c36d1-f773-4864-baab-5efa47ab4a96"
    },
    {
      "module_id": "restructure.core.rag_context.cli_interface",
      "path": "restructure/core/rag_context/cli_interface.py",
      "category": "core",
      "module_doc": "Enhanced CLI Interface for RAG Context Management\nNow includes Self-Refine Pipeline integration",
      "functions": [
        {
          "name": "create_main_parser",
          "docstring": "Create the main argument parser with all subcommands",
          "line_range": [
            20,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "handle_rag_commands",
          "docstring": "Handle RAG-related commands",
          "line_range": [
            93,
            123
          ],
          "parameters": [
            "args",
            "cli_tool"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_commands",
          "docstring": "Handle self-refine pipeline commands",
          "line_range": [
            126,
            139
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_code",
          "docstring": "Handle code refinement",
          "line_range": [
            142,
            183
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_text",
          "docstring": "Handle text refinement",
          "line_range": [
            186,
            222
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_report",
          "docstring": "Handle refinement report generation",
          "line_range": [
            225,
            241
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_refine_quick",
          "docstring": "Handle quick refinement",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            259,
            283
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_main",
          "docstring": "Synchronous wrapper for main",
          "line_range": [
            286,
            288
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_main_parser": [
          "refine_parser.add_subparsers",
          "struct_parser.add_argument",
          "report_parser.add_argument",
          "stats_parser.add_argument",
          "quick_parser.add_argument",
          "argparse.ArgumentParser",
          "refine_subparsers.add_parser",
          "code_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "enhance_parser.add_argument",
          "refresh_parser.add_argument",
          "text_parser.add_argument",
          "search_parser.add_argument"
        ],
        "handle_rag_commands": [
          "cli_tool.stats_command",
          "cli_tool.struct_command",
          "print",
          "cli_tool.search_rules_command",
          "cli_tool.enhance_command",
          "getattr",
          "cli_tool.refresh_command"
        ],
        "handle_refine_commands": [
          "handle_refine_quick",
          "print",
          "handle_refine_text",
          "handle_refine_code",
          "handle_refine_report",
          "sys.exit"
        ],
        "handle_refine_code": [
          "Path",
          "pipeline.refine",
          "print",
          "SelfRefinePipeline",
          "pipeline.refine_code_file",
          "pipeline.generate_refinement_report",
          "sys.exit"
        ],
        "handle_refine_text": [
          "Path",
          "len",
          "pipeline.refine",
          "print",
          "SelfRefinePipeline",
          "sys.exit"
        ],
        "handle_refine_report": [
          "Path",
          "print",
          "json.loads",
          "sys.exit"
        ],
        "handle_refine_quick": [
          "quick_refine_text",
          "print",
          "quick_refine_code"
        ],
        "main": [
          "handle_rag_commands",
          "create_main_parser",
          "CLITool",
          "handle_refine_commands",
          "print",
          "parser.parse_args",
          "parser.print_help",
          "hasattr",
          "RAGConfig",
          "sys.exit"
        ],
        "sync_main": [
          "asyncio.run",
          "main"
        ]
      },
      "dependencies": [
        "CLITool",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "RefinementType",
        "SelfRefinePipeline",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "interfaces.cli_tool",
        "interfaces.self_refine_pipeline",
        "json",
        "pathlib",
        "quick_refine_code",
        "quick_refine_text",
        "sys",
        "typing"
      ],
      "hash": "937f50b0dc1424f272a0bfc77654337f1d7ce1a090952463264f0c10b2f592ea",
      "artifact_id": "192da1ae-97ca-4389-b1a0-5600874b2bb3"
    },
    {
      "module_id": "restructure.core.llmgenie.llm_client",
      "path": "restructure/core/llmgenie/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "Path",
          "self._query_ollama",
          "asyncio.sleep",
          "logging.info",
          "self._query_grok",
          "range",
          "json.load",
          "logging.error",
          "self._query_anthropic",
          "logging.warning",
          "json.dumps",
          "self._query_hybrid"
        ],
        "_query_grok": [
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "logging.info",
          "logging.error",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "logging.info",
          "logging.error",
          "logging.debug",
          "response.json",
          "result.get",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "len",
          "self._query_ollama",
          "self._query_grok",
          "logging.info",
          "self._query_anthropic",
          "isinstance",
          "asyncio.gather"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "b5ec002e-6c1a-468a-98b9-52f428ef55e2"
    },
    {
      "module_id": "restructure.core.llmgenie.cli",
      "path": "restructure/core/llmgenie/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "audit_parser.add_argument",
          "argparse.ArgumentParser",
          "review_parser.add_argument",
          "copilot_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "duplicates_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "context_parser.add_argument"
        ],
        "normalize_patterns": [
          "result.extend",
          "p.strip",
          "item.split",
          "result.append",
          "item.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli",
        "core.llmgenie.modules.cli.analyze_duplicates",
        "core.llmgenie.modules.cli.audit",
        "core.llmgenie.modules.cli.context",
        "core.llmgenie.modules.cli.copilot",
        "core.llmgenie.modules.cli.dogfood",
        "core.llmgenie.modules.cli.handlers",
        "core.llmgenie.modules.cli.parse",
        "core.llmgenie.modules.cli.query",
        "core.llmgenie.modules.cli.review",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.modules.commands.queue",
        "core.llmgenie.self_run",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "490033407f065a15e63e0682825a90bf9d2a9736f6a2f2f8ec71545d08f8dc9b",
      "artifact_id": "d89c2510-7501-4b54-8c94-df236ae56a97"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.self_refine_pipeline",
      "path": "restructure/core/rag_context/interfaces/self_refine_pipeline.py",
      "category": "core",
      "module_doc": "Self-Refine Pipeline with MCP Tools Integration\nEnhanced iterative improvement system for code, text, and workflow artifacts\nPart of Phase 4A.3: Self-Refine Pipeline Supercharged",
      "functions": [
        {
          "name": "quick_refine_code",
          "docstring": "Quick function to refine code content",
          "line_range": [
            316,
            320
          ],
          "parameters": [
            "code",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "quick_refine_text",
          "docstring": "Quick function to refine text content",
          "line_range": [
            323,
            327
          ],
          "parameters": [
            "text",
            "max_iterations"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "parameters": [
            "self",
            "max_iterations",
            "confidence_threshold"
          ],
          "decorators": []
        },
        {
          "name": "_check_mcp_tools",
          "docstring": "Check which MCP tools are available",
          "line_range": [
            61,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "refine",
          "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
          "line_range": [
            71,
            133
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context",
            "custom_criteria"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_context",
          "docstring": "Enhance context using MCP tools if available",
          "line_range": [
            135,
            161
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_critique_with_mcp",
          "docstring": "Generate critique using MCP tools for enhanced analysis",
          "line_range": [
            163,
            210
          ],
          "parameters": [
            "self",
            "content",
            "refinement_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_apply_refinements",
          "docstring": "Apply refinements based on critique results",
          "line_range": [
            212,
            230
          ],
          "parameters": [
            "self",
            "content",
            "critique_result",
            "refinement_type"
          ],
          "decorators": []
        },
        {
          "name": "_validate_improvements",
          "docstring": "Validate that refinements actually improved the content",
          "line_range": [
            232,
            246
          ],
          "parameters": [
            "self",
            "original",
            "refined",
            "critique"
          ],
          "decorators": []
        },
        {
          "name": "refine_code_file",
          "docstring": "Convenience method to refine an entire code file",
          "line_range": [
            248,
            272
          ],
          "parameters": [
            "self",
            "file_path",
            "backup"
          ],
          "decorators": []
        },
        {
          "name": "generate_refinement_report",
          "docstring": "Generate a comprehensive report of the refinement process",
          "line_range": [
            274,
            303
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        },
        {
          "name": "_get_most_used_tools",
          "docstring": "Get list of most frequently used MCP tools",
          "line_range": [
            305,
            312
          ],
          "parameters": [
            "self",
            "results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RefinementType",
          "docstring": "Types of content that can be refined",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RefinementResult",
          "docstring": "Result of a refinement iteration",
          "line_range": [
            32,
            41
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SelfRefinePipeline",
          "docstring": "Enhanced Self-Refine Pipeline with MCP Tools Integration\n\nFeatures:\n- Multi-type content refinement (code, text, config, etc.)\n- MCP tools integration for context-aware critique\n- Automatic logging of refinement process\n- Configurable improvement criteria\n- Iterative improvement until satisfaction threshold",
          "line_range": [
            44,
            312
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                56,
                59
              ],
              "parameters": [
                "self",
                "max_iterations",
                "confidence_threshold"
              ]
            },
            {
              "name": "_check_mcp_tools",
              "docstring": "Check which MCP tools are available",
              "line_range": [
                61,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "refine",
              "docstring": "Main refinement method - iteratively improve content\n\nArgs:\n    content: Original content to refine\n    refinement_type: Type of content (code, text, etc.)\n    context: Additional context for refinement\n    custom_criteria: Custom improvement criteria\n    \nReturns:\n    List of refinement iterations with results",
              "line_range": [
                71,
                133
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context",
                "custom_criteria"
              ]
            },
            {
              "name": "_enhance_context",
              "docstring": "Enhance context using MCP tools if available",
              "line_range": [
                135,
                161
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_critique_with_mcp",
              "docstring": "Generate critique using MCP tools for enhanced analysis",
              "line_range": [
                163,
                210
              ],
              "parameters": [
                "self",
                "content",
                "refinement_type",
                "context"
              ]
            },
            {
              "name": "_apply_refinements",
              "docstring": "Apply refinements based on critique results",
              "line_range": [
                212,
                230
              ],
              "parameters": [
                "self",
                "content",
                "critique_result",
                "refinement_type"
              ]
            },
            {
              "name": "_validate_improvements",
              "docstring": "Validate that refinements actually improved the content",
              "line_range": [
                232,
                246
              ],
              "parameters": [
                "self",
                "original",
                "refined",
                "critique"
              ]
            },
            {
              "name": "refine_code_file",
              "docstring": "Convenience method to refine an entire code file",
              "line_range": [
                248,
                272
              ],
              "parameters": [
                "self",
                "file_path",
                "backup"
              ]
            },
            {
              "name": "generate_refinement_report",
              "docstring": "Generate a comprehensive report of the refinement process",
              "line_range": [
                274,
                303
              ],
              "parameters": [
                "self",
                "results"
              ]
            },
            {
              "name": "_get_most_used_tools",
              "docstring": "Get list of most frequently used MCP tools",
              "line_range": [
                305,
                312
              ],
              "parameters": [
                "self",
                "results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._check_mcp_tools"
        ],
        "_check_mcp_tools": [],
        "refine": [
          "self._enhance_context",
          "critique_result.get",
          "self._apply_refinements",
          "range",
          "self._validate_improvements",
          "RefinementResult",
          "iterations.append",
          "self._critique_with_mcp",
          "time.time",
          "auto_logger.log_workflow_phase"
        ],
        "_enhance_context": [
          "mcp_tools_used.append",
          "context.copy"
        ],
        "_critique_with_mcp": [
          "critique_points.append",
          "context.get",
          "mcp_tools_used.append",
          "critique_points.extend"
        ],
        "_apply_refinements": [
          "str"
        ],
        "_validate_improvements": [
          "len",
          "min"
        ],
        "refine_code_file": [
          "Path",
          "file_path.with_suffix",
          "FileNotFoundError",
          "str",
          "file_path.write_text",
          "file_path.exists",
          "self.refine",
          "backup_path.write_text",
          "file_path.read_text"
        ],
        "generate_refinement_report": [
          "sum",
          "len",
          "self._get_most_used_tools",
          "set"
        ],
        "_get_most_used_tools": [
          "sorted",
          "tool_counts.get",
          "tool_counts.keys"
        ],
        "quick_refine_code": [
          "pipeline.refine",
          "SelfRefinePipeline"
        ],
        "quick_refine_text": [
          "pipeline.refine",
          "SelfRefinePipeline"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "auto_logger",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "9f3711a6c9240c508770c3725dedc2933aeb045fb1c878313d24dee7b578317d",
      "artifact_id": "0ff140a4-5e36-4416-9867-942a0932d8ac"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.websocket_server",
      "path": "restructure/core/rag_context/interfaces/websocket_server.py",
      "category": "core",
      "module_doc": "WebSocket Server \u0434\u043b\u044f real-time \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            265,
            295
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            34
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "register_connection",
          "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            36,
            39
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "unregister_connection",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            41,
            44
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "broadcast_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
          "line_range": [
            46,
            53
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            55,
            176
          ],
          "parameters": [
            "self",
            "websocket",
            "message_str"
          ],
          "decorators": []
        },
        {
          "name": "handle_connection",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            178,
            206
          ],
          "parameters": [
            "self",
            "websocket",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            208,
            226
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "get_client_example",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
          "line_range": [
            228,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WebSocketServer",
          "docstring": "WebSocket Server \u0434\u043b\u044f real-time \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            22,
            262
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                34
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "register_connection",
              "docstring": "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                36,
                39
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "unregister_connection",
              "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                41,
                44
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "broadcast_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c",
              "line_range": [
                46,
                53
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                55,
                176
              ],
              "parameters": [
                "self",
                "websocket",
                "message_str"
              ]
            },
            {
              "name": "handle_connection",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 WebSocket \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                178,
                206
              ],
              "parameters": [
                "self",
                "websocket",
                "path"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                208,
                226
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "get_client_example",
              "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430",
              "line_range": [
                228,
                262
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "PromptEnhancer",
          "set",
          "ImportError"
        ],
        "register_connection": [
          "len",
          "print"
        ],
        "unregister_connection": [
          "len",
          "print"
        ],
        "broadcast_message": [
          "asyncio.gather",
          "websocket.send",
          "json.dumps"
        ],
        "handle_message": [
          "len",
          "str",
          "rules.append",
          "message.get",
          "open",
          "asyncio.get_event_loop",
          "json.load",
          "params.get",
          "json.loads",
          "isinstance",
          "round",
          "locals"
        ],
        "handle_connection": [
          "print",
          "websocket.send",
          "self.handle_message",
          "self.unregister_connection",
          "self.register_connection",
          "json.dumps"
        ],
        "run": [
          "websockets.serve",
          "server.wait_closed",
          "print"
        ],
        "get_client_example": [],
        "main": [
          "len",
          "print",
          "server.run",
          "int",
          "server.get_client_example",
          "WebSocketServer"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Set",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing",
        "websockets"
      ],
      "hash": "9676904c881eaee00c82fd468681d7b301b3145a45389a3af56b7157906bce0c",
      "artifact_id": "bb3be11f-e21e-41e6-895c-51d2090688b3"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.http_api",
      "path": "restructure/core/rag_context/interfaces/http_api.py",
      "category": "core",
      "module_doc": "HTTP API Server \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            261,
            281
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "config",
            "port"
          ],
          "decorators": []
        },
        {
          "name": "_setup_routes",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
          "line_range": [
            85,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            238,
            249
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            251,
            258
          ],
          "parameters": [
            "self",
            "host"
          ],
          "decorators": []
        },
        {
          "name": "startup_event",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            89,
            93
          ],
          "parameters": [],
          "decorators": [
            "self.app.on_event('startup')"
          ]
        },
        {
          "name": "root",
          "docstring": "\u041a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 endpoint",
          "line_range": [
            96,
            103
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430",
          "line_range": [
            106,
            112
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/health')"
          ]
        },
        {
          "name": "enhance_prompt",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            115,
            140
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/enhance', response_model=EnhanceResponse)"
          ]
        },
        {
          "name": "search_rules",
          "docstring": "\u0418\u0449\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430",
          "line_range": [
            143,
            171
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "self.app.post('/rules/search', response_model=RulesResponse)"
          ]
        },
        {
          "name": "get_project_structure",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 struct.json",
          "line_range": [
            174,
            187
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/project/structure')"
          ]
        },
        {
          "name": "get_system_stats",
          "docstring": "\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            190,
            197
          ],
          "parameters": [],
          "decorators": [
            "self.app.get('/stats')"
          ]
        },
        {
          "name": "refresh_index",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            200,
            213
          ],
          "parameters": [],
          "decorators": [
            "self.app.post('/admin/refresh')"
          ]
        },
        {
          "name": "enhance_prompt_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f enhance \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            217,
            225
          ],
          "parameters": [
            "query",
            "max_context"
          ],
          "decorators": [
            "self.app.get('/enhance')"
          ]
        },
        {
          "name": "search_rules_get",
          "docstring": "GET \u0432\u0435\u0440\u0441\u0438\u044f rules search \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439  ",
          "line_range": [
            228,
            236
          ],
          "parameters": [
            "query",
            "max_rules"
          ],
          "decorators": [
            "self.app.get('/rules/search')"
          ]
        }
      ],
      "classes": [
        {
          "name": "EnhanceRequest",
          "docstring": "",
          "line_range": [
            25,
            28
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "EnhanceResponse",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesRequest",
          "docstring": "",
          "line_range": [
            38,
            40
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RuleInfo",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "RulesResponse",
          "docstring": "",
          "line_range": [
            51,
            53
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HTTPAPIServer",
          "docstring": "HTTP API Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435",
          "line_range": [
            56,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "config",
                "port"
              ]
            },
            {
              "name": "_setup_routes",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API endpoints",
              "line_range": [
                85,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a HTTP API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                238,
                249
              ],
              "parameters": [
                "self",
                "host"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                251,
                258
              ],
              "parameters": [
                "self",
                "host"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "FastAPI",
          "ImportError",
          "PromptEnhancer",
          "self._setup_routes",
          "RAGConfig"
        ],
        "_setup_routes": [],
        "startup_event": [
          "print"
        ],
        "root": [],
        "health_check": [],
        "enhance_prompt": [
          "len",
          "str",
          "enhanced_query.count",
          "max",
          "HTTPException",
          "EnhanceResponse"
        ],
        "search_rules": [
          "len",
          "str",
          "rules.append",
          "RuleInfo",
          "round",
          "HTTPException",
          "RulesResponse"
        ],
        "get_project_structure": [
          "HTTPException",
          "open",
          "json.load",
          "str"
        ],
        "get_system_stats": [
          "HTTPException",
          "str"
        ],
        "refresh_index": [
          "HTTPException",
          "str"
        ],
        "enhance_prompt_get": [
          "EnhanceRequest",
          "Query",
          "enhance_prompt"
        ],
        "search_rules_get": [
          "RulesRequest",
          "Query",
          "search_rules"
        ],
        "run": [
          "uvicorn.Server",
          "print",
          "server.serve",
          "uvicorn.Config"
        ],
        "run_sync": [
          "uvicorn.run"
        ],
        "main": [
          "len",
          "server.run",
          "int",
          "HTTPAPIServer"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "PromptEnhancer",
        "Query",
        "RAGConfig",
        "asyncio",
        "config",
        "enhancer",
        "fastapi",
        "fastapi.middleware.cors",
        "json",
        "pathlib",
        "pydantic",
        "sys",
        "typing",
        "uvicorn"
      ],
      "hash": "1af7ded9db88a3b9e27d52eb109dc02b6f4149443f98b05453389ef62d17c65f",
      "artifact_id": "e1882a9f-7269-402b-901f-a36439efcbdc"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.mcp_server",
      "path": "restructure/core/rag_context/interfaces/mcp_server.py",
      "category": "core",
      "module_doc": "MCP Server \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Cursor, VSCode, Claude Desktop\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 RAG (5 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432) + Struct Tools (6 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432)\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 MCP Python SDK",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            822,
            836
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            71,
            105
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
          "line_range": [
            107,
            614
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_handle_struct_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            616,
            769
          ],
          "parameters": [
            "self",
            "name",
            "arguments"
          ],
          "decorators": []
        },
        {
          "name": "run_stdio",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
          "line_range": [
            771,
            788
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            790,
            802
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_vscode_config",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
          "line_range": [
            804,
            807
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cursor_config",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
          "line_range": [
            809,
            819
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "handle_list_tools",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
          "line_range": [
            111,
            388
          ],
          "parameters": [],
          "decorators": [
            "self.server.list_tools()"
          ]
        },
        {
          "name": "handle_call_tool",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            391,
            614
          ],
          "parameters": [
            "name",
            "arguments"
          ],
          "decorators": [
            "self.server.call_tool()"
          ]
        }
      ],
      "classes": [
        {
          "name": "MCPServer",
          "docstring": "MCP Server \u0434\u043b\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435 + Struct Tools",
          "line_range": [
            68,
            819
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                71,
                105
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 MCP handlers",
              "line_range": [
                107,
                614
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_handle_struct_tool",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 struct_tools \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",
              "line_range": [
                616,
                769
              ],
              "parameters": [
                "self",
                "name",
                "arguments"
              ]
            },
            {
              "name": "run_stdio",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 stdio \u0440\u0435\u0436\u0438\u043c\u0435 (\u0434\u043b\u044f Cursor)",
              "line_range": [
                771,
                788
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                790,
                802
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_vscode_config",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f VSCode",
              "line_range": [
                804,
                807
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cursor_config",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f Cursor",
              "line_range": [
                809,
                819
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "StructureAnalyzer",
          "ImportError",
          "create_knowledge_extractor",
          "create_cursor_intelligence",
          "StructureConfig",
          "print",
          "Server",
          "create_session_context_manager",
          "PromptEnhancer",
          "create_discovery_system",
          "self._setup_handlers",
          "RAGConfig"
        ],
        "_setup_handlers": [],
        "handle_list_tools": [
          "tools.extend",
          "types.Tool"
        ],
        "handle_call_tool": [
          "str",
          "json.load",
          "workflow_analysis.get",
          "discovery_system.search_solutions",
          "name.startswith",
          "datetime.now",
          "types.TextContent",
          "self._handle_struct_tool",
          "auto_logger.log_tool_result",
          "auto_logger.log_tool_call",
          "json.dumps",
          "Path",
          "extractor.extract_code_knowledge",
          "suggestions_system.get_workflow_suggestions",
          "len",
          "arguments.get",
          "rules.append",
          "session_context_manager.extract_session_context",
          "open",
          "detect_and_log_model_context",
          "cursor_intelligence.analyze_workflow_context",
          "cursor_intelligence.get_proactive_suggestions",
          "cursor_intelligence._insight_to_dict",
          "round",
          "locals",
          "time.time"
        ],
        "_handle_struct_tool": [
          "len",
          "str",
          "arguments.get",
          "result.update",
          "types.TextContent",
          "json.dumps"
        ],
        "run_stdio": [
          "print",
          "NotificationOptions",
          "InitializationOptions"
        ],
        "get_cursor_config": [],
        "get_vscode_config": [
          "self.get_cursor_config"
        ],
        "save_cursor_config": [
          "self.get_cursor_config",
          "open",
          "json.dump",
          "print",
          "Path.cwd"
        ],
        "main": [
          "server.run_stdio",
          "MCPServer",
          "print",
          "server.save_cursor_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "InitializationOptions",
        "List",
        "NotificationOptions",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "Server",
        "StructureAnalyzer",
        "StructureConfig",
        "asyncio",
        "auto_logger",
        "code_discovery",
        "config",
        "create_cursor_intelligence",
        "create_discovery_system",
        "create_knowledge_extractor",
        "create_session_context_manager",
        "cursor_intelligence",
        "datetime",
        "detect_and_log_model_context",
        "enhancer",
        "json",
        "knowledge_extractor",
        "mcp.server",
        "mcp.server.models",
        "mcp.server.stdio",
        "mcp.types",
        "pathlib",
        "session_context_manager",
        "struct_tools.structure_analyzer",
        "sys",
        "time",
        "typing"
      ],
      "hash": "f878d69e1759e3a3e2ae48e66ba2b5ea3aade210c4a4de59ac5b727e0684b207",
      "artifact_id": "0dda6acc-040e-49ca-afeb-bb69e7db12e0"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.__init__",
      "path": "restructure/core/rag_context/interfaces/__init__.py",
      "category": "cli",
      "module_doc": "RAG Context Interfaces - \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a RAG \u0441\u0438\u0441\u0442\u0435\u043c\u0435\n\n\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b:\n- MCP: \u0434\u043b\u044f Cursor, VSCode, Claude Desktop\n- HTTP API: \u0434\u043b\u044f \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n- CLI: \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n- WebSocket: \u0434\u043b\u044f real-time \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n- Python Library: \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CLITool",
        "HTTPAPIServer",
        "MCPServer",
        "WebSocketServer",
        "cli_tool",
        "http_api",
        "mcp_server",
        "websocket_server"
      ],
      "hash": "9d6e8c8c43139ceda139fa99039ac95d086caaa368f5be4ec90746da19e7cfeb",
      "artifact_id": "a8416c68-a7dd-4411-9984-5448e5b356d9"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.cli_tool",
      "path": "restructure/core/rag_context/interfaces/cli_tool.py",
      "category": "core",
      "module_doc": "CLI Tool \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432",
      "functions": [
        {
          "name": "create_parser",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0430\u0440\u0441\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438",
          "line_range": [
            209,
            244
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f CLI",
          "line_range": [
            247,
            298
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            21
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "enhance_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
          "line_range": [
            23,
            52
          ],
          "parameters": [
            "self",
            "query",
            "max_context",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "search_rules_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
          "line_range": [
            54,
            109
          ],
          "parameters": [
            "self",
            "query",
            "max_rules",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "stats_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            111,
            144
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "refresh_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
          "line_range": [
            146,
            163
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            165,
            206
          ],
          "parameters": [
            "self",
            "output_format"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLITool",
          "docstring": "CLI \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 RAG \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439",
          "line_range": [
            16,
            206
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                21
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "enhance_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 enhance \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430",
              "line_range": [
                23,
                52
              ],
              "parameters": [
                "self",
                "query",
                "max_context",
                "output_format"
              ]
            },
            {
              "name": "search_rules_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b",
              "line_range": [
                54,
                109
              ],
              "parameters": [
                "self",
                "query",
                "max_rules",
                "output_format"
              ]
            },
            {
              "name": "stats_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                111,
                144
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "refresh_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430",
              "line_range": [
                146,
                163
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                165,
                206
              ],
              "parameters": [
                "self",
                "output_format"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "RAGConfig",
          "PromptEnhancer"
        ],
        "enhance_command": [
          "len",
          "json.dumps",
          "str"
        ],
        "search_rules_command": [
          "len",
          "str",
          "rules.append",
          "enumerate",
          "round",
          "output.append",
          "json.dumps"
        ],
        "stats_command": [
          "str",
          "json.dumps",
          "output.append"
        ],
        "refresh_command": [
          "str",
          "json.dumps"
        ],
        "struct_command": [
          "str",
          "open",
          "json.load",
          "output.append",
          "json.dumps"
        ],
        "create_parser": [
          "parser.add_argument",
          "argparse.ArgumentParser",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "enhance_parser.add_argument",
          "search_parser.add_argument"
        ],
        "main": [
          "cli.struct_command",
          "str",
          "CLITool",
          "create_parser",
          "cli.stats_command",
          "cli.search_rules_command",
          "print",
          "parser.parse_args",
          "cli.refresh_command",
          "parser.print_help",
          "cli.enhance_command",
          "json.dumps",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "PromptEnhancer",
        "RAGConfig",
        "argparse",
        "asyncio",
        "config",
        "enhancer",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d303e47d0e5ebf9fe48d32604c56e3639b3d1d8c87e36e6a64028174d7bb4cbd",
      "artifact_id": "094f63b4-7e8f-42b2-b0b2-c2a92bdc8150"
    },
    {
      "module_id": "restructure.core.rag_context.interfaces.auto_logger",
      "path": "restructure/core/rag_context/interfaces/auto_logger.py",
      "category": "core",
      "module_doc": "Auto Logger for MCP Server Integration\nAutomatic workflow logging without efficiency loss\nPart of Phase 4A.2: Agent-as-a-Judge Enhanced",
      "functions": [
        {
          "name": "log_mcp_tool_call",
          "docstring": "Convenience function for MCP tool call logging",
          "line_range": [
            261,
            264
          ],
          "parameters": [
            "tool_name",
            "arguments",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_mcp_tool_result",
          "docstring": "Convenience function for MCP tool result logging",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "detect_and_log_model_context",
          "docstring": "Detect model from context and log if switch detected",
          "line_range": [
            271,
            282
          ],
          "parameters": [
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            26
          ],
          "parameters": [
            "self",
            "session_log_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_model",
          "docstring": "Detect current model based on context clues",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ensure_session",
          "docstring": "Ensure active session exists, create if needed",
          "line_range": [
            38,
            44
          ],
          "parameters": [
            "self",
            "session_name"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_call",
          "docstring": "Log MCP tool call with automatic metadata",
          "line_range": [
            46,
            62
          ],
          "parameters": [
            "self",
            "tool_name",
            "arguments",
            "model",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "log_tool_result",
          "docstring": "Log tool result with performance metrics",
          "line_range": [
            64,
            79
          ],
          "parameters": [
            "self",
            "tool_name",
            "result",
            "duration_ms",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "log_model_switch",
          "docstring": "Log model switches for continuity tracking",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "from_model",
            "to_model",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_workflow_phase",
          "docstring": "Log workflow phase transitions",
          "line_range": [
            96,
            107
          ],
          "parameters": [
            "self",
            "phase",
            "detected_by"
          ],
          "decorators": []
        },
        {
          "name": "analyze_activity_pattern",
          "docstring": "Analyze recent activity to detect workflow patterns",
          "line_range": [
            109,
            140
          ],
          "parameters": [
            "self",
            "recent_events"
          ],
          "decorators": []
        },
        {
          "name": "_detect_pattern_with_confidence",
          "docstring": "Detect patterns with evidence-based confidence scoring",
          "line_range": [
            142,
            161
          ],
          "parameters": [
            "self",
            "tool_usage",
            "models_used",
            "timespan"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_timespan",
          "docstring": "Calculate time span of events",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "events"
          ],
          "decorators": []
        },
        {
          "name": "generate_session_summary",
          "docstring": "Generate automatic session summary",
          "line_range": [
            175,
            223
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "_hash_args",
          "docstring": "Create hash of arguments for deduplication",
          "line_range": [
            225,
            228
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_args",
          "docstring": "Create human-readable summary of arguments",
          "line_range": [
            230,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_append_to_log",
          "docstring": "Append event to session log file",
          "line_range": [
            244,
            256
          ],
          "parameters": [
            "self",
            "event",
            "session"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AutoLogger",
          "docstring": "Automatic logging system for MCP workflow events",
          "line_range": [
            15,
            256
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                26
              ],
              "parameters": [
                "self",
                "session_log_path"
              ]
            },
            {
              "name": "detect_model",
              "docstring": "Detect current model based on context clues",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "ensure_session",
              "docstring": "Ensure active session exists, create if needed",
              "line_range": [
                38,
                44
              ],
              "parameters": [
                "self",
                "session_name"
              ]
            },
            {
              "name": "log_tool_call",
              "docstring": "Log MCP tool call with automatic metadata",
              "line_range": [
                46,
                62
              ],
              "parameters": [
                "self",
                "tool_name",
                "arguments",
                "model",
                "session"
              ]
            },
            {
              "name": "log_tool_result",
              "docstring": "Log tool result with performance metrics",
              "line_range": [
                64,
                79
              ],
              "parameters": [
                "self",
                "tool_name",
                "result",
                "duration_ms",
                "model"
              ]
            },
            {
              "name": "log_model_switch",
              "docstring": "Log model switches for continuity tracking",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "from_model",
                "to_model",
                "context"
              ]
            },
            {
              "name": "log_workflow_phase",
              "docstring": "Log workflow phase transitions",
              "line_range": [
                96,
                107
              ],
              "parameters": [
                "self",
                "phase",
                "detected_by"
              ]
            },
            {
              "name": "analyze_activity_pattern",
              "docstring": "Analyze recent activity to detect workflow patterns",
              "line_range": [
                109,
                140
              ],
              "parameters": [
                "self",
                "recent_events"
              ]
            },
            {
              "name": "_detect_pattern_with_confidence",
              "docstring": "Detect patterns with evidence-based confidence scoring",
              "line_range": [
                142,
                161
              ],
              "parameters": [
                "self",
                "tool_usage",
                "models_used",
                "timespan"
              ]
            },
            {
              "name": "_calculate_timespan",
              "docstring": "Calculate time span of events",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "events"
              ]
            },
            {
              "name": "generate_session_summary",
              "docstring": "Generate automatic session summary",
              "line_range": [
                175,
                223
              ],
              "parameters": [
                "self",
                "session"
              ]
            },
            {
              "name": "_hash_args",
              "docstring": "Create hash of arguments for deduplication",
              "line_range": [
                225,
                228
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_summarize_args",
              "docstring": "Create human-readable summary of arguments",
              "line_range": [
                230,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_append_to_log",
              "docstring": "Append event to session log file",
              "line_range": [
                244,
                256
              ],
              "parameters": [
                "self",
                "event",
                "session"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "detect_model": [
          "any",
          "context.lower"
        ],
        "ensure_session": [
          "datetime.now"
        ],
        "log_tool_call": [
          "self._summarize_args",
          "self._append_to_log",
          "self._hash_args",
          "datetime.now",
          "self.ensure_session"
        ],
        "log_tool_result": [
          "len",
          "self._append_to_log",
          "datetime.now",
          "str"
        ],
        "log_model_switch": [
          "self._append_to_log",
          "datetime.now"
        ],
        "log_workflow_phase": [
          "self._append_to_log",
          "datetime.now"
        ],
        "analyze_activity_pattern": [
          "tool_usage.keys",
          "self._calculate_timespan",
          "len",
          "event_timespan.total_seconds",
          "set",
          "list",
          "tool_usage.get",
          "models_used.add",
          "self._detect_pattern_with_confidence",
          "event.get"
        ],
        "_detect_pattern_with_confidence": [
          "sum",
          "len",
          "tool.startswith",
          "min",
          "tool_usage.get",
          "tool_usage.keys"
        ],
        "_calculate_timespan": [
          "len",
          "datetime.fromisoformat"
        ],
        "generate_session_summary": [
          "events.append",
          "len",
          "set",
          "list",
          "open",
          "models_used.add",
          "json.loads",
          "line.strip",
          "tools_used.add",
          "phases.add",
          "log_file.exists",
          "event.get"
        ],
        "_hash_args": [
          "args_str.encode",
          "hashlib.md5",
          "json.dumps"
        ],
        "_summarize_args": [
          "len",
          "args.items",
          "summary_parts.append",
          "isinstance"
        ],
        "_append_to_log": [
          "open",
          "f.write",
          "print",
          "__import__",
          "json.dumps"
        ],
        "log_mcp_tool_call": [
          "auto_logger.log_tool_call"
        ],
        "log_mcp_tool_result": [
          "auto_logger.log_tool_result"
        ],
        "detect_and_log_model_context": [
          "auto_logger.log_model_switch",
          "auto_logger.detect_model",
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "f2bc412c5b72a8930278fff9018170ee36da5ebc5b1190fbbbb146eb456da51e",
      "artifact_id": "c2f18f28-3c73-45eb-b18f-a6c154a9d83b"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.tools",
      "path": "restructure/core/llmgenie/mcp/tools.py",
      "category": "core",
      "module_doc": "MCP Tools Implementation\n\nModular tools architecture:\n- HandoffTools: Context transfer validation\n- ProjectTools: Project state management  \n- AgentTools: Agent orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all handoff tools with MCP server",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_handoff",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
          "line_range": [
            36,
            64
          ],
          "parameters": [
            "self",
            "package_data"
          ],
          "decorators": []
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            66,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            105,
            107
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all project tools with MCP server",
          "line_range": [
            109,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            116,
            142
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            144,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            174,
            182
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            188,
            192
          ],
          "parameters": [
            "self",
            "mcp"
          ],
          "decorators": []
        },
        {
          "name": "_register_tools",
          "docstring": "Register all agent tools with MCP server",
          "line_range": [
            194,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
          "line_range": [
            199,
            271
          ],
          "parameters": [
            "self",
            "agent_type",
            "task",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
          "line_range": [
            273,
            289
          ],
          "parameters": [
            "self",
            "agent_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffTools",
          "docstring": "Tools for handoff validation and context transfer",
          "line_range": [
            23,
            99
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all handoff tools with MCP server",
              "line_range": [
                31,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_handoff",
              "docstring": "Validate handoff package completeness for context transfer between AI sessions\n\nArgs:\n    package_data: Handoff package with from_role, to_role, files, etc.\n    \nReturns:\n    Validation result with completeness score and recommendations",
              "line_range": [
                36,
                64
              ],
              "parameters": [
                "self",
                "package_data"
              ]
            },
            {
              "name": "get_handoff_template",
              "docstring": "Get handoff package template with required files and validation criteria",
              "line_range": [
                66,
                99
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ProjectTools",
          "docstring": "Tools for project state and workflow management",
          "line_range": [
            102,
            182
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                105,
                107
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all project tools with MCP server",
              "line_range": [
                109,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_project_state",
              "docstring": "Get current project state",
              "line_range": [
                116,
                142
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_rules_manifest",
              "docstring": "Get rules manifest",
              "line_range": [
                144,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workflow_modes",
              "docstring": "Get available workflow modes",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check",
              "docstring": "Health check endpoint",
              "line_range": [
                174,
                182
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AgentTools",
          "docstring": "Tools for agent orchestration and task execution",
          "line_range": [
            185,
            289
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                188,
                192
              ],
              "parameters": [
                "self",
                "mcp"
              ]
            },
            {
              "name": "_register_tools",
              "docstring": "Register all agent tools with MCP server",
              "line_range": [
                194,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_agent_task",
              "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing\n\nArgs:\n    agent_type: Type of agent (auto, smart, ollama, claude)\n    task: Task description to execute\n    context: Optional context data\n    \nReturns:\n    Agent execution result with routing decision and metrics",
              "line_range": [
                199,
                271
              ],
              "parameters": [
                "self",
                "agent_type",
                "task",
                "context"
              ]
            },
            {
              "name": "get_agent_status",
              "docstring": "Get status of specific agent\n\nArgs:\n    agent_id: Agent identifier\n    \nReturns:\n    Agent status information",
              "line_range": [
                273,
                289
              ],
              "parameters": [
                "self",
                "agent_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._register_tools",
          "TaskClassifier",
          "ModelRouter"
        ],
        "_register_tools": [],
        "validate_handoff": [
          "str",
          "HandoffPackage"
        ],
        "get_handoff_template": [],
        "get_project_state": [
          "Path",
          "str",
          "project_state_path.exists",
          "open",
          "state.get",
          "json.load"
        ],
        "get_rules_manifest": [
          "open",
          "json.load",
          "str"
        ],
        "get_workflow_modes": [],
        "health_check": [
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "datetime.now",
          "execution_result.get"
        ],
        "get_agent_status": []
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "datetime",
        "fastmcp",
        "json",
        "pathlib",
        "pydantic",
        "task_router",
        "typing"
      ],
      "hash": "ab35e501f17c2819b5ed8ec1e5ed910b58708cc9bffc36a2ae144d539fdd3410",
      "artifact_id": "426afe2f-6aaa-4cb2-a70b-db4547906b5d"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.server",
      "path": "restructure/core/llmgenie/mcp/server.py",
      "category": "core",
      "module_doc": "FastMCP Server Implementation\n\nClean server initialization using decorators",
      "functions": [
        {
          "name": "validate_handoff",
          "docstring": "",
          "line_range": [
            29,
            47
          ],
          "parameters": [
            "package_data"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "",
          "line_range": [
            50,
            82
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "",
          "line_range": [
            85,
            108
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "health_check",
          "docstring": "",
          "line_range": [
            111,
            118
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "",
          "line_range": [
            121,
            171
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "",
          "line_range": [
            174,
            181
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "",
          "line_range": [
            184,
            201
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "",
          "line_range": [
            204,
            211
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_handoff": [
          "str",
          "mcp.tool",
          "HandoffPackage",
          "validator.validate_package"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ],
        "get_project_state": [
          "Path",
          "str",
          "mcp.tool",
          "project_state_path.exists",
          "open",
          "state.get",
          "json.load"
        ],
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "execute_agent_task": [
          "str",
          "mcp.tool",
          "router.route_task",
          "router.execute_with_model",
          "datetime.now",
          "execution_result.get"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "open",
          "mcp.tool",
          "json.load",
          "str"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "FastMCP",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "api.handoff_validator",
        "asyncio",
        "datetime",
        "fastmcp",
        "json",
        "logging",
        "pathlib",
        "task_router",
        "typing"
      ],
      "hash": "0dff6427b5df5156492a11d9dfd2c7984b7b86e6e4972411700ace0edb3cf23d",
      "artifact_id": "8c2b17a5-9d55-4982-bf31-5323205bc01d"
    },
    {
      "module_id": "restructure.core.llmgenie.mcp.__init__",
      "path": "restructure/core/llmgenie/mcp/__init__.py",
      "category": "cli",
      "module_doc": "FastMCP Server Implementation\n\nEpic 5 Completion: Modular MCP architecture using FastMCP\n- Better initialization handling\n- Cleaner tool separation\n- Stable SSE transport",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentTools",
        "HandoffTools",
        "ProjectTools",
        "tools"
      ],
      "hash": "923abf222fd2a38c7f538f06c41510d360ade1778dfadd2d1e4c61067af77aa4",
      "artifact_id": "a9e59ba0-46a2-4282-ad1e-d82bd4c046de"
    },
    {
      "module_id": "restructure.core.llmgenie.api.simple_mcp_server",
      "path": "restructure/core/llmgenie/api/simple_mcp_server.py",
      "category": "core",
      "module_doc": "Simple MCP Server for llmgenie\nUses stdio transport without FastAPI dependencies",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            16,
            22
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            25,
            54
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent",
          "line_range": [
            57,
            68
          ],
          "parameters": [
            "agent_type",
            "task",
            "context"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            80,
            94
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            97,
            104
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness",
          "line_range": [
            107,
            136
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "mcp.tool()"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template",
          "line_range": [
            139,
            172
          ],
          "parameters": [],
          "decorators": [
            "mcp.tool()"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "health_check": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_project_state": [
          "Path",
          "str",
          "mcp.tool",
          "open",
          "state.get",
          "json.load",
          "state_file.exists"
        ],
        "execute_agent_task": [
          "mcp.tool",
          "datetime.now"
        ],
        "get_agent_status": [
          "mcp.tool"
        ],
        "get_rules_manifest": [
          "Path",
          "str",
          "mcp.tool",
          "open",
          "json.load",
          "manifest_file.exists"
        ],
        "get_workflow_modes": [
          "mcp.tool"
        ],
        "validate_handoff_package": [
          "len",
          "mcp.tool",
          "str",
          "min",
          "package.get"
        ],
        "get_handoff_template": [
          "mcp.tool"
        ]
      },
      "dependencies": [
        "FastMCP",
        "Path",
        "datetime",
        "json",
        "mcp.server.fastmcp",
        "os",
        "pathlib"
      ],
      "hash": "9cb3574a738a8dd3591f9647deead6a732aeffb5552cdd2c58b23c1d5ea46c1a",
      "artifact_id": "9aa727df-884f-41ce-a918-3082005d7b9a"
    },
    {
      "module_id": "restructure.core.llmgenie.api.handoff_validator",
      "path": "restructure/core/llmgenie/api/handoff_validator.py",
      "category": "core",
      "module_doc": "Handoff validation module for llmgenie\nImplements automated completeness validation for context transfer packages\nBased on 016_context_transfer_protocol atomic rule",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "validate_package",
          "docstring": "Validate complete handoff package",
          "line_range": [
            86,
            125
          ],
          "parameters": [
            "self",
            "package"
          ],
          "decorators": []
        },
        {
          "name": "_validate_files",
          "docstring": "Validate individual files in package",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_find_missing_files",
          "docstring": "Find missing required file types",
          "line_range": [
            145,
            149
          ],
          "parameters": [
            "self",
            "files"
          ],
          "decorators": []
        },
        {
          "name": "_validate_startup_prompt",
          "docstring": "Validate startup prompt content",
          "line_range": [
            151,
            161
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_validate_control_questions",
          "docstring": "Validate control questions",
          "line_range": [
            163,
            173
          ],
          "parameters": [
            "self",
            "questions"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate overall completeness score",
          "line_range": [
            175,
            206
          ],
          "parameters": [
            "self",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_warnings",
          "docstring": "Generate validation warnings",
          "line_range": [
            208,
            231
          ],
          "parameters": [
            "self",
            "package",
            "file_validation",
            "prompt_validation",
            "questions_validation"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate improvement recommendations",
          "line_range": [
            233,
            251
          ],
          "parameters": [
            "self",
            "package",
            "missing_files",
            "warnings"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "HandoffFile",
          "docstring": "Single file in handoff package",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "StartupPrompt",
          "docstring": "Startup prompt validation",
          "line_range": [
            23,
            29
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ControlQuestions",
          "docstring": "Control questions validation",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffPackage",
          "docstring": "Complete handoff package for validation",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ValidationResult",
          "docstring": "Handoff validation result",
          "line_range": [
            50,
            67
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HandoffValidator",
          "docstring": "Core handoff validation logic",
          "line_range": [
            69,
            251
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                83,
                84
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "validate_package",
              "docstring": "Validate complete handoff package",
              "line_range": [
                86,
                125
              ],
              "parameters": [
                "self",
                "package"
              ]
            },
            {
              "name": "_validate_files",
              "docstring": "Validate individual files in package",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_find_missing_files",
              "docstring": "Find missing required file types",
              "line_range": [
                145,
                149
              ],
              "parameters": [
                "self",
                "files"
              ]
            },
            {
              "name": "_validate_startup_prompt",
              "docstring": "Validate startup prompt content",
              "line_range": [
                151,
                161
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_validate_control_questions",
              "docstring": "Validate control questions",
              "line_range": [
                163,
                173
              ],
              "parameters": [
                "self",
                "questions"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate overall completeness score",
              "line_range": [
                175,
                206
              ],
              "parameters": [
                "self",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_warnings",
              "docstring": "Generate validation warnings",
              "line_range": [
                208,
                231
              ],
              "parameters": [
                "self",
                "package",
                "file_validation",
                "prompt_validation",
                "questions_validation"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate improvement recommendations",
              "line_range": [
                233,
                251
              ],
              "parameters": [
                "self",
                "package",
                "missing_files",
                "warnings"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "validate_package": [
          "all",
          "len",
          "self._generate_warnings",
          "ValidationResult",
          "self._generate_recommendations",
          "self._validate_files",
          "self._validate_startup_prompt",
          "self._validate_control_questions",
          "self._find_missing_files",
          "file_validation.values",
          "self._calculate_completeness_score"
        ],
        "_validate_files": [
          "file_path.stat",
          "file_path.exists"
        ],
        "_find_missing_files": [
          "set",
          "list"
        ],
        "_validate_startup_prompt": [
          "StartupPrompt",
          "prompt.lower"
        ],
        "_validate_control_questions": [
          "len",
          "ControlQuestions"
        ],
        "_calculate_completeness_score": [
          "sum",
          "len",
          "file_validation.values",
          "max"
        ],
        "_generate_warnings": [
          "all",
          "len",
          "file_validation.items",
          "warnings.append",
          "file_validation.values"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ]
      },
      "dependencies": [
        "BaseModel",
        "Dict",
        "Field",
        "List",
        "Optional",
        "Path",
        "Union",
        "datetime",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "typing"
      ],
      "hash": "95e1fca4753701656be3b38544e6201c6077ce68a7837cc24ecc6ae98625cbc3",
      "artifact_id": "b909891c-e298-4362-8b3c-32f5d1d1748e"
    },
    {
      "module_id": "restructure.core.llmgenie.api.__init__",
      "path": "restructure/core/llmgenie/api/__init__.py",
      "category": "cli",
      "module_doc": "llmgenie API module\nFastAPI-based REST API for llmgenie orchestration",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "113730aac8ee128f272f72d14db21b5639e86fbd7697a11dc62547f8f826d153",
      "artifact_id": "9d0e01e4-14f0-4e7c-8109-85b61028d35a"
    },
    {
      "module_id": "restructure.core.llmgenie.api.main",
      "path": "restructure/core/llmgenie/api/main.py",
      "category": "core",
      "module_doc": "FastAPI main application for llmgenie\nProvides REST API for multi-agent orchestration and workflow management",
      "functions": [
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            69,
            75
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "get_project_state",
          "docstring": "Get current project state",
          "line_range": [
            79,
            94
          ],
          "parameters": [],
          "decorators": [
            "app.get('/project/state', response_model=ProjectStateResponse)"
          ]
        },
        {
          "name": "execute_agent_task",
          "docstring": "Execute a task with specified agent - Enhanced with Ollama/Claude routing",
          "line_range": [
            98,
            164
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/agents/execute', response_model=AgentResponse)"
          ]
        },
        {
          "name": "get_agent_status",
          "docstring": "Get status of specific agent",
          "line_range": [
            167,
            174
          ],
          "parameters": [
            "agent_id"
          ],
          "decorators": [
            "app.get('/agents/status/{agent_id}')"
          ]
        },
        {
          "name": "get_rules_manifest",
          "docstring": "Get rules manifest",
          "line_range": [
            178,
            185
          ],
          "parameters": [],
          "decorators": [
            "app.get('/rules/manifest')"
          ]
        },
        {
          "name": "get_workflow_modes",
          "docstring": "Get available workflow modes",
          "line_range": [
            188,
            195
          ],
          "parameters": [],
          "decorators": [
            "app.get('/workflow/modes')"
          ]
        },
        {
          "name": "validate_handoff_package",
          "docstring": "Validate handoff package completeness for context transfer between AI sessions",
          "line_range": [
            199,
            206
          ],
          "parameters": [
            "package"
          ],
          "decorators": [
            "app.post('/handoff/validate', response_model=ValidationResult, operation_id='validate_handoff_package')"
          ]
        },
        {
          "name": "get_handoff_template",
          "docstring": "Get handoff package template with required files and validation criteria",
          "line_range": [
            209,
            242
          ],
          "parameters": [],
          "decorators": [
            "app.get('/handoff/template', operation_id='get_handoff_template')"
          ]
        }
      ],
      "classes": [
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            46,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ProjectStateResponse",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentRequest",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "AgentResponse",
          "docstring": "",
          "line_range": [
            61,
            65
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "health_check": [
          "HealthResponse",
          "datetime.now",
          "app.get"
        ],
        "get_project_state": [
          "str",
          "open",
          "state.get",
          "json.load",
          "app.get",
          "ProjectStateResponse",
          "HTTPException"
        ],
        "execute_agent_task": [
          "str",
          "app.post",
          "router.route_task",
          "router.execute_with_model",
          "execution_result.get",
          "AgentResponse",
          "TaskClassifier",
          "datetime.now",
          "ModelRouter"
        ],
        "get_agent_status": [
          "app.get"
        ],
        "get_rules_manifest": [
          "HTTPException",
          "open",
          "json.load",
          "app.get"
        ],
        "get_workflow_modes": [
          "app.get"
        ],
        "validate_handoff_package": [
          "str",
          "app.post",
          "validator.validate_package",
          "HTTPException",
          "HandoffValidator"
        ],
        "get_handoff_template": [
          "app.get"
        ]
      },
      "dependencies": [
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "FastApiMCP",
        "HTTPException",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "Path",
        "TaskClassifier",
        "ValidationResult",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi_mcp",
        "handoff_validator",
        "json",
        "os",
        "pathlib",
        "pydantic",
        "sys",
        "task_router",
        "typing",
        "uvicorn"
      ],
      "hash": "924d3f4417bd5f759688dd49b03282f0e54d64231bf423eb061b52a46ecb3096",
      "artifact_id": "36b5fe01-d62b-4a04-8f98-629f8ea4523d"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.__init__",
      "path": "restructure/core/llmgenie/orchestration/__init__.py",
      "category": "cli",
      "module_doc": "Multi-Agent Orchestration Package\n\nEpic 5 Phase 3.1: Complete orchestration system\n- AgentOrchestrator: Main orchestration class\n- Core: ExecutionMode, AgentCoordination, OrchestrationTask, OrchestrationResult\n- Executors: ParallelExecutor, SequentialExecutor, CollaborativeExecutor",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "AgentOrchestrator",
        "CollaborativeExecutor",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "core",
        "executors",
        "orchestrator"
      ],
      "hash": "84b5d81bce4f1e78a7e889727b30bc9050567530d03928ca7b0979d04de3b09e",
      "artifact_id": "d59813b1-2dcc-4217-b41e-ba855c3fdf5f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.orchestrator",
      "path": "restructure/core/llmgenie/orchestration/orchestrator.py",
      "category": "core",
      "module_doc": "Multi-Agent Orchestrator\n\nEpic 5 Phase 3.1: Main orchestration class\nSingle responsibility: Coordinate multiple agents using different execution strategies",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
          "line_range": [
            28,
            44
          ],
          "parameters": [
            "self",
            "agent_routers",
            "task_classifier"
          ],
          "decorators": []
        },
        {
          "name": "orchestrate",
          "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
          "line_range": [
            46,
            135
          ],
          "parameters": [
            "self",
            "query",
            "execution_mode",
            "coordination_type",
            "context",
            "subtasks",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_execution_mode",
          "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_coordination_type",
          "docstring": "Suggest coordination type based on execution mode",
          "line_range": [
            162,
            172
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        },
        {
          "name": "_validate_coordination_compatibility",
          "docstring": "Validate that coordination type is compatible with execution mode",
          "line_range": [
            174,
            186
          ],
          "parameters": [
            "self",
            "execution_mode",
            "coordination_type"
          ],
          "decorators": []
        },
        {
          "name": "get_orchestration_stats",
          "docstring": "Get orchestration statistics and available agents",
          "line_range": [
            188,
            201
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentOrchestrator",
          "docstring": "Main orchestration class for multi-agent task execution\n\nEpic 5 integration: Uses existing TaskRouter + ModelRouter components\nSupports: PARALLEL, SEQUENTIAL, COLLABORATIVE execution modes",
          "line_range": [
            20,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with available agent routers\n\nArgs:\n    agent_routers: Dict of {name: ModelRouter} for different agents/models\n    task_classifier: Optional TaskClassifier for automatic mode selection",
              "line_range": [
                28,
                44
              ],
              "parameters": [
                "self",
                "agent_routers",
                "task_classifier"
              ]
            },
            {
              "name": "orchestrate",
              "docstring": "Main orchestration method\n\nArgs:\n    query: Main task query\n    execution_mode: How to execute (PARALLEL/SEQUENTIAL/COLLABORATIVE)\n    coordination_type: How agents coordinate (INDEPENDENT/SYNCHRONIZED/HIERARCHICAL)\n    context: Additional context for task execution\n    subtasks: Pre-defined subtasks (optional)\n    task_id: Custom task ID (optional)\n\nReturns:\n    OrchestrationResult with execution results and metrics",
              "line_range": [
                46,
                135
              ],
              "parameters": [
                "self",
                "query",
                "execution_mode",
                "coordination_type",
                "context",
                "subtasks",
                "task_id"
              ]
            },
            {
              "name": "_suggest_execution_mode",
              "docstring": "Suggest optimal execution mode based on query analysis\n\nUses existing TaskClassifier if available, otherwise heuristics",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "_suggest_coordination_type",
              "docstring": "Suggest coordination type based on execution mode",
              "line_range": [
                162,
                172
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            },
            {
              "name": "_validate_coordination_compatibility",
              "docstring": "Validate that coordination type is compatible with execution mode",
              "line_range": [
                174,
                186
              ],
              "parameters": [
                "self",
                "execution_mode",
                "coordination_type"
              ]
            },
            {
              "name": "get_orchestration_stats",
              "docstring": "Get orchestration statistics and available agents",
              "line_range": [
                188,
                201
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "len",
          "ParallelExecutor",
          "CollaborativeExecutor",
          "logger.info",
          "SequentialExecutor"
        ],
        "orchestrate": [
          "len",
          "str",
          "self._suggest_coordination_type",
          "OrchestrationResult",
          "logger.error",
          "self._suggest_execution_mode",
          "self._validate_coordination_compatibility",
          "int",
          "logger.warning",
          "ValueError",
          "logger.info",
          "OrchestrationTask",
          "datetime.now",
          "start_time.timestamp"
        ],
        "_suggest_execution_mode": [
          "ExecutionMode.suggest_mode_for_task",
          "logger.warning"
        ],
        "_suggest_coordination_type": [],
        "_validate_coordination_compatibility": [
          "compatible_combinations.get",
          "coordination_type.is_compatible_with_mode"
        ],
        "get_orchestration_stats": [
          "len",
          "list"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "CollaborativeExecutor",
        "Dict",
        "ExecutionMode",
        "List",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "ParallelExecutor",
        "SequentialExecutor",
        "TaskClassifier",
        "core",
        "datetime",
        "executors",
        "logging",
        "task_router",
        "typing"
      ],
      "hash": "15ef1421365f772d0d10ebb002a9b5ef46c79e30408acc2a5e7630155371aaff",
      "artifact_id": "52860b84-6279-4f97-affe-2f84fc0a3622"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.agent_orchestrator",
      "path": "restructure/core/llmgenie/orchestration/agent_orchestrator.py",
      "category": "core",
      "module_doc": "Agent Orchestrator for Multi-Agent Task Coordination\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration implementation\nExtends existing TaskRouter/ModelRouter with orchestration capabilities.\n\nDesign principle: Composition over inheritance - leverages existing components.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize orchestrator with TaskRouter components",
          "line_range": [
            78,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_agent_routers",
          "docstring": "Initialize specialized ModelRouter instances for different agent roles",
          "line_range": [
            92,
            99
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "coordinate_multi_agent_tasks",
          "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
          "line_range": [
            101,
            145
          ],
          "parameters": [
            "self",
            "complex_task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_parallel",
          "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
          "line_range": [
            147,
            215
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_sequential",
          "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
          "line_range": [
            217,
            284
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_collaborative",
          "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
          "line_range": [
            286,
            347
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
          "line_range": [
            349,
            381
          ],
          "parameters": [
            "self",
            "query",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_score",
          "docstring": "Calculate quality score using existing QualityValidator",
          "line_range": [
            383,
            405
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_validate_result_quality",
          "docstring": "Validate result quality using existing Epic 5 QualityValidator",
          "line_range": [
            407,
            415
          ],
          "parameters": [
            "self",
            "execution_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_log_coordination_event",
          "docstring": "Log coordination event for analysis and improvement",
          "line_range": [
            417,
            433
          ],
          "parameters": [
            "self",
            "task",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_metrics",
          "docstring": "Get coordination performance metrics",
          "line_range": [
            435,
            452
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "manage_parallel_execution",
          "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
          "line_range": [
            456,
            484
          ],
          "parameters": [
            "self",
            "task_list"
          ],
          "decorators": []
        },
        {
          "name": "handle_inter_agent_communication",
          "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
          "line_range": [
            486,
            516
          ],
          "parameters": [
            "self",
            "sender_agent",
            "receiver_agent",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "execute_subtask",
          "docstring": "",
          "line_range": [
            160,
            182
          ],
          "parameters": [
            "router_name",
            "subtask"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist",
          "line_range": [
            28,
            32
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies",
          "line_range": [
            35,
            39
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration",
          "line_range": [
            43,
            52
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration",
          "line_range": [
            56,
            65
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AgentOrchestrator",
          "docstring": "Multi-Agent Orchestrator for Epic 5 Phase 3 Production Ready\n\nCoordinates multiple TaskRouter instances for complex multi-agent workflows.\nImplements patterns from Epic 5 checklist: parallel, sequential, collaborative execution.\n\nDesign: Composition with existing TaskRouter/ModelRouter components",
          "line_range": [
            68,
            516
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize orchestrator with TaskRouter components",
              "line_range": [
                78,
                90
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_agent_routers",
              "docstring": "Initialize specialized ModelRouter instances for different agent roles",
              "line_range": [
                92,
                99
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "coordinate_multi_agent_tasks",
              "docstring": "Main coordination method for multi-agent tasks\n\nEpic 5 Phase 3.1 requirement: coordinate_multi_agent_tasks",
              "line_range": [
                101,
                145
              ],
              "parameters": [
                "self",
                "complex_task"
              ]
            },
            {
              "name": "_execute_parallel",
              "docstring": "Parallel task execution pattern\n\nEpic 5 example: documentation + code generation simultaneously",
              "line_range": [
                147,
                215
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_sequential",
              "docstring": "Sequential handoffs pattern\n\nEpic 5 example: design \u2192 implementation \u2192 review",
              "line_range": [
                217,
                284
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_collaborative",
              "docstring": "Collaborative problem solving pattern\n\nEpic 5 example: multiple models, best result selection",
              "line_range": [
                286,
                347
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Automatic task decomposition using TaskClassifier\n\nAI-assisted task decomposition from Epic 5 checklist",
              "line_range": [
                349,
                381
              ],
              "parameters": [
                "self",
                "query",
                "mode"
              ]
            },
            {
              "name": "_calculate_quality_score",
              "docstring": "Calculate quality score using existing QualityValidator",
              "line_range": [
                383,
                405
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_validate_result_quality",
              "docstring": "Validate result quality using existing Epic 5 QualityValidator",
              "line_range": [
                407,
                415
              ],
              "parameters": [
                "self",
                "execution_result",
                "task"
              ]
            },
            {
              "name": "_log_coordination_event",
              "docstring": "Log coordination event for analysis and improvement",
              "line_range": [
                417,
                433
              ],
              "parameters": [
                "self",
                "task",
                "result"
              ]
            },
            {
              "name": "get_coordination_metrics",
              "docstring": "Get coordination performance metrics",
              "line_range": [
                435,
                452
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "manage_parallel_execution",
              "docstring": "Manage multiple parallel executions\n\nEpic 5 Phase 3.1 requirement: manage_parallel_execution",
              "line_range": [
                456,
                484
              ],
              "parameters": [
                "self",
                "task_list"
              ]
            },
            {
              "name": "handle_inter_agent_communication",
              "docstring": "Handle communication between agents\n\nEpic 5 Phase 3.1 requirement: handle_inter_agent_communication",
              "line_range": [
                486,
                516
              ],
              "parameters": [
                "self",
                "sender_agent",
                "receiver_agent",
                "message"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityValidator",
          "self._initialize_agent_routers",
          "TaskClassifier"
        ],
        "_initialize_agent_routers": [
          "ModelRouter"
        ],
        "coordinate_multi_agent_tasks": [
          "self._calculate_quality_score",
          "str",
          "OrchestrationResult",
          "self._execute_sequential",
          "self._execute_collaborative",
          "self._log_coordination_event",
          "ValueError",
          "self._execute_parallel",
          "datetime.now"
        ],
        "_execute_parallel": [
          "len",
          "self._decompose_task"
        ],
        "execute_subtask": [
          "router.route_task",
          "router.execute_with_model"
        ],
        "_execute_sequential": [
          "len",
          "str",
          "router.route_task",
          "list",
          "OrchestrationResult",
          "r.get",
          "router.execute_with_model",
          "results.values",
          "enumerate",
          "self._decompose_task",
          "execution_result.get"
        ],
        "_execute_collaborative": [
          "str",
          "router.route_task",
          "self._validate_result_quality",
          "OrchestrationResult",
          "router.execute_with_model",
          "max",
          "collaborative_results.items"
        ],
        "_decompose_task": [
          "query.lower"
        ],
        "_calculate_quality_score": [
          "max",
          "r.get",
          "k.startswith",
          "self._validate_result_quality"
        ],
        "_validate_result_quality": [
          "execution_result.get"
        ],
        "_log_coordination_event": [
          "len",
          "datetime.now"
        ],
        "get_coordination_metrics": [
          "sum",
          "len",
          "e.get"
        ],
        "manage_parallel_execution": [
          "str",
          "self.coordinate_multi_agent_tasks",
          "OrchestrationResult",
          "enumerate",
          "processed_results.append",
          "isinstance",
          "asyncio.gather"
        ],
        "handle_inter_agent_communication": [
          "datetime.now",
          "message.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "QualityResult",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "task_router",
        "typing"
      ],
      "hash": "8de034bd011f87998ab0fe3acfba6fb9fd59a210e8dad03ecdfea02c67789df2",
      "artifact_id": "37c7a6fd-49b9-4aa4-83be-89f891e1e845"
    },
    {
      "module_id": "restructure.core.llmgenie.cli.handoff_cli",
      "path": "restructure/core/llmgenie/cli/handoff_cli.py",
      "category": "cli",
      "module_doc": "CLI tool for handoff validation\nCan be used in CI/CD pipelines and workflows",
      "functions": [
        {
          "name": "load_handoff_config",
          "docstring": "Load handoff configuration from JSON file",
          "line_range": [
            18,
            28
          ],
          "parameters": [
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "create_handoff_package_from_config",
          "docstring": "Create HandoffPackage from configuration",
          "line_range": [
            30,
            49
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "print_validation_result",
          "docstring": "Print validation result to console",
          "line_range": [
            51,
            99
          ],
          "parameters": [
            "result",
            "verbose"
          ],
          "decorators": []
        },
        {
          "name": "generate_template",
          "docstring": "Generate handoff template configuration",
          "line_range": [
            101,
            140
          ],
          "parameters": [
            "output_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI entry point",
          "line_range": [
            142,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_handoff_config": [
          "open",
          "print",
          "json.load",
          "sys.exit"
        ],
        "create_handoff_package_from_config": [
          "HandoffFile",
          "config.get",
          "HandoffPackage"
        ],
        "print_validation_result": [
          "len",
          "print"
        ],
        "generate_template": [
          "open",
          "print",
          "json.dump"
        ],
        "main": [
          "generate_template",
          "load_handoff_config",
          "print",
          "parser.parse_args",
          "print_validation_result",
          "template_parser.add_argument",
          "argparse.ArgumentParser",
          "check_parser.add_argument",
          "parser.print_help",
          "validator.validate_package",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "validate_parser.add_argument",
          "create_handoff_package_from_config",
          "HandoffValidator",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Dict",
        "HandoffFile",
        "HandoffPackage",
        "HandoffValidator",
        "List",
        "Path",
        "api.handoff_validator",
        "argparse",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "d45d8b28e2936eac9dfcaf32ffbda0bc1dd893350c36d5b1cd213066e2615c62",
      "artifact_id": "1fc3fe09-b4aa-46e8-b97a-ea9702c0deed"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.quality_intelligence",
      "path": "restructure/core/llmgenie/task_router/quality_intelligence.py",
      "category": "core",
      "module_doc": "Quality Intelligence System for Smart LLM Routing\n\nProvides feedback loop mechanism for continuous improvement of routing decisions\nBased on Phase 2D architecture design - lightweight implementation for production use",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize quality intelligence with data persistence",
          "line_range": [
            68,
            80
          ],
          "parameters": [
            "self",
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "record_execution_result",
          "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
          "line_range": [
            82,
            128
          ],
          "parameters": [
            "self",
            "task_id",
            "routing_decision",
            "quality_result",
            "execution_time",
            "query",
            "task_type",
            "success",
            "user_feedback"
          ],
          "decorators": []
        },
        {
          "name": "analyze_model_performance_trends",
          "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
          "line_range": [
            130,
            197
          ],
          "parameters": [
            "self",
            "model_choice",
            "task_type",
            "days_back"
          ],
          "decorators": []
        },
        {
          "name": "suggest_routing_improvements",
          "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
          "line_range": [
            199,
            246
          ],
          "parameters": [
            "self",
            "min_confidence"
          ],
          "decorators": []
        },
        {
          "name": "update_quality_thresholds",
          "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
          "line_range": [
            248,
            298
          ],
          "parameters": [
            "self",
            "task_type",
            "performance_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_historical_data",
          "docstring": "Load historical performance data from disk",
          "line_range": [
            300,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_persist_result",
          "docstring": "Persist execution result to disk",
          "line_range": [
            316,
            332
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_trend",
          "docstring": "Calculate trend direction from list of values",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self",
            "values"
          ],
          "decorators": []
        },
        {
          "name": "get_summary_stats",
          "docstring": "Get summary statistics for monitoring dashboard",
          "line_range": [
            355,
            380
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionResult",
          "docstring": "Record of a single task execution for quality intelligence",
          "line_range": [
            20,
            30
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "PerformanceReport",
          "docstring": "Analysis report of model performance trends",
          "line_range": [
            34,
            43
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "RoutingRecommendation",
          "docstring": "Recommendation for improving routing decisions",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityIntelligence",
          "docstring": "Quality Intelligence System for continuous routing improvement\n\nLightweight implementation focusing on:\n- Execution result tracking\n- Performance trend analysis  \n- Routing improvement recommendations\n- Adaptive threshold management",
          "line_range": [
            57,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize quality intelligence with data persistence",
              "line_range": [
                68,
                80
              ],
              "parameters": [
                "self",
                "data_dir"
              ]
            },
            {
              "name": "record_execution_result",
              "docstring": "Record execution result for quality intelligence analysis\n\nArgs:\n    task_id: Unique identifier for the task\n    routing_decision: The routing decision that was made\n    quality_result: Result of quality validation\n    execution_time: Time taken for execution in seconds\n    query: Original query text\n    task_type: Type of task executed\n    success: Whether execution was successful\n    user_feedback: Optional user satisfaction score (0-1)",
              "line_range": [
                82,
                128
              ],
              "parameters": [
                "self",
                "task_id",
                "routing_decision",
                "quality_result",
                "execution_time",
                "query",
                "task_type",
                "success",
                "user_feedback"
              ]
            },
            {
              "name": "analyze_model_performance_trends",
              "docstring": "Analyze performance trends for models and task types\n\nArgs:\n    model_choice: Specific model to analyze (None for all)\n    task_type: Specific task type to analyze (None for all)\n    days_back: Number of days to look back for analysis\n    \nReturns:\n    List of performance reports",
              "line_range": [
                130,
                197
              ],
              "parameters": [
                "self",
                "model_choice",
                "task_type",
                "days_back"
              ]
            },
            {
              "name": "suggest_routing_improvements",
              "docstring": "Suggest routing improvements based on performance analysis\n\nArgs:\n    min_confidence: Minimum confidence threshold for recommendations\n    \nReturns:\n    List of routing recommendations",
              "line_range": [
                199,
                246
              ],
              "parameters": [
                "self",
                "min_confidence"
              ]
            },
            {
              "name": "update_quality_thresholds",
              "docstring": "Update quality thresholds based on performance data\n\nArgs:\n    task_type: Task type to update thresholds for\n    performance_data: Optional specific performance data (uses recent if None)\n    \nReturns:\n    Updated threshold recommendations",
              "line_range": [
                248,
                298
              ],
              "parameters": [
                "self",
                "task_type",
                "performance_data"
              ]
            },
            {
              "name": "_load_historical_data",
              "docstring": "Load historical performance data from disk",
              "line_range": [
                300,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_persist_result",
              "docstring": "Persist execution result to disk",
              "line_range": [
                316,
                332
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "_calculate_trend",
              "docstring": "Calculate trend direction from list of values",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self",
                "values"
              ]
            },
            {
              "name": "get_summary_stats",
              "docstring": "Get summary statistics for monitoring dashboard",
              "line_range": [
                355,
                380
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "deque",
          "defaultdict",
          "self._load_historical_data"
        ],
        "record_execution_result": [
          "ExecutionResult",
          "self._persist_result",
          "datetime.now"
        ],
        "analyze_model_performance_trends": [
          "sum",
          "len",
          "sorted",
          "list",
          "min",
          "PerformanceReport",
          "reports.append",
          "datetime.fromisoformat",
          "self._calculate_trend",
          "timedelta",
          "datetime.now"
        ],
        "suggest_routing_improvements": [
          "sorted",
          "len",
          "recommendations.append",
          "self.analyze_model_performance_trends",
          "RoutingRecommendation",
          "min",
          "task_reports.items",
          "reports.sort",
          "defaultdict"
        ],
        "update_quality_thresholds": [
          "sum",
          "len",
          "min",
          "max"
        ],
        "_load_historical_data": [
          "data_file.exists",
          "open",
          "print",
          "task_data.items",
          "json.load",
          "TaskType",
          "data.get"
        ],
        "_persist_result": [
          "json.dumps",
          "open",
          "asdict",
          "f.write",
          "print",
          "datetime.now"
        ],
        "_calculate_trend": [
          "sum",
          "len",
          "range"
        ],
        "get_summary_stats": [
          "sum",
          "len",
          "datetime.now",
          "defaultdict",
          "dict"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "QualityResult",
        "TaskType",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "datetime",
        "defaultdict",
        "deque",
        "json",
        "pathlib",
        "quality_validator",
        "task_classifier",
        "timedelta",
        "typing"
      ],
      "hash": "c5c8788dcc50b90151676974f682e30850cb91b3a3941f1a4296497da0c98091",
      "artifact_id": "116b0929-217c-4835-9066-39c02ddda1f8"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.task_classifier",
      "path": "restructure/core/llmgenie/task_router/task_classifier.py",
      "category": "core",
      "module_doc": "Task Classification Engine for Smart LLM Routing\n\nBased on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference\n- Mixed complexity handling \u2192 Smart routing",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize classifier with Epic 5 research patterns",
          "line_range": [
            55,
            78
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "classify_task",
          "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
          "line_range": [
            80,
            115
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_determine_task_type",
          "docstring": "Determine primary task type from query content",
          "line_range": [
            117,
            146
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity",
          "docstring": "Calculate task complexity based on content analysis",
          "line_range": [
            148,
            191
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_routing_preferences",
          "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
          "line_range": [
            193,
            219
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_confidence",
          "docstring": "Calculate confidence score for classification",
          "line_range": [
            221,
            241
          ],
          "parameters": [
            "self",
            "query",
            "task_type",
            "complexity"
          ],
          "decorators": []
        },
        {
          "name": "_generate_reasoning",
          "docstring": "Generate human-readable reasoning for classification",
          "line_range": [
            243,
            258
          ],
          "parameters": [
            "self",
            "task_type",
            "complexity",
            "ollama_pref",
            "claude_pref"
          ],
          "decorators": []
        },
        {
          "name": "get_complexity_score",
          "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
          "line_range": [
            260,
            270
          ],
          "parameters": [
            "self",
            "task_dict"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskType",
          "docstring": "Task classification types based on Epic 5 research",
          "line_range": [
            17,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ComplexityLevel",
          "docstring": "Task complexity levels for routing decisions",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ClassificationResult",
          "docstring": "Result of task classification analysis",
          "line_range": [
            38,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskClassifier",
          "docstring": "Smart Task Classifier for LLM routing decisions\n\nIntegrates with existing AgentRequest pattern from main.py:98-112",
          "line_range": [
            48,
            270
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize classifier with Epic 5 research patterns",
              "line_range": [
                55,
                78
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "classify_task",
              "docstring": "Classify task based on Epic 5 research patterns\n\nArgs:\n    query: User request/task description\n    context: Optional context (file types, project info, etc.)\n    \nReturns:\n    ClassificationResult with routing recommendation",
              "line_range": [
                80,
                115
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_determine_task_type",
              "docstring": "Determine primary task type from query content",
              "line_range": [
                117,
                146
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_calculate_complexity",
              "docstring": "Calculate task complexity based on content analysis",
              "line_range": [
                148,
                191
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_routing_preferences",
              "docstring": "Get routing preferences based on Epic 5 research findings:\n- Code generation patterns \u2192 Ollama preference\n- Documentation patterns \u2192 Ollama preference  \n- Complex reasoning patterns \u2192 Claude preference",
              "line_range": [
                193,
                219
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_calculate_confidence",
              "docstring": "Calculate confidence score for classification",
              "line_range": [
                221,
                241
              ],
              "parameters": [
                "self",
                "query",
                "task_type",
                "complexity"
              ]
            },
            {
              "name": "_generate_reasoning",
              "docstring": "Generate human-readable reasoning for classification",
              "line_range": [
                243,
                258
              ],
              "parameters": [
                "self",
                "task_type",
                "complexity",
                "ollama_pref",
                "claude_pref"
              ]
            },
            {
              "name": "get_complexity_score",
              "docstring": "Get numerical complexity score for external systems\n\nIntegrates with existing workflow for performance monitoring",
              "line_range": [
                260,
                270
              ],
              "parameters": [
                "self",
                "task_dict"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "classify_task": [
          "self._calculate_confidence",
          "self._determine_task_type",
          "self._calculate_complexity",
          "self._get_routing_preferences",
          "ClassificationResult",
          "self._generate_reasoning",
          "query.lower"
        ],
        "_determine_task_type": [
          "re.search",
          "any",
          "context.get"
        ],
        "_calculate_complexity": [
          "sum",
          "len",
          "any",
          "context.get",
          "query.split"
        ],
        "_get_routing_preferences": [],
        "_calculate_confidence": [
          "len",
          "re.search",
          "any",
          "min",
          "query.split",
          "query.lower"
        ],
        "_generate_reasoning": [
          "reasoning_parts.append"
        ],
        "get_complexity_score": [
          "self.classify_task",
          "task_dict.get"
        ]
      },
      "dependencies": [
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Tuple",
        "dataclass",
        "dataclasses",
        "enum",
        "re",
        "typing"
      ],
      "hash": "1524140f92d8dcaea7be637e602972fcb202050baa85e53f8ee8501d8ad33988",
      "artifact_id": "433c8fdc-ec65-4fd1-b6b3-680eaafee510"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.model_router",
      "path": "restructure/core/llmgenie/task_router/model_router.py",
      "category": "core",
      "module_doc": "Model Router for Smart LLM Selection\n\nIntegrates with existing FastAPI infrastructure (main.py:98-112)\nExtends AgentRequest/AgentResponse pattern with Ollama backend",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
          "line_range": [
            58,
            87
          ],
          "parameters": [
            "self",
            "classifier",
            "quality_validator",
            "quality_intelligence",
            "rag_enhancer"
          ],
          "decorators": []
        },
        {
          "name": "route_task",
          "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
          "line_range": [
            89,
            148
          ],
          "parameters": [
            "self",
            "query",
            "context",
            "model_preference"
          ],
          "decorators": []
        },
        {
          "name": "_select_quality_aware_model",
          "docstring": "Select optimal model based on task classification AND quality requirements",
          "line_range": [
            150,
            177
          ],
          "parameters": [
            "self",
            "classification",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_candidate_models",
          "docstring": "Get candidate models based on task classification preferences",
          "line_range": [
            179,
            204
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_select_optimal_model_legacy",
          "docstring": "Legacy model selection logic (fallback)",
          "line_range": [
            206,
            227
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_model",
          "docstring": "Execute task with specified model",
          "line_range": [
            229,
            262
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_ollama_task",
          "docstring": "Execute task using Ollama API",
          "line_range": [
            264,
            288
          ],
          "parameters": [
            "self",
            "query",
            "model_choice",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_execute_claude_task",
          "docstring": "Execute task using Claude API - placeholder for integration",
          "line_range": [
            290,
            292
          ],
          "parameters": [
            "self",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_adaptive_fallback",
          "docstring": "Determine adaptive fallback model based on quality requirements",
          "line_range": [
            294,
            311
          ],
          "parameters": [
            "self",
            "primary_model",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "_get_fallback_model_legacy",
          "docstring": "Legacy fallback model mapping",
          "line_range": [
            313,
            323
          ],
          "parameters": [
            "self",
            "primary_model"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_threshold",
          "docstring": "Calculate minimum quality threshold based on task complexity",
          "line_range": [
            325,
            335
          ],
          "parameters": [
            "self",
            "classification"
          ],
          "decorators": []
        },
        {
          "name": "_create_preference_decision",
          "docstring": "Create routing decision for user-specified model preference",
          "line_range": [
            337,
            350
          ],
          "parameters": [
            "self",
            "model_preference",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "_generate_routing_reasoning",
          "docstring": "Generate human-readable reasoning for routing decision",
          "line_range": [
            352,
            363
          ],
          "parameters": [
            "self",
            "classification",
            "selected_model"
          ],
          "decorators": []
        },
        {
          "name": "execute_with_quality_tracking",
          "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
          "line_range": [
            365,
            452
          ],
          "parameters": [
            "self",
            "query",
            "task_id",
            "model_preference",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ModelChoice",
          "docstring": "Available LLM backends for task execution",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "RoutingDecision",
          "docstring": "Result of routing decision process",
          "line_range": [
            40,
            47
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelRouter",
          "docstring": "Smart Model Router for LLM task execution\n\nExtends existing FastAPI agent pattern from main.py:98-112\nIntegrates with AgentRequest/AgentResponse models",
          "line_range": [
            50,
            452
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize router with task classifier, quality validator, intelligence system, and RAG enhancer",
              "line_range": [
                58,
                87
              ],
              "parameters": [
                "self",
                "classifier",
                "quality_validator",
                "quality_intelligence",
                "rag_enhancer"
              ]
            },
            {
              "name": "route_task",
              "docstring": "Route task to optimal LLM based on classification and performance\n\nArgs:\n    query: Task description/request\n    context: Additional context (file types, project info, etc.)\n    model_preference: User's model preference (overrides auto-routing)\n    \nReturns:\n    RoutingDecision with selected model and reasoning",
              "line_range": [
                89,
                148
              ],
              "parameters": [
                "self",
                "query",
                "context",
                "model_preference"
              ]
            },
            {
              "name": "_select_quality_aware_model",
              "docstring": "Select optimal model based on task classification AND quality requirements",
              "line_range": [
                150,
                177
              ],
              "parameters": [
                "self",
                "classification",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_candidate_models",
              "docstring": "Get candidate models based on task classification preferences",
              "line_range": [
                179,
                204
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_select_optimal_model_legacy",
              "docstring": "Legacy model selection logic (fallback)",
              "line_range": [
                206,
                227
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "execute_with_model",
              "docstring": "Execute task with specified model",
              "line_range": [
                229,
                262
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_ollama_task",
              "docstring": "Execute task using Ollama API",
              "line_range": [
                264,
                288
              ],
              "parameters": [
                "self",
                "query",
                "model_choice",
                "context"
              ]
            },
            {
              "name": "_execute_claude_task",
              "docstring": "Execute task using Claude API - placeholder for integration",
              "line_range": [
                290,
                292
              ],
              "parameters": [
                "self",
                "query",
                "context"
              ]
            },
            {
              "name": "_get_adaptive_fallback",
              "docstring": "Determine adaptive fallback model based on quality requirements",
              "line_range": [
                294,
                311
              ],
              "parameters": [
                "self",
                "primary_model",
                "quality_requirements"
              ]
            },
            {
              "name": "_get_fallback_model_legacy",
              "docstring": "Legacy fallback model mapping",
              "line_range": [
                313,
                323
              ],
              "parameters": [
                "self",
                "primary_model"
              ]
            },
            {
              "name": "_calculate_quality_threshold",
              "docstring": "Calculate minimum quality threshold based on task complexity",
              "line_range": [
                325,
                335
              ],
              "parameters": [
                "self",
                "classification"
              ]
            },
            {
              "name": "_create_preference_decision",
              "docstring": "Create routing decision for user-specified model preference",
              "line_range": [
                337,
                350
              ],
              "parameters": [
                "self",
                "model_preference",
                "query"
              ]
            },
            {
              "name": "_generate_routing_reasoning",
              "docstring": "Generate human-readable reasoning for routing decision",
              "line_range": [
                352,
                363
              ],
              "parameters": [
                "self",
                "classification",
                "selected_model"
              ]
            },
            {
              "name": "execute_with_quality_tracking",
              "docstring": "Execute task with full quality tracking and intelligence recording\n\nArgs:\n    query: Task description/request\n    task_id: Unique identifier for tracking\n    model_preference: User's model preference\n    context: Additional context\n    \nReturns:\n    Execution result with quality metrics and intelligence tracking",
              "line_range": [
                365,
                452
              ],
              "parameters": [
                "self",
                "query",
                "task_id",
                "model_preference",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityIntelligence",
          "QualityValidator",
          "print",
          "PromptEnhancer",
          "TaskClassifier",
          "RAGConfig"
        ],
        "route_task": [
          "len",
          "self._select_quality_aware_model",
          "print",
          "self._calculate_quality_threshold",
          "self._generate_routing_reasoning",
          "RoutingDecision",
          "self._create_preference_decision",
          "self._get_adaptive_fallback"
        ],
        "_select_quality_aware_model": [
          "model_scores.values",
          "self._get_candidate_models",
          "self._select_optimal_model_legacy",
          "model_scores.items",
          "max"
        ],
        "_get_candidate_models": [
          "set",
          "candidates.extend",
          "candidates.append",
          "list"
        ],
        "_select_optimal_model_legacy": [],
        "execute_with_model": [
          "str",
          "self._execute_ollama_task",
          "self._execute_claude_task",
          "ValueError",
          "datetime.now"
        ],
        "_execute_ollama_task": [
          "client.post",
          "response.json",
          "response.raise_for_status",
          "httpx.AsyncClient"
        ],
        "_execute_claude_task": [],
        "_get_adaptive_fallback": [
          "quality_requirements.get",
          "high_quality_fallback.get",
          "self._get_fallback_model_legacy"
        ],
        "_get_fallback_model_legacy": [
          "fallback_map.get"
        ],
        "_calculate_quality_threshold": [
          "base_thresholds.get"
        ],
        "_create_preference_decision": [
          "RoutingDecision",
          "self._get_fallback_model_legacy"
        ],
        "_generate_routing_reasoning": [],
        "execute_with_quality_tracking": [
          "self.execute_with_model",
          "QualityResult",
          "execution_result.get",
          "self.route_task"
        ]
      },
      "dependencies": [
        "Any",
        "ClassificationResult",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "PromptEnhancer",
        "QualityIntelligence",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RAGConfig",
        "TaskClassifier",
        "Union",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "httpx",
        "quality_intelligence",
        "quality_validator",
        "rag_context",
        "task_classifier",
        "typing"
      ],
      "hash": "e55b69a4b4fd52267048ee3bd10a6675d836ea13d7446809934890ad3ec21b10",
      "artifact_id": "8d84ac6f-4e68-4a0f-961d-628fdd105914"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.__init__",
      "path": "restructure/core/llmgenie/task_router/__init__.py",
      "category": "cli",
      "module_doc": "Task Router Module for LLMGenie\n\nIntelligent task routing between Claude and Ollama based on:\n- Task complexity analysis\n- Model capability matching  \n- Performance optimization\n- Quality requirements\n\nIntegrates with existing FastAPI agent infrastructure.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "ComplexityLevel",
        "ModelChoice",
        "ModelRouter",
        "QualityResult",
        "QualityScore",
        "QualityValidator",
        "RoutingDecision",
        "TaskClassifier",
        "TaskType",
        "model_router",
        "quality_validator",
        "task_classifier"
      ],
      "hash": "4d7f0b94bbf729690622d92f329ef04a66e4caa3a3cf3f874e745945b155d75a",
      "artifact_id": "b5f0c543-e45d-47e6-a2e3-db9d6198aebf"
    },
    {
      "module_id": "restructure.core.llmgenie.task_router.quality_validator",
      "path": "restructure/core/llmgenie/task_router/quality_validator.py",
      "category": "core",
      "module_doc": "Quality Validator for LLM Output Assessment\n\nEnhanced implementation for Epic 5 Phase 2: Quality Validation Pipeline\nProvides comprehensive validation for code and text outputs with automatic fallback",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize validator with quality rules and thresholds",
          "line_range": [
            48,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "validate_code_output",
          "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            76,
            107
          ],
          "parameters": [
            "self",
            "code",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "_validate_python_code",
          "docstring": "Validate Python code specifically",
          "line_range": [
            109,
            167
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_javascript_code",
          "docstring": "Basic JavaScript validation",
          "line_range": [
            169,
            207
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_validate_generic_code",
          "docstring": "Generic code validation for unknown languages",
          "line_range": [
            209,
            239
          ],
          "parameters": [
            "self",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "validate_text_output",
          "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
          "line_range": [
            241,
            320
          ],
          "parameters": [
            "self",
            "text",
            "expected_type"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_coherence_score",
          "docstring": "Calculate text coherence based on transition words and structure",
          "line_range": [
            322,
            337
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_completeness_score",
          "docstring": "Calculate text completeness based on structure and content indicators",
          "line_range": [
            339,
            356
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "should_fallback",
          "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
          "line_range": [
            358,
            373
          ],
          "parameters": [
            "self",
            "result",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "get_quality_metrics",
          "docstring": "Extract standardized quality metrics for monitoring",
          "line_range": [
            375,
            383
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "predict_quality_requirements",
          "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
          "line_range": [
            385,
            415
          ],
          "parameters": [
            "self",
            "task_description",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "assess_model_capability",
          "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
          "line_range": [
            417,
            446
          ],
          "parameters": [
            "self",
            "model_choice",
            "quality_requirements"
          ],
          "decorators": []
        },
        {
          "name": "integrate_deepeval_metrics",
          "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
          "line_range": [
            448,
            482
          ],
          "parameters": [
            "self",
            "result"
          ],
          "decorators": []
        },
        {
          "name": "integrate_trulens_monitoring",
          "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
          "line_range": [
            484,
            530
          ],
          "parameters": [
            "self",
            "task_id",
            "result"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "QualityScore",
          "docstring": "Quality assessment levels",
          "line_range": [
            17,
            23
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "QualityResult",
          "docstring": "Result of quality validation",
          "line_range": [
            27,
            34
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "QualityValidator",
          "docstring": "Quality Validator for LLM outputs\n\nEnhanced implementation with real validation logic:\n- Code syntax and structure validation\n- Text coherence and completeness analysis\n- Automatic fallback decision making\n- Quality thresholds based on task type",
          "line_range": [
            37,
            530
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize validator with quality rules and thresholds",
              "line_range": [
                48,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "validate_code_output",
              "docstring": "Validate code output quality with syntax checking and structure analysis\n\nArgs:\n    code: Code string to validate\n    language: Programming language (default: python)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                76,
                107
              ],
              "parameters": [
                "self",
                "code",
                "language"
              ]
            },
            {
              "name": "_validate_python_code",
              "docstring": "Validate Python code specifically",
              "line_range": [
                109,
                167
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_javascript_code",
              "docstring": "Basic JavaScript validation",
              "line_range": [
                169,
                207
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "_validate_generic_code",
              "docstring": "Generic code validation for unknown languages",
              "line_range": [
                209,
                239
              ],
              "parameters": [
                "self",
                "code"
              ]
            },
            {
              "name": "validate_text_output",
              "docstring": "Validate text output quality with coherence and completeness analysis\n\nArgs:\n    text: Text string to validate\n    expected_type: Type of text (documentation, explanation, etc.)\n    \nReturns:\n    QualityResult with detailed analysis",
              "line_range": [
                241,
                320
              ],
              "parameters": [
                "self",
                "text",
                "expected_type"
              ]
            },
            {
              "name": "_calculate_coherence_score",
              "docstring": "Calculate text coherence based on transition words and structure",
              "line_range": [
                322,
                337
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_calculate_completeness_score",
              "docstring": "Calculate text completeness based on structure and content indicators",
              "line_range": [
                339,
                356
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "should_fallback",
              "docstring": "Determine if we should fallback to a different model based on quality\n\nArgs:\n    result: Quality validation result\n    task_type: Type of task being validated\n    \nReturns:\n    True if fallback is recommended",
              "line_range": [
                358,
                373
              ],
              "parameters": [
                "self",
                "result",
                "task_type"
              ]
            },
            {
              "name": "get_quality_metrics",
              "docstring": "Extract standardized quality metrics for monitoring",
              "line_range": [
                375,
                383
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "predict_quality_requirements",
              "docstring": "Predicts the quality requirements for a given task description and type.\nThis is a placeholder for a more sophisticated ML-based prediction.\n\nArgs:\n    task_description: The description of the task.\n    task_type: The type of the task (e.g., CODE_GENERATION, DOCUMENTATION).\n    \nReturns:\n    A dictionary with predicted quality requirements (e.g., \"min_score\", \"max_latency\").",
              "line_range": [
                385,
                415
              ],
              "parameters": [
                "self",
                "task_description",
                "task_type"
              ]
            },
            {
              "name": "assess_model_capability",
              "docstring": "Assesses a model's capability against predicted quality requirements.\nThis will be integrated with ModelRouter's performance baselines.\n\nArgs:\n    model_choice: The model being assessed (e.g., ModelChoice.CLAUDE_SONNET).\n    quality_requirements: Predicted quality requirements.\n    \nReturns:\n    A capability score (0-1) indicating how well the model meets requirements.",
              "line_range": [
                417,
                446
              ],
              "parameters": [
                "self",
                "model_choice",
                "quality_requirements"
              ]
            },
            {
              "name": "integrate_deepeval_metrics",
              "docstring": "Integrates DeepEval metrics with the QualityResult.\nRequires 'deepeval' library to be installed.",
              "line_range": [
                448,
                482
              ],
              "parameters": [
                "self",
                "result"
              ]
            },
            {
              "name": "integrate_trulens_monitoring",
              "docstring": "Sends quality metrics to TruLens for monitoring.\nRequires 'trulens-eval' library to be installed.",
              "line_range": [
                484,
                530
              ],
              "parameters": [
                "self",
                "task_id",
                "result"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "validate_code_output": [
          "self._validate_generic_code",
          "code.strip",
          "self._validate_javascript_code",
          "language.lower",
          "QualityResult",
          "self._validate_python_code"
        ],
        "_validate_python_code": [
          "len",
          "ast.parse",
          "str",
          "re.findall",
          "re.search",
          "min",
          "code.split",
          "QualityResult",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "_validate_javascript_code": [
          "len",
          "re.search",
          "min",
          "code.split",
          "QualityResult",
          "code.count",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "_validate_generic_code": [
          "len",
          "re.search",
          "min",
          "code.split",
          "code.strip",
          "QualityResult",
          "max",
          "issues.append",
          "line.strip",
          "round",
          "QualityScore",
          "bool"
        ],
        "validate_text_output": [
          "len",
          "self._calculate_coherence_score",
          "text.split",
          "p.strip",
          "re.search",
          "text.lower",
          "min",
          "s.strip",
          "max",
          "issues.append",
          "round",
          "QualityScore",
          "QualityResult",
          "text.strip",
          "self._calculate_completeness_score",
          "bool"
        ],
        "_calculate_coherence_score": [
          "len",
          "set",
          "text.split",
          "re.search",
          "min"
        ],
        "_calculate_completeness_score": [
          "re.search",
          "min",
          "text.strip"
        ],
        "should_fallback": [],
        "get_quality_metrics": [
          "len"
        ],
        "predict_quality_requirements": [
          "max"
        ],
        "assess_model_capability": [
          "max",
          "quality_requirements.get",
          "min",
          "model_performance_data.get"
        ],
        "integrate_deepeval_metrics": [
          "relevancy_metric.measure",
          "CoherenceMetric",
          "coherence_metric.measure",
          "print",
          "LLMTestCase",
          "RelevancyMetric"
        ],
        "integrate_trulens_monitoring": [
          "Feedback",
          "TruLlama",
          "recording.record_metrics",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "App",
        "CoherenceMetric",
        "Dict",
        "Enum",
        "Feedback",
        "LLMTestCase",
        "List",
        "Optional",
        "RelevancyMetric",
        "TaskType",
        "TruLlama",
        "Tuple",
        "ast",
        "dataclass",
        "dataclasses",
        "deepeval.metrics",
        "deepeval.test_case",
        "enum",
        "json",
        "re",
        "task_router.task_classifier",
        "trulens_eval",
        "trulens_eval.app",
        "typing"
      ],
      "hash": "4fde90c0beab73512575c35fa58af6d39c56c997788e84539b664ff144dfe176",
      "artifact_id": "a606e9ca-f8cb-4aeb-b8cb-bbdb55435be9"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.execution_modes",
      "path": "restructure/core/llmgenie/orchestration/core/execution_modes.py",
      "category": "core",
      "module_doc": "Execution modes for multi-agent orchestration\n\nEpic 5 Phase 3.1: Multi-Agent Orchestration patterns\nSingle responsibility: Define execution mode types and behavior",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of execution mode",
          "line_range": [
            48,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_use_cases",
          "docstring": "Get typical use cases for this execution mode",
          "line_range": [
            57,
            76
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "suggest_mode",
          "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
          "line_range": [
            79,
            100
          ],
          "parameters": [
            "cls",
            "task_description"
          ],
          "decorators": [
            "classmethod"
          ]
        }
      ],
      "classes": [
        {
          "name": "ExecutionMode",
          "docstring": "Multi-Agent execution patterns from Epic 5 checklist\n\nBased on Epic 5 research findings and checklist requirements:\n- Parallel task execution (documentation + code generation)\n- Sequential handoffs (design \u2192 implementation \u2192 review)  \n- Collaborative problem solving (multiple models, best result)",
          "line_range": [
            11,
            100
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of execution mode",
              "line_range": [
                48,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_use_cases",
              "docstring": "Get typical use cases for this execution mode",
              "line_range": [
                57,
                76
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "suggest_mode",
              "docstring": "Suggest optimal execution mode based on task description\n\nSimple heuristic-based suggestion - can be enhanced with ML",
              "line_range": [
                79,
                100
              ],
              "parameters": [
                "cls",
                "task_description"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_use_cases": [
          "use_cases.get"
        ],
        "suggest_mode": [
          "any",
          "task_description.lower"
        ]
      },
      "dependencies": [
        "Enum",
        "enum"
      ],
      "hash": "9ac851f29c2f57f7816c66f9f7e952c7e747f1880994cd99c42ab2135bc1a329",
      "artifact_id": "33e09e05-7493-45ff-83fb-82c26982d9f4"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.__init__",
      "path": "restructure/core/llmgenie/orchestration/core/__init__.py",
      "category": "cli",
      "module_doc": "Core types and models for Agent Orchestration\n\nEpic 5 Phase 3.1: Modular orchestration architecture\nSingle responsibility: Define core types and data models",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "coordination_types",
        "execution_modes",
        "task_models"
      ],
      "hash": "8304eeadcb25757d10007da0558bd44a097fa0d3a5c33b628f15392e17f797bf",
      "artifact_id": "cd745654-7e76-4a09-b1f5-c4253a899d0f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.coordination_types",
      "path": "restructure/core/llmgenie/orchestration/core/coordination_types.py",
      "category": "core",
      "module_doc": "Agent coordination types for orchestration\n\nEpic 5 Phase 3.1: Agent coordination strategies  \nSingle responsibility: Define coordination behavior types",
      "functions": [
        {
          "name": "get_description",
          "docstring": "Get human-readable description of coordination type",
          "line_range": [
            45,
            52
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_coordination_overhead",
          "docstring": "Get expected coordination overhead level",
          "line_range": [
            54,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_suitable_for_mode",
          "docstring": "Check if coordination type is suitable for execution mode",
          "line_range": [
            63,
            82
          ],
          "parameters": [
            "self",
            "execution_mode"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AgentCoordination",
          "docstring": "Agent coordination strategies for multi-agent systems\n\nDefines how agents coordinate and synchronize during task execution",
          "line_range": [
            11,
            82
          ],
          "methods": [
            {
              "name": "get_description",
              "docstring": "Get human-readable description of coordination type",
              "line_range": [
                45,
                52
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_coordination_overhead",
              "docstring": "Get expected coordination overhead level",
              "line_range": [
                54,
                61
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_suitable_for_mode",
              "docstring": "Check if coordination type is suitable for execution mode",
              "line_range": [
                63,
                82
              ],
              "parameters": [
                "self",
                "execution_mode"
              ]
            }
          ],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "get_description": [
          "descriptions.get"
        ],
        "get_coordination_overhead": [
          "overhead.get"
        ],
        "is_suitable_for_mode": [
          "compatibility.get"
        ]
      },
      "dependencies": [
        "Enum",
        "ExecutionMode",
        "enum",
        "execution_modes"
      ],
      "hash": "4cff4ef946fc869a8a7824f878513933490778e73880cd2e0bd921972dc0eb1f",
      "artifact_id": "abcce15d-c03d-4878-b280-acafb3aa66c5"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.core.task_models",
      "path": "restructure/core/llmgenie/orchestration/core/task_models.py",
      "category": "core",
      "module_doc": "Task data models for orchestration\n\nEpic 5 Phase 3.1: Orchestration task modeling\nSingle responsibility: Define task and result data structures",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "Validate task configuration after initialization",
          "line_range": [
            53,
            64
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_agents_needed",
          "docstring": "Estimate number of agents needed for this task",
          "line_range": [
            66,
            74
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_estimated_duration",
          "docstring": "Estimate task duration in seconds",
          "line_range": [
            76,
            88
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_successful",
          "docstring": "Check if the orchestration was successful",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_summary",
          "docstring": "Get a human-readable summary of the result",
          "line_range": [
            132,
            139
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_performance_metrics",
          "docstring": "Get performance metrics for analysis",
          "line_range": [
            141,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "OrchestrationTask",
          "docstring": "Task for multi-agent orchestration\n\nEncapsulates all information needed for multi-agent task execution",
          "line_range": [
            17,
            88
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Validate task configuration after initialization",
              "line_range": [
                53,
                64
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_agents_needed",
              "docstring": "Estimate number of agents needed for this task",
              "line_range": [
                66,
                74
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_estimated_duration",
              "docstring": "Estimate task duration in seconds",
              "line_range": [
                76,
                88
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OrchestrationResult",
          "docstring": "Result of multi-agent orchestration\n\nContains execution results and performance metrics",
          "line_range": [
            92,
            149
          ],
          "methods": [
            {
              "name": "is_successful",
              "docstring": "Check if the orchestration was successful",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_summary",
              "docstring": "Get a human-readable summary of the result",
              "line_range": [
                132,
                139
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_performance_metrics",
              "docstring": "Get performance metrics for analysis",
              "line_range": [
                141,
                149
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "datetime.now",
          "ValueError"
        ],
        "get_estimated_agents_needed": [
          "len"
        ],
        "get_estimated_duration": [
          "len"
        ],
        "is_successful": [],
        "get_summary": [],
        "get_performance_metrics": [
          "len",
          "self.is_successful"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "Any",
        "Dict",
        "ExecutionMode",
        "List",
        "Optional",
        "coordination_types",
        "dataclass",
        "dataclasses",
        "datetime",
        "execution_modes",
        "field",
        "typing"
      ],
      "hash": "fb639631d019c43ec74c72cf47ad23aa4f9a5330458d0e80afa075b6e00dfa3b",
      "artifact_id": "e356d843-9ccc-4431-be2d-1894ebd051ed"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.collaborative_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/collaborative_executor.py",
      "category": "core",
      "module_doc": "Collaborative execution strategy\n\nEpic 5 Phase 3.1: Collaborative problem solving\nSingle responsibility: Multiple agents solve same problem, best result selected",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
          "line_range": [
            28,
            119
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_with_agent",
          "docstring": "Execute task with single agent",
          "line_range": [
            121,
            154
          ],
          "parameters": [
            "self",
            "router_name",
            "router",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_assess_result_quality",
          "docstring": "Assess quality of agent result using QualityValidator",
          "line_range": [
            156,
            175
          ],
          "parameters": [
            "self",
            "agent_result",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_basic_quality_assessment",
          "docstring": "Basic quality assessment fallback",
          "line_range": [
            177,
            206
          ],
          "parameters": [
            "self",
            "content",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_consensus",
          "docstring": "Analyze consensus between agent results",
          "line_range": [
            208,
            245
          ],
          "parameters": [
            "self",
            "collaborative_results"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_quality_variance",
          "docstring": "Calculate variance in quality scores across agents",
          "line_range": [
            247,
            258
          ],
          "parameters": [
            "self",
            "quality_scores"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CollaborativeExecutor",
          "docstring": "Collaborative problem solving execution strategy\n\nEpic 5 example: Multiple models generate solution, highest quality chosen\nBenefit: Quality optimization, redundancy, multiple perspectives",
          "line_range": [
            15,
            258
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using collaborative strategy\n\nAll agents attempt same task, best quality result is selected",
              "line_range": [
                28,
                119
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_with_agent",
              "docstring": "Execute task with single agent",
              "line_range": [
                121,
                154
              ],
              "parameters": [
                "self",
                "router_name",
                "router",
                "task"
              ]
            },
            {
              "name": "_assess_result_quality",
              "docstring": "Assess quality of agent result using QualityValidator",
              "line_range": [
                156,
                175
              ],
              "parameters": [
                "self",
                "agent_result",
                "task"
              ]
            },
            {
              "name": "_basic_quality_assessment",
              "docstring": "Basic quality assessment fallback",
              "line_range": [
                177,
                206
              ],
              "parameters": [
                "self",
                "content",
                "task"
              ]
            },
            {
              "name": "_analyze_consensus",
              "docstring": "Analyze consensus between agent results",
              "line_range": [
                208,
                245
              ],
              "parameters": [
                "self",
                "collaborative_results"
              ]
            },
            {
              "name": "_calculate_quality_variance",
              "docstring": "Calculate variance in quality scores across agents",
              "line_range": [
                247,
                258
              ],
              "parameters": [
                "self",
                "quality_scores"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "QualityValidator"
        ],
        "execute": [
          "str",
          "list",
          "max",
          "self._execute_with_agent",
          "collaborative_results.items",
          "self._analyze_consensus",
          "datetime.now",
          "self._assess_result_quality",
          "collaborative_results.get",
          "r.get",
          "any",
          "collaborative_results.keys",
          "best_result.get",
          "collaborative_results.values",
          "self._calculate_quality_variance",
          "len",
          "agents_used.append",
          "OrchestrationResult",
          "result.get",
          "quality_scores.items"
        ],
        "_execute_with_agent": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_assess_result_quality": [
          "str",
          "float",
          "self._basic_quality_assessment",
          "agent_result.get",
          "isinstance",
          "hasattr",
          "result_data.get"
        ],
        "_basic_quality_assessment": [
          "len",
          "content_lower.split",
          "set",
          "content.strip",
          "any",
          "min",
          "content.lower",
          "isinstance",
          "task_lower.split"
        ],
        "_analyze_consensus": [
          "len",
          "str",
          "set.intersection",
          "set",
          "contents.append",
          "content.lower",
          "collaborative_results.values",
          "content.split",
          "locals",
          "isinstance",
          "result.get",
          "result_data.get",
          "set.union"
        ],
        "_calculate_quality_variance": [
          "sum",
          "len",
          "quality_scores.values",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "Optional",
        "OrchestrationResult",
        "OrchestrationTask",
        "QualityResult",
        "QualityValidator",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "a0c80095b946b77b07b6dbb347d34a9b0e63f3572770dc82de92477fc6282f46",
      "artifact_id": "dda590b2-759a-4c08-98ea-9fd4cc5ccd7c"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.parallel_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/parallel_executor.py",
      "category": "core",
      "module_doc": "Parallel execution strategy\n\nEpic 5 Phase 3.1: Parallel task execution \nSingle responsibility: Execute multiple subtasks simultaneously",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
          "line_range": [
            28,
            90
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_subtask",
          "docstring": "Execute single subtask with specified router",
          "line_range": [
            92,
            129
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_task",
          "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
          "line_range": [
            131,
            161
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ParallelExecutor",
          "docstring": "Parallel task execution strategy\n\nEpic 5 example: documentation + code generation simultaneously\nBenefit: Maximum speed, resource utilization",
          "line_range": [
            16,
            161
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using parallel strategy\n\nSplits task into subtasks and executes them simultaneously",
              "line_range": [
                28,
                90
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_subtask",
              "docstring": "Execute single subtask with specified router",
              "line_range": [
                92,
                129
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "task"
              ]
            },
            {
              "name": "_decompose_task",
              "docstring": "Decompose task into parallel subtasks\n\nSimple decomposition - can be enhanced with TaskClassifier",
              "line_range": [
                131,
                161
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "len",
          "str",
          "set",
          "list",
          "agents_used.append",
          "OrchestrationResult",
          "parallel_tasks.append",
          "enumerate",
          "self._decompose_task",
          "isinstance",
          "self._execute_subtask",
          "result.get",
          "asyncio.gather",
          "datetime.now"
        ],
        "_execute_subtask": [
          "str",
          "router.route_task",
          "router.execute_with_model"
        ],
        "_decompose_task": [
          "any",
          "query.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "asyncio",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "2c482ec2f4d28a3d8502ea47101d535569a8959edf61524d38fd5eda4a5ef938",
      "artifact_id": "07d4bd71-a104-40d6-9b4a-e1321f48d421"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.sequential_executor",
      "path": "restructure/core/llmgenie/orchestration/executors/sequential_executor.py",
      "category": "core",
      "module_doc": "Sequential execution strategy\n\nEpic 5 Phase 3.1: Sequential handoffs execution\nSingle responsibility: Execute tasks in sequence with context handoffs",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize with available ModelRouter instances",
          "line_range": [
            23,
            25
          ],
          "parameters": [
            "self",
            "agent_routers"
          ],
          "decorators": []
        },
        {
          "name": "execute",
          "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
          "line_range": [
            27,
            104
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_execute_step",
          "docstring": "Execute single sequential step with context",
          "line_range": [
            106,
            148
          ],
          "parameters": [
            "self",
            "router_name",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_query_with_context",
          "docstring": "Enhance query with context from previous steps for better handoff",
          "line_range": [
            150,
            167
          ],
          "parameters": [
            "self",
            "subtask",
            "context",
            "step_name"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary from step result for context handoff",
          "line_range": [
            169,
            183
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_extract_key_outputs",
          "docstring": "Extract key outputs for next step context",
          "line_range": [
            185,
            196
          ],
          "parameters": [
            "self",
            "step_result"
          ],
          "decorators": []
        },
        {
          "name": "_decompose_sequential_task",
          "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
          "line_range": [
            198,
            236
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SequentialExecutor",
          "docstring": "Sequential handoffs execution strategy\n\nEpic 5 example: design \u2192 implementation \u2192 review\nBenefit: Context preservation, logical workflow",
          "line_range": [
            15,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize with available ModelRouter instances",
              "line_range": [
                23,
                25
              ],
              "parameters": [
                "self",
                "agent_routers"
              ]
            },
            {
              "name": "execute",
              "docstring": "Execute task using sequential strategy\n\nExecutes subtasks in order, passing context between steps",
              "line_range": [
                27,
                104
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_execute_step",
              "docstring": "Execute single sequential step with context",
              "line_range": [
                106,
                148
              ],
              "parameters": [
                "self",
                "router_name",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_enhance_query_with_context",
              "docstring": "Enhance query with context from previous steps for better handoff",
              "line_range": [
                150,
                167
              ],
              "parameters": [
                "self",
                "subtask",
                "context",
                "step_name"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary from step result for context handoff",
              "line_range": [
                169,
                183
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_extract_key_outputs",
              "docstring": "Extract key outputs for next step context",
              "line_range": [
                185,
                196
              ],
              "parameters": [
                "self",
                "step_result"
              ]
            },
            {
              "name": "_decompose_sequential_task",
              "docstring": "Decompose task into sequential steps\n\nEpic 5 pattern: design \u2192 implementation \u2192 review",
              "line_range": [
                198,
                236
              ],
              "parameters": [
                "self",
                "query"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "execute": [
          "len",
          "self._extract_summary",
          "str",
          "list",
          "agents_used.append",
          "self._extract_key_outputs",
          "OrchestrationResult",
          "enumerate",
          "self._decompose_sequential_task",
          "self._execute_step",
          "step_result.get",
          "datetime.now"
        ],
        "_execute_step": [
          "str",
          "self._enhance_query_with_context",
          "list",
          "router.route_task",
          "context.keys",
          "router.execute_with_model"
        ],
        "_enhance_query_with_context": [
          "previous_outputs.append",
          "value.get",
          "key.startswith",
          "context.items"
        ],
        "_extract_summary": [
          "str",
          "step_result.get",
          "len",
          "isinstance"
        ],
        "_extract_key_outputs": [
          "key_outputs.append",
          "step_result.get",
          "isinstance"
        ],
        "_decompose_sequential_task": [
          "any",
          "query.lower"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationResult",
        "OrchestrationTask",
        "core",
        "datetime",
        "task_router",
        "typing"
      ],
      "hash": "eed9a52c092a9869150c9740578d82836d45b6f78691fceef7487f9a43018ecd",
      "artifact_id": "e973e3fc-642c-4d8e-b87b-ee8d1ee60d4f"
    },
    {
      "module_id": "restructure.core.llmgenie.orchestration.executors.__init__",
      "path": "restructure/core/llmgenie/orchestration/executors/__init__.py",
      "category": "cli",
      "module_doc": "Execution strategies for multi-agent orchestration\n\nEpic 5 Phase 3.1: All execution modes\n- ParallelExecutor: Independent parallel execution\n- SequentialExecutor: Sequential handoffs with context\n- CollaborativeExecutor: Competitive quality optimization",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CollaborativeExecutor",
        "ParallelExecutor",
        "SequentialExecutor",
        "collaborative_executor",
        "parallel_executor",
        "sequential_executor"
      ],
      "hash": "9eb357fce290bb15766ae4f824cfe940887df5e2fa98a08ae50fa72e8d0ac401",
      "artifact_id": "c1339d02-2f11-481a-94bd-bd887930b60d"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.metrics",
      "path": "restructure/core/llmgenie/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "print",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "print",
          "tracker.get_session_summary",
          "max",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "open",
          "tracker.get_analytics_data",
          "print",
          "csv.writer",
          "json.dump",
          "writer.writerow",
          "get_metrics_tracker",
          "enumerate",
          "time.strftime",
          "tracker.get_session_summary",
          "json.dumps"
        ],
        "metrics_report": [
          "sum",
          "len",
          "analytics.get",
          "open",
          "tracker.get_analytics_data",
          "print",
          "min",
          "f.write",
          "get_metrics_tracker",
          "time.strftime"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "print",
          "get_metrics_tracker",
          "get_token_summary",
          "enumerate",
          "interaction.get",
          "summary.get"
        ],
        "cmd_metrics": [
          "metrics_report",
          "metrics_track",
          "print",
          "metrics_tokens",
          "metrics_analytics",
          "metrics_status",
          "metrics_summary"
        ]
      },
      "dependencies": [
        "core.llmgenie.metrics_tracker",
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "time",
        "track_workflow_event"
      ],
      "hash": "f4e9ffafe6b4a528960643400c0049482e633cd146d3230a1f8f80ab30b8a3dd",
      "artifact_id": "0baab1df-709e-4222-98a9-422a6f487e82"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.services",
      "path": "restructure/core/llmgenie/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "metrics_report.add_argument",
          "api_start.add_argument",
          "metrics_parser.add_subparsers",
          "metrics_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "api_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "bot_parser.add_subparsers",
          "subparsers.add_parser",
          "services_parser.add_subparsers",
          "bot_start.add_argument",
          "services_subparsers.add_parser",
          "api_subparsers.add_parser",
          "metrics_track.add_argument"
        ],
        "cmd_api_management": [
          "Path",
          "str",
          "venv_path.exists",
          "pid_file.exists",
          "process.wait",
          "subprocess.Popen",
          "pid_file.unlink",
          "open",
          "print",
          "f.write",
          "process.terminate",
          "requests.post",
          "int",
          "response.json",
          "requests.get",
          "psutil.Process",
          "f.read",
          "data.get"
        ],
        "cmd_bot_management": [
          "Path",
          "str",
          "pid_file.exists",
          "process.wait",
          "subprocess.Popen",
          "pid_file.unlink",
          "open",
          "print",
          "f.write",
          "process.terminate",
          "bot_scripts.get",
          "os.getenv",
          "int",
          "active_bots.append",
          "psutil.Process",
          "process.is_running",
          "f.read"
        ],
        "cmd_services": [
          "type",
          "print",
          "cmd_bot_management",
          "time.sleep",
          "cmd_api_management"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "artifact_id": "138be854-cc3c-4ba6-8dda-77aa6a00d04d"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.__init__",
      "path": "restructure/core/llmgenie/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "f8a10ff9-eab4-4be3-af55-6f156f79a6e3"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.commands.queue",
      "path": "restructure/core/llmgenie/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "len",
          "attach_to_llm_request",
          "item.get",
          "get_folder_structure",
          "load_gitignore",
          "open",
          "logging.info",
          "print",
          "options.get",
          "json.load",
          "logging.error",
          "read_file_content",
          "enumerate",
          "client.query",
          "isinstance",
          "workflow.get",
          "time.time",
          "write_to_file"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "get_folder_structure",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3a70eff4f7e5843b751690556afc4895f66aec81012715a060d1e2ed24daf722",
      "artifact_id": "a003b663-5b69-413f-8f43-e45839f43820"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.audit",
      "path": "restructure/core/llmgenie/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "Path",
          "print",
          "file_path.exists",
          "hasattr",
          "analyze_duplicates"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "core.llmgenie.cli",
        "os",
        "pathlib"
      ],
      "hash": "debd01c866c298dd83797c012c8b2443affc5becd6dca75e702282c7b54058e7",
      "artifact_id": "fd1cd903-7b77-46b0-bc92-ece059cb3a1c"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.utils",
      "path": "restructure/core/llmgenie/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from core.llmgenie.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "config_path.exists",
          "toml.load",
          "logging.error",
          "config_path.open"
        ],
        "read_file_content": [
          "Path",
          "path.open",
          "path.is_file",
          "logging.error",
          "f.read"
        ],
        "write_to_file": [
          "Path",
          "str",
          "logging.info",
          "file_path.exists",
          "f.write",
          "logging.error",
          "base_path.mkdir",
          "logging.warning",
          "file_path.open",
          "re.sub"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "content.strip",
          "re.findall"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "set",
          "list",
          "config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "config.get",
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "Path",
          "toml.dump",
          "logging.error",
          "config_path.open"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "2af9c4d39b5839e6d9ccb00fc9c93bbb5d6936765b7763474e5dc9c24800e628",
      "artifact_id": "01bb7619-fd20-4fcf-b93e-5bc053bcdf61"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.dogfood",
      "path": "restructure/core/llmgenie/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "artifact_id": "0d3bac63-0230-4d4f-a2ae-5076ea56e0a0"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.handlers_legacy",
      "path": "restructure/core/llmgenie/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "re.match",
          "read_file_content",
          "parse",
          "JSONCache",
          "logging.warning",
          "client.query",
          "write_to_file",
          "sorted",
          "logging.error",
          "m.group",
          "json.dumps",
          "Path",
          "attach_to_llm_request",
          "user_input.lower",
          "user_input.startswith",
          "cache.close",
          "load_gitignore",
          "LLMClient",
          "input",
          "get_folder_structure",
          "print",
          "args_str.strip",
          "os.listdir"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.cli",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "get_folder_structure",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "d7480d621e41d40722fac2f1c85ae74a1307cb45818a7cdc01fc388082ed587b",
      "artifact_id": "84d46635-8a56-4b9b-820b-5331a8f938cb"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.analyze_duplicates",
      "path": "restructure/core/llmgenie/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "sorted",
          "len",
          "filtered_duplicates.items",
          "rec.get",
          "duplicates.items",
          "r.get",
          "WorkflowOrchestrator",
          "print",
          "analysis.get",
          "open",
          "json.dump",
          "orchestrator.analyze_codebase_for_duplicates",
          "enumerate",
          "getattr",
          "hasattr",
          "duplication_data.get",
          "traceback.print_exc",
          "json.dumps"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "core.llmgenie.workflow_orchestrator",
        "json",
        "traceback"
      ],
      "hash": "5d5429cec0926cad57bd7013a0dd05ce6c9aac09503ddd86314c73d2f4fcd38a",
      "artifact_id": "98f8b59b-5c7e-4e35-a8be-fe38fc33296c"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.__init__",
      "path": "restructure/core/llmgenie/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "00ac8020-aa31-4fc3-a865-39139a3f6bf2"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.review",
      "path": "restructure/core/llmgenie/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "artifact_id": "36143c15-dc02-4dbf-bd21-c2719bbb26ba"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.context",
      "path": "restructure/core/llmgenie/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "artifact_id": "f8551c22-4efe-4d4a-8901-b49a17079a15"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.query",
      "path": "restructure/core/llmgenie/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "Path",
          "logging.info",
          "json.dump",
          "logging.error",
          "cache.close",
          "JSONCache",
          "client.query_with_context",
          "hasattr",
          "logging.warning",
          "client.query",
          "create_context_orchestrator",
          "LLMClient",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.context_orchestrator",
        "create_context_orchestrator",
        "json",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "0b553c169688521511caaf77bbfe644dfbc069acb2cb724d62d1d29b754799ca",
      "artifact_id": "78a9f849-ac12-493a-bf73-c69f5fb8650f"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.copilot",
      "path": "restructure/core/llmgenie/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "config_path.exists",
          "manager.validate_change",
          "manager.get_context_status",
          "smart_suggest",
          "manager.unload_context_layer",
          "getattr",
          "hasattr",
          "manager.load_context_layer",
          "logging.error",
          "manager.close",
          "layers.split",
          "Path",
          "shutil.copy",
          "logging.info",
          "open",
          "print",
          "f.write",
          "manager.export_context",
          "manager.refresh_all_contexts",
          "initialize_copilot",
          "enumerate",
          "template_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "core.llmgenie.copilot",
        "initialize_copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "87b3028495cb05fc38eca77649022a488eff1f25da8260c72d9a3de36113d47d",
      "artifact_id": "8875f162-fb43-467f-9108-dc996efc544f"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.parse",
      "path": "restructure/core/llmgenie/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "ast_path.open",
          "JSONCache",
          "struct_data.get",
          "getattr",
          "logging.warning",
          "mod_dir.mkdir",
          "config.get",
          "logging.error",
          "cli_config.get",
          "Path",
          "json.dump",
          "load_config",
          "generate_json",
          "cache.close",
          "struct_path.open",
          "parsing_config.get",
          "logging.info",
          "func.get",
          "module.get",
          "cache.cache_json"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "core.llmgenie.cache",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.utils",
        "generate_json",
        "json",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "96d71f8af8ca41ceb22c3f49d46725defd7587080734c9f38b8227171bf3181f",
      "artifact_id": "5f89be70-64cd-4e76-9ff8-1195234e8936"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.epic",
      "path": "restructure/core/llmgenie/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "show_links": [
          "Path",
          "str",
          "item.get",
          "print",
          "results.items",
          "epic_path.exists",
          "status_filter.lower",
          "load_json",
          "link_map.items",
          "epic.get",
          "t.upper",
          "json.dumps",
          "data.get"
        ],
        "add_epic_cli_subparser": [
          "epic_sub.add_parser",
          "show_links_parser.add_argument",
          "epic_parser.add_subparsers",
          "subparsers.add_parser",
          "show_links_parser.set_defaults"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "artifact_id": "ff634e94-b0b6-4aed-a47c-7b70be3856be"
    },
    {
      "module_id": "restructure.core.llmgenie.modules.cli.handlers",
      "path": "restructure/core/llmgenie/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "logging.info",
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "hasattr"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "core.llmgenie",
        "core.llmgenie.cache",
        "core.llmgenie.cli_core",
        "core.llmgenie.generators.json_generator",
        "core.llmgenie.modules.cli.handlers_legacy",
        "core.llmgenie.modules.cli.utils",
        "core.llmgenie.self_run",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "82122b314d669ac5441c47b249b658f803a0ede9eceba8da1392ed98e1301030",
      "artifact_id": "96c63532-4aa2-476a-8ea8-092110321bb8"
    },
    {
      "module_id": "restructure.tests.orchestration.__init__",
      "path": "restructure/tests/orchestration/__init__.py",
      "category": "test",
      "module_doc": "Modular tests for Multi-Agent Orchestration\n\nEpic 5 Phase 3.2: Beautiful modular test structure\nFollowing same patterns as orchestration implementation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "create_mock_classification",
        "create_mock_router",
        "fixtures"
      ],
      "hash": "e5cd8b226d3d4505ef637758defdd16b2aca91d7cd2ed38360feac8add3c5e8a",
      "artifact_id": "def0f8fd-e346-48b0-b5ff-6ce0fcd0094d"
    },
    {
      "module_id": "restructure.tests.orchestration.fixtures",
      "path": "restructure/tests/orchestration/fixtures.py",
      "category": "test",
      "module_doc": "Shared test fixtures for orchestration testing\n\nEpic 5 Phase 3.2: Modular test utilities\nSingle responsibility: Common test setup utilities",
      "functions": [
        {
          "name": "create_mock_router",
          "docstring": "Create standardized mock ModelRouter for testing",
          "line_range": [
            15,
            39
          ],
          "parameters": [
            "model_name"
          ],
          "decorators": []
        },
        {
          "name": "create_mock_classification",
          "docstring": "Create standardized mock classification for testing",
          "line_range": [
            50,
            56
          ],
          "parameters": [
            "task_type",
            "confidence"
          ],
          "decorators": []
        },
        {
          "name": "mock_agent_routers",
          "docstring": "Standard set of mock agent routers for testing",
          "line_range": [
            60,
            66
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "sample_task",
          "docstring": "Standard orchestration task for testing",
          "line_range": [
            70,
            79
          ],
          "parameters": [],
          "decorators": [
            "pytest.fixture"
          ]
        }
      ],
      "classes": [
        {
          "name": "MockClassification",
          "docstring": "Mock classification result for testing",
          "line_range": [
            43,
            47
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "create_mock_router": [
          "RoutingDecision",
          "AsyncMock",
          "Mock"
        ],
        "create_mock_classification": [
          "MockClassification"
        ],
        "mock_agent_routers": [
          "create_mock_router"
        ],
        "sample_task": [
          "OrchestrationTask"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "Mock",
        "ModelChoice",
        "ModelRouter",
        "OrchestrationTask",
        "RoutingDecision",
        "dataclass",
        "dataclasses",
        "pytest",
        "src.llmgenie.orchestration.core",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "336e9732d4a736487f06c17e382e2a4c901a3c91d1832fa7cdfa1275d305a844",
      "artifact_id": "b8100f10-fca1-4452-b06d-d860264fc975"
    },
    {
      "module_id": "restructure.tests.orchestration.integration.__init__",
      "path": "restructure/tests/orchestration/integration/__init__.py",
      "category": "test",
      "module_doc": "Integration tests\n\nEpic 5 Phase 3.2: Modular integration tests\n- Epic 5 component integration\n- Quality pipeline integration\n- Performance validation",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "f6395a280dab5eed75eab816a2952b83e20a8cbc99d7bb71f286bee531d1b946",
      "artifact_id": "810428a4-b880-4eff-9c22-052f1ee4915d"
    },
    {
      "module_id": "restructure.tests.orchestration.integration.test_epic5_components",
      "path": "restructure/tests/orchestration/integration/test_epic5_components.py",
      "category": "test",
      "module_doc": "Test integration with Epic 5 components\n\nEpic 5 Phase 3.2: Modular integration tests\nSingle responsibility: Test Epic 5 TaskRouter/ModelRouter integration only",
      "functions": [
        {
          "name": "orchestrator_with_classifier",
          "docstring": "Create orchestrator with TaskClassifier integration",
          "line_range": [
            20,
            32
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_auto_mode_selection",
          "docstring": "Test automatic mode selection using TaskClassifier",
          "line_range": [
            35,
            47
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_model_router_interface_compliance",
          "docstring": "Test that orchestration correctly uses ModelRouter interface",
          "line_range": [
            50,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_orchestrator_stats_with_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is available",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "self",
            "orchestrator_with_classifier"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestrator_stats_without_classifier",
          "docstring": "Test orchestrator stats when TaskClassifier is not available",
          "line_range": [
            81,
            90
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEpic5Integration",
          "docstring": "Test integration with Epic 5 TaskRouter components",
          "line_range": [
            16,
            90
          ],
          "methods": [
            {
              "name": "orchestrator_with_classifier",
              "docstring": "Create orchestrator with TaskClassifier integration",
              "line_range": [
                20,
                32
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_auto_mode_selection",
              "docstring": "Test automatic mode selection using TaskClassifier",
              "line_range": [
                35,
                47
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_model_router_interface_compliance",
              "docstring": "Test that orchestration correctly uses ModelRouter interface",
              "line_range": [
                50,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestrator_stats_with_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is available",
              "line_range": [
                72,
                79
              ],
              "parameters": [
                "self",
                "orchestrator_with_classifier"
              ]
            },
            {
              "name": "test_orchestrator_stats_without_classifier",
              "docstring": "Test orchestrator stats when TaskClassifier is not available",
              "line_range": [
                81,
                90
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "orchestrator_with_classifier": [
          "AsyncMock",
          "create_mock_classification",
          "AgentOrchestrator",
          "create_mock_router",
          "Mock"
        ],
        "test_auto_mode_selection": [
          "orchestrator_with_classifier.orchestrate",
          "create_mock_classification"
        ],
        "test_model_router_interface_compliance": [
          "AgentOrchestrator",
          "create_mock_router",
          "orchestrator.orchestrate"
        ],
        "test_orchestrator_stats_with_classifier": [
          "len",
          "orchestrator_with_classifier.get_orchestration_stats"
        ],
        "test_orchestrator_stats_without_classifier": [
          "AgentOrchestrator",
          "create_mock_router",
          "orchestrator.get_orchestration_stats"
        ]
      },
      "dependencies": [
        "AgentOrchestrator",
        "AsyncMock",
        "ExecutionMode",
        "Mock",
        "TaskClassifier",
        "create_mock_classification",
        "create_mock_router",
        "fixtures",
        "pytest",
        "src.llmgenie.orchestration",
        "src.llmgenie.task_router",
        "unittest.mock"
      ],
      "hash": "6edc2562c8a82e152096729256d57da4f3c2ec9bd2172eab691f18e5b87ba0fe",
      "artifact_id": "85f8ebef-1119-4150-95f9-96b4d8500f73"
    },
    {
      "module_id": "restructure.tests.orchestration.core.test_task_models",
      "path": "restructure/tests/orchestration/core/test_task_models.py",
      "category": "test",
      "module_doc": "Test OrchestrationTask and OrchestrationResult models\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test task dataclass models only",
      "functions": [
        {
          "name": "test_orchestration_task_creation",
          "docstring": "Test basic task creation",
          "line_range": [
            21,
            37
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_context",
          "docstring": "Test task creation with context",
          "line_range": [
            39,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_task_with_subtasks",
          "docstring": "Test task creation with predefined subtasks",
          "line_range": [
            51,
            61
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_creation",
          "docstring": "Test basic result creation",
          "line_range": [
            67,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_with_quality_score",
          "docstring": "Test result creation with quality metrics",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_metadata",
          "docstring": "Test result with comprehensive metadata",
          "line_range": [
            99,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_status_values",
          "docstring": "Test valid status values",
          "line_range": [
            121,
            134
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_orchestration_result_efficiency_bounds",
          "docstring": "Test coordination efficiency is properly bounded",
          "line_range": [
            136,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestOrchestrationTask",
          "docstring": "Test OrchestrationTask dataclass",
          "line_range": [
            18,
            61
          ],
          "methods": [
            {
              "name": "test_orchestration_task_creation",
              "docstring": "Test basic task creation",
              "line_range": [
                21,
                37
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_context",
              "docstring": "Test task creation with context",
              "line_range": [
                39,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_task_with_subtasks",
              "docstring": "Test task creation with predefined subtasks",
              "line_range": [
                51,
                61
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TestOrchestrationResult",
          "docstring": "Test OrchestrationResult dataclass",
          "line_range": [
            64,
            150
          ],
          "methods": [
            {
              "name": "test_orchestration_result_creation",
              "docstring": "Test basic result creation",
              "line_range": [
                67,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_with_quality_score",
              "docstring": "Test result creation with quality metrics",
              "line_range": [
                84,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_metadata",
              "docstring": "Test result with comprehensive metadata",
              "line_range": [
                99,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_status_values",
              "docstring": "Test valid status values",
              "line_range": [
                121,
                134
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_orchestration_result_efficiency_bounds",
              "docstring": "Test coordination efficiency is properly bounded",
              "line_range": [
                136,
                150
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_orchestration_task_creation": [
          "OrchestrationTask",
          "isinstance"
        ],
        "test_orchestration_task_with_context": [
          "OrchestrationTask"
        ],
        "test_orchestration_task_with_subtasks": [
          "len",
          "OrchestrationTask"
        ],
        "test_orchestration_result_creation": [
          "len",
          "OrchestrationResult"
        ],
        "test_orchestration_result_with_quality_score": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_metadata": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_status_values": [
          "OrchestrationResult"
        ],
        "test_orchestration_result_efficiency_bounds": [
          "OrchestrationResult"
        ]
      },
      "dependencies": [
        "AgentCoordination",
        "ExecutionMode",
        "OrchestrationResult",
        "OrchestrationTask",
        "datetime",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "a2fcc262d9288f06079ee513b812befe385aaef043e85f7e014c1b1dd722c9cb",
      "artifact_id": "e44fc981-0ebd-465d-8b71-6a00a79b56b8"
    },
    {
      "module_id": "restructure.tests.orchestration.core.__init__",
      "path": "restructure/tests/orchestration/core/__init__.py",
      "category": "test",
      "module_doc": "Core orchestration component tests\n\nEpic 5 Phase 3.2: Modular core tests\n- ExecutionMode functionality\n- AgentCoordination types  \n- Task/Result dataclasses",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "8d4d25334b396f653cd7e2e27e12e65f8c6a9c11e31de4f9388e7fb8a33630f5",
      "artifact_id": "8bd977b5-c3df-49f4-80de-e9b0bb36ab0e"
    },
    {
      "module_id": "restructure.tests.orchestration.core.test_execution_modes",
      "path": "restructure/tests/orchestration/core/test_execution_modes.py",
      "category": "test",
      "module_doc": "Test ExecutionMode enum and smart suggestions\n\nEpic 5 Phase 3.2: Modular core tests\nSingle responsibility: Test ExecutionMode functionality only",
      "functions": [
        {
          "name": "test_execution_mode_values",
          "docstring": "Test that all execution modes have correct values",
          "line_range": [
            15,
            19
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_collaborative_tasks",
          "docstring": "Test mode suggestion for collaborative tasks",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_sequential_tasks",
          "docstring": "Test mode suggestion for sequential tasks",
          "line_range": [
            33,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_suggest_mode_for_parallel_tasks",
          "docstring": "Test mode suggestion for parallel tasks",
          "line_range": [
            45,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_descriptions",
          "docstring": "Test mode descriptions are available",
          "line_range": [
            57,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_use_cases",
          "docstring": "Test use cases are available for each mode",
          "line_range": [
            64,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_mode_enum_completeness",
          "docstring": "Test that we have expected number of execution modes",
          "line_range": [
            71,
            77
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestExecutionMode",
          "docstring": "Test ExecutionMode enum functionality",
          "line_range": [
            12,
            77
          ],
          "methods": [
            {
              "name": "test_execution_mode_values",
              "docstring": "Test that all execution modes have correct values",
              "line_range": [
                15,
                19
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_collaborative_tasks",
              "docstring": "Test mode suggestion for collaborative tasks",
              "line_range": [
                21,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_sequential_tasks",
              "docstring": "Test mode suggestion for sequential tasks",
              "line_range": [
                33,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_suggest_mode_for_parallel_tasks",
              "docstring": "Test mode suggestion for parallel tasks",
              "line_range": [
                45,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_descriptions",
              "docstring": "Test mode descriptions are available",
              "line_range": [
                57,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_use_cases",
              "docstring": "Test use cases are available for each mode",
              "line_range": [
                64,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_mode_enum_completeness",
              "docstring": "Test that we have expected number of execution modes",
              "line_range": [
                71,
                77
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "test_execution_mode_values": [],
        "test_suggest_mode_for_collaborative_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_sequential_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_suggest_mode_for_parallel_tasks": [
          "ExecutionMode.suggest_mode"
        ],
        "test_mode_descriptions": [
          "len",
          "mode.get_description",
          "isinstance"
        ],
        "test_mode_use_cases": [
          "len",
          "mode.get_use_cases",
          "isinstance"
        ],
        "test_mode_enum_completeness": [
          "len",
          "list"
        ]
      },
      "dependencies": [
        "ExecutionMode",
        "pytest",
        "src.llmgenie.orchestration.core"
      ],
      "hash": "c0e34fcebe8e3ba2587f21831cb05149040ff783b53e99d7d2ed01d67b328794",
      "artifact_id": "cba5f866-9de5-49bf-b45a-acc354eeee28"
    },
    {
      "module_id": "restructure.tests.orchestration.executors.test_parallel_executor",
      "path": "restructure/tests/orchestration/executors/test_parallel_executor.py",
      "category": "test",
      "module_doc": "Test ParallelExecutor implementation\n\nEpic 5 Phase 3.2: Modular executor tests\nSingle responsibility: Test ParallelExecutor only",
      "functions": [
        {
          "name": "parallel_executor",
          "docstring": "Create ParallelExecutor with mock routers",
          "line_range": [
            20,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_parallel_execution_success",
          "docstring": "Test successful parallel execution",
          "line_range": [
            29,
            37
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_parallel_execution_partial_failure",
          "docstring": "Test parallel execution with one agent failing",
          "line_range": [
            40,
            55
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_subtask_decomposition",
          "docstring": "Test automatic subtask decomposition",
          "line_range": [
            58,
            65
          ],
          "parameters": [
            "self",
            "parallel_executor"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "test_timing_efficiency",
          "docstring": "Test that parallel execution is actually parallel",
          "line_range": [
            68,
            85
          ],
          "parameters": [
            "self",
            "parallel_executor",
            "sample_task"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "delayed_execute",
          "docstring": "",
          "line_range": [
            71,
            73
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestParallelExecutor",
          "docstring": "Test parallel execution strategy",
          "line_range": [
            16,
            85
          ],
          "methods": [
            {
              "name": "parallel_executor",
              "docstring": "Create ParallelExecutor with mock routers",
              "line_range": [
                20,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_parallel_execution_success",
              "docstring": "Test successful parallel execution",
              "line_range": [
                29,
                37
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_parallel_execution_partial_failure",
              "docstring": "Test parallel execution with one agent failing",
              "line_range": [
                40,
                55
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            },
            {
              "name": "test_subtask_decomposition",
              "docstring": "Test automatic subtask decomposition",
              "line_range": [
                58,
                65
              ],
              "parameters": [
                "self",
                "parallel_executor"
              ]
            },
            {
              "name": "test_timing_efficiency",
              "docstring": "Test that parallel execution is actually parallel",
              "line_range": [
                68,
                85
              ],
              "parameters": [
                "self",
                "parallel_executor",
                "sample_task"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parallel_executor": [
          "ParallelExecutor",
          "create_mock_router"
        ],
        "test_parallel_execution_success": [
          "len",
          "parallel_executor.execute"
        ],
        "test_parallel_execution_partial_failure": [
          "len",
          "parallel_executor.execute",
          "Exception"
        ],
        "test_subtask_decomposition": [
          "parallel_executor._decompose_task",
          "any",
          "len",
          "subtask.lower"
        ],
        "test_timing_efficiency": [],
        "delayed_execute": [
          "asyncio.sleep"
        ]
      },
      "dependencies": [
        "Mock",
        "ParallelExecutor",
        "asyncio",
        "create_mock_router",
        "fixtures",
        "pytest",
        "sample_task",
        "src.llmgenie.orchestration.executors",
        "time",
        "unittest.mock"
      ],
      "hash": "ddcd4b096d4dc729b3e684bba692064d2767fe18826b66775122089d1140c562",
      "artifact_id": "12c5d621-a46e-4cbe-a8fd-1ff4edab486a"
    },
    {
      "module_id": "restructure.tests.orchestration.executors.__init__",
      "path": "restructure/tests/orchestration/executors/__init__.py",
      "category": "test",
      "module_doc": "Executor strategy tests\n\nEpic 5 Phase 3.2: Modular executor tests\n- ParallelExecutor tests\n- SequentialExecutor tests  \n- CollaborativeExecutor tests",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "d878102fd65f0224ee4e226de4fb6ffeaf2f4628b87f0d92753e3585ac2aa9dc",
      "artifact_id": "e44e52c6-3163-440b-aa8a-1b57489ff4b5"
    }
  ]
}