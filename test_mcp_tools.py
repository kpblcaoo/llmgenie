#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
from src.rag_context.interfaces.mcp_server import MCPServer


async def test_mcp_tools():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP"""
    
    print("üß™ Testing MCP Server initialization...")
    server = MCPServer()
    print(f"‚úÖ MCP Server created")
    print(f"‚úÖ struct_analyzer available: {server.struct_analyzer is not None}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("\nüìã Available tools:")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ list_tools
    from mcp import types
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π server
    test_server = server
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª
    # –≠–º—É–ª–∏—Ä—É–µ–º list_tools call
    
    # –ë–∞–∑–æ–≤—ã–µ RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    base_tools = [
        "enhance_prompt",
        "get_relevant_rules", 
        "get_project_structure",
        "get_system_stats", 
        "refresh_index"
    ]
    
    # Struct tools (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    struct_tools = [
        "struct_generate",
        "struct_overview", 
        "struct_analyze_module",
        "struct_search_functions",
        "struct_find_callers",
        "struct_generate_report"
    ]
    
    total_expected = len(base_tools) + (len(struct_tools) if test_server.struct_analyzer else 0)
    
    print(f"Expected tools: {total_expected}")
    print("Base RAG tools (5):")
    for tool in base_tools:
        print(f"  ‚úì {tool}")
    
    if test_server.struct_analyzer:
        print("Struct tools (6):")
        for tool in struct_tools:
            print(f"  ‚úì {tool}")
    else:
        print("‚ùå Struct tools not available (struct_analyzer is None)")
    
    print(f"\nüéØ Total tools available: {total_expected}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É struct.json
    try:
        await test_server.struct_analyzer.load_structure()
        overview = test_server.struct_analyzer.get_project_overview()
        print(f"üìä Project overview: {overview}")
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to load project structure: {e}")
    
    return total_expected


if __name__ == "__main__":
    result = asyncio.run(test_mcp_tools())
    print(f"\n‚úÖ Test completed. Expected {result} tools.") 